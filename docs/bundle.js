!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["react-epubjs"]=t():e["react-epubjs"]=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=40)}([function(e,t,n){"use strict";n.r(t),n.d(t,"requestAnimationFrame",(function(){return i})),n.d(t,"uuid",(function(){return s})),n.d(t,"documentHeight",(function(){return a})),n.d(t,"isElement",(function(){return l})),n.d(t,"isNumber",(function(){return u})),n.d(t,"isFloat",(function(){return c})),n.d(t,"prefixed",(function(){return h})),n.d(t,"defaults",(function(){return d})),n.d(t,"extend",(function(){return f})),n.d(t,"insert",(function(){return p})),n.d(t,"locationOf",(function(){return m})),n.d(t,"indexOfSorted",(function(){return g})),n.d(t,"bounds",(function(){return v})),n.d(t,"borders",(function(){return y})),n.d(t,"nodeBounds",(function(){return b})),n.d(t,"windowBounds",(function(){return w})),n.d(t,"indexOfNode",(function(){return _})),n.d(t,"indexOfTextNode",(function(){return x})),n.d(t,"indexOfElementNode",(function(){return E})),n.d(t,"isXml",(function(){return k})),n.d(t,"createBlob",(function(){return S})),n.d(t,"createBlobUrl",(function(){return T})),n.d(t,"revokeBlobUrl",(function(){return C})),n.d(t,"createBase64Url",(function(){return N})),n.d(t,"type",(function(){return O})),n.d(t,"parse",(function(){return I})),n.d(t,"qs",(function(){return R})),n.d(t,"qsa",(function(){return A})),n.d(t,"qsp",(function(){return P})),n.d(t,"sprint",(function(){return z})),n.d(t,"treeWalker",(function(){return L})),n.d(t,"walk",(function(){return D})),n.d(t,"blob2base64",(function(){return j})),n.d(t,"defer",(function(){return B})),n.d(t,"querySelectorByType",(function(){return M})),n.d(t,"findChildren",(function(){return F})),n.d(t,"parents",(function(){return U})),n.d(t,"filterChildren",(function(){return W})),n.d(t,"getParentByTagName",(function(){return q})),n.d(t,"RangeObject",(function(){return H}));var r=n(23);const i="undefined"!=typeof window&&(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame),o="undefined"!=typeof URL?URL:"undefined"!=typeof window?window.URL||window.webkitURL||window.mozURL:void 0;function s(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?n:7&n|8).toString(16)}))}function a(){return Math.max(document.documentElement.clientHeight,document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight)}function l(e){return!(!e||1!=e.nodeType)}function u(e){return!isNaN(parseFloat(e))&&isFinite(e)}function c(e){let t=parseFloat(e);return!1!==u(e)&&("string"==typeof e&&e.indexOf(".")>-1||Math.floor(t)!==t)}function h(e){var t=["-webkit-","-webkit-","-moz-","-o-","-ms-"],n=e.toLowerCase(),r=["Webkit","webkit","Moz","O","ms"].length;if("undefined"==typeof document||void 0!==document.body.style[n])return e;for(var i=0;i<r;i++)if(void 0!==document.body.style[t[i]+n])return t[i]+n;return e}function d(e){for(var t=1,n=arguments.length;t<n;t++){var r=arguments[t];for(var i in r)void 0===e[i]&&(e[i]=r[i])}return e}function f(e){var t=[].slice.call(arguments,1);return t.forEach((function(t){t&&Object.getOwnPropertyNames(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))})),e}function p(e,t,n){var r=m(e,t,n);return t.splice(r,0,e),r}function m(e,t,n,r,i){var o,s=r||0,a=i||t.length,l=parseInt(s+(a-s)/2);return n||(n=function(e,t){return e>t?1:e<t?-1:e==t?0:void 0}),a-s<=0?l:(o=n(t[l],e),a-s==1?o>=0?l:l+1:0===o?l:-1===o?m(e,t,n,l,a):m(e,t,n,s,l))}function g(e,t,n,r,i){var o,s=r||0,a=i||t.length,l=parseInt(s+(a-s)/2);return n||(n=function(e,t){return e>t?1:e<t?-1:e==t?0:void 0}),a-s<=0?-1:(o=n(t[l],e),a-s==1?0===o?l:-1:0===o?l:-1===o?g(e,t,n,l,a):g(e,t,n,s,l))}function v(e){var t=window.getComputedStyle(e),n=0,r=0;return["width","paddingRight","paddingLeft","marginRight","marginLeft","borderRightWidth","borderLeftWidth"].forEach((function(e){n+=parseFloat(t[e])||0})),["height","paddingTop","paddingBottom","marginTop","marginBottom","borderTopWidth","borderBottomWidth"].forEach((function(e){r+=parseFloat(t[e])||0})),{height:r,width:n}}function y(e){var t=window.getComputedStyle(e),n=0,r=0;return["paddingRight","paddingLeft","marginRight","marginLeft","borderRightWidth","borderLeftWidth"].forEach((function(e){n+=parseFloat(t[e])||0})),["paddingTop","paddingBottom","marginTop","marginBottom","borderTopWidth","borderBottomWidth"].forEach((function(e){r+=parseFloat(t[e])||0})),{height:r,width:n}}function b(e){let t,n=e.ownerDocument;if(e.nodeType==Node.TEXT_NODE){let r=n.createRange();r.selectNodeContents(e),t=r.getBoundingClientRect()}else t=e.getBoundingClientRect();return t}function w(){var e=window.innerWidth,t=window.innerHeight;return{top:0,left:0,right:e,bottom:t,width:e,height:t}}function _(e,t){for(var n,r=e.parentNode.childNodes,i=-1,o=0;o<r.length&&((n=r[o]).nodeType===t&&i++,n!=e);o++);return i}function x(e){return _(e,3)}function E(e){return _(e,1)}function k(e){return["xml","opf","ncx"].indexOf(e)>-1}function S(e,t){return new Blob([e],{type:t})}function T(e,t){var n=S(e,t);return o.createObjectURL(n)}function C(e){return o.revokeObjectURL(e)}function N(e,t){if("string"==typeof e)return"data:"+t+";base64,"+btoa(encodeURIComponent(e))}function O(e){return Object.prototype.toString.call(e).slice(8,-1)}function I(e,t,n){var i;return i="undefined"==typeof DOMParser||n?r.DOMParser:DOMParser,65279===e.charCodeAt(0)&&(e=e.slice(1)),(new i).parseFromString(e,t)}function R(e,t){var n;if(!e)throw new Error("No Element Provided");return void 0!==e.querySelector?e.querySelector(t):(n=e.getElementsByTagName(t)).length?n[0]:void 0}function A(e,t){return void 0!==e.querySelector?e.querySelectorAll(t):e.getElementsByTagName(t)}function P(e,t,n){var r,i;if(void 0!==e.querySelector){for(var o in t+="[",n)t+=o+"~='"+n[o]+"'";return t+="]",e.querySelector(t)}if(r=e.getElementsByTagName(t),i=Array.prototype.slice.call(r,0).filter((function(e){for(var t in n)if(e.getAttribute(t)===n[t])return!0;return!1})))return i[0]}function z(e,t){void 0!==(e.ownerDocument||e).createTreeWalker?L(e,t,NodeFilter.SHOW_TEXT):D(e,(function(e){e&&3===e.nodeType&&t(e)}))}function L(e,t,n){var r=document.createTreeWalker(e,n,null,!1);let i;for(;i=r.nextNode();)t(i)}function D(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(D(e,t))return!0;e=e.nextSibling}while(e)}function j(e){return new Promise((function(t,n){var r=new FileReader;r.readAsDataURL(e),r.onloadend=function(){t(r.result)}}))}function B(){this.resolve=null,this.reject=null,this.id=s(),this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t}),Object.freeze(this)}function M(e,t,n){var r;if(void 0!==e.querySelector&&(r=e.querySelector(`${t}[*|type="${n}"]`)),r&&0!==r.length)return r;r=A(e,t);for(var i=0;i<r.length;i++)if(r[i].getAttributeNS("http://www.idpf.org/2007/ops","type")===n||r[i].getAttribute("epub:type")===n)return r[i]}function F(e){for(var t=[],n=e.childNodes,r=0;r<n.length;r++){let e=n[r];1===e.nodeType&&t.push(e)}return t}function U(e){for(var t=[e];e;e=e.parentNode)t.unshift(e);return t}function W(e,t,n){for(var r=[],i=e.childNodes,o=0;o<i.length;o++){let e=i[o];if(1===e.nodeType&&e.nodeName.toLowerCase()===t){if(n)return e;r.push(e)}}if(!n)return r}function q(e,t){let n;if(null!==e&&""!==t)for(n=e.parentNode;1===n.nodeType;){if(n.tagName.toLowerCase()===t)return n;n=n.parentNode}}class H{constructor(){this.collapsed=!1,this.commonAncestorContainer=void 0,this.endContainer=void 0,this.endOffset=void 0,this.startContainer=void 0,this.startOffset=void 0}setStart(e,t){this.startContainer=e,this.startOffset=t,this.endContainer?this.commonAncestorContainer=this._commonAncestorContainer():this.collapse(!0),this._checkCollapsed()}setEnd(e,t){this.endContainer=e,this.endOffset=t,this.startContainer?(this.collapsed=!1,this.commonAncestorContainer=this._commonAncestorContainer()):this.collapse(!1),this._checkCollapsed()}collapse(e){this.collapsed=!0,e?(this.endContainer=this.startContainer,this.endOffset=this.startOffset,this.commonAncestorContainer=this.startContainer.parentNode):(this.startContainer=this.endContainer,this.startOffset=this.endOffset,this.commonAncestorContainer=this.endOffset.parentNode)}selectNode(e){let t=e.parentNode,n=Array.prototype.indexOf.call(t.childNodes,e);this.setStart(t,n),this.setEnd(t,n+1)}selectNodeContents(e){e.childNodes[e.childNodes-1];let t=3===e.nodeType?e.textContent.length:parent.childNodes.length;this.setStart(e,0),this.setEnd(e,t)}_commonAncestorContainer(e,t){var n=U(e||this.startContainer),r=U(t||this.endContainer);if(n[0]==r[0])for(var i=0;i<n.length;i++)if(n[i]!=r[i])return n[i-1]}_checkCollapsed(){this.startContainer===this.endContainer&&this.startOffset===this.endOffset?this.collapsed=!0:this.collapsed=!1}toString(){}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return o}));const r="0.3",i=["keydown","keyup","keypressed","mouseup","mousedown","click","touchend","touchstart","touchmove"],o={BOOK:{OPEN_FAILED:"openFailed"},CONTENTS:{EXPAND:"expand",RESIZE:"resize",SELECTED:"selected",SELECTED_RANGE:"selectedRange",LINK_CLICKED:"linkClicked"},LOCATIONS:{CHANGED:"changed"},MANAGERS:{RESIZE:"resize",RESIZED:"resized",ORIENTATION_CHANGE:"orientationchange",ADDED:"added",SCROLL:"scroll",SCROLLED:"scrolled",REMOVED:"removed"},VIEWS:{AXIS:"axis",WRITING_MODE:"writingMode",LOAD_ERROR:"loaderror",RENDERED:"rendered",RESIZED:"resized",DISPLAYED:"displayed",SHOWN:"shown",HIDDEN:"hidden",MARK_CLICKED:"markClicked"},RENDITION:{STARTED:"started",ATTACHED:"attached",DISPLAYED:"displayed",DISPLAY_ERROR:"displayerror",RENDERED:"rendered",REMOVED:"removed",RESIZED:"resized",ORIENTATION_CHANGE:"orientationchange",LOCATION_CHANGED:"locationChanged",RELOCATED:"relocated",MARK_CLICKED:"markClicked",SELECTED:"selected",LAYOUT:"layout"},LAYOUT:{UPDATED:"updated"},ANNOTATION:{ATTACH:"attach",DETACH:"detach"}}},function(e,t,n){"use strict";var r=n(0);class i{constructor(e,t,n){var o;if(this.str="",this.base={},this.spinePos=0,this.range=!1,this.path={},this.start=null,this.end=null,!(this instanceof i))return new i(e,t,n);if("string"==typeof t?this.base=this.parseComponent(t):"object"==typeof t&&t.steps&&(this.base=t),"string"===(o=this.checkType(e)))return this.str=e,Object(r.extend)(this,this.parse(e));if("range"===o)return Object(r.extend)(this,this.fromRange(e,this.base,n));if("node"===o)return Object(r.extend)(this,this.fromNode(e,this.base,n));if("EpubCFI"===o&&e.path)return e;if(e)throw new TypeError("not a valid argument for EpubCFI");return this}checkType(e){return this.isCfiString(e)?"string":!e||"object"!=typeof e||"Range"!==Object(r.type)(e)&&void 0===e.startContainer?e&&"object"==typeof e&&void 0!==e.nodeType?"node":!!(e&&"object"==typeof e&&e instanceof i)&&"EpubCFI":"range"}parse(e){var t,n,r,i={spinePos:-1,range:!1,base:{},path:{},start:null,end:null};return"string"!=typeof e?{spinePos:-1}:(0===e.indexOf("epubcfi(")&&")"===e[e.length-1]&&(e=e.slice(8,e.length-1)),(t=this.getChapterComponent(e))?(i.base=this.parseComponent(t),n=this.getPathComponent(e),i.path=this.parseComponent(n),(r=this.getRange(e))&&(i.range=!0,i.start=this.parseComponent(r[0]),i.end=this.parseComponent(r[1])),i.spinePos=i.base.steps[1].index,i):{spinePos:-1})}parseComponent(e){var t,n={steps:[],terminal:{offset:null,assertion:null}},r=e.split(":"),i=r[0].split("/");return r.length>1&&(t=r[1],n.terminal=this.parseTerminal(t)),""===i[0]&&i.shift(),n.steps=i.map(function(e){return this.parseStep(e)}.bind(this)),n}parseStep(e){var t,n,r,i,o;if((i=e.match(/\[(.*)\]/))&&i[1]&&(o=i[1]),n=parseInt(e),!isNaN(n))return n%2==0?(t="element",r=n/2-1):(t="text",r=(n-1)/2),{type:t,index:r,id:o||null}}parseTerminal(e){var t,n,i=e.match(/\[(.*)\]/);return i&&i[1]?(t=parseInt(e.split("[")[0]),n=i[1]):t=parseInt(e),Object(r.isNumber)(t)||(t=null),{offset:t,assertion:n}}getChapterComponent(e){return e.split("!")[0]}getPathComponent(e){var t=e.split("!");if(t[1]){return t[1].split(",")[0]}}getRange(e){var t=e.split(",");return 3===t.length&&[t[1],t[2]]}getCharecterOffsetComponent(e){return e.split(":")[1]||""}joinSteps(e){return e?e.map((function(e){var t="";return"element"===e.type&&(t+=2*(e.index+1)),"text"===e.type&&(t+=1+2*e.index),e.id&&(t+="["+e.id+"]"),t})).join("/"):""}segmentString(e){var t="/";return t+=this.joinSteps(e.steps),e.terminal&&null!=e.terminal.offset&&(t+=":"+e.terminal.offset),e.terminal&&null!=e.terminal.assertion&&(t+="["+e.terminal.assertion+"]"),t}toString(){var e="epubcfi(";return e+=this.segmentString(this.base),e+="!",e+=this.segmentString(this.path),this.range&&this.start&&(e+=",",e+=this.segmentString(this.start)),this.range&&this.end&&(e+=",",e+=this.segmentString(this.end)),e+=")"}compare(e,t){var n,r,o,s;if("string"==typeof e&&(e=new i(e)),"string"==typeof t&&(t=new i(t)),e.spinePos>t.spinePos)return 1;if(e.spinePos<t.spinePos)return-1;e.range?(n=e.path.steps.concat(e.start.steps),o=e.start.terminal):(n=e.path.steps,o=e.path.terminal),t.range?(r=t.path.steps.concat(t.start.steps),s=t.start.terminal):(r=t.path.steps,s=t.path.terminal);for(var a=0;a<n.length;a++){if(!n[a])return-1;if(!r[a])return 1;if(n[a].index>r[a].index)return 1;if(n[a].index<r[a].index)return-1}return n.length<r.length?-1:o.offset>s.offset?1:o.offset<s.offset?-1:0}step(e){var t=3===e.nodeType?"text":"element";return{id:e.id,tagName:e.tagName,type:t,index:this.position(e)}}filteredStep(e,t){var n,r=this.filter(e,t);if(r)return n=3===r.nodeType?"text":"element",{id:r.id,tagName:r.tagName,type:n,index:this.filteredPosition(r,t)}}pathTo(e,t,n){for(var r,i={steps:[],terminal:{offset:null,assertion:null}},o=e;o&&o.parentNode&&9!=o.parentNode.nodeType;)(r=n?this.filteredStep(o,n):this.step(o))&&i.steps.unshift(r),o=o.parentNode;return null!=t&&t>=0&&(i.terminal.offset=t,"text"!=i.steps[i.steps.length-1].type&&i.steps.push({type:"text",index:0})),i}equalStep(e,t){return!(!e||!t)&&(e.index===t.index&&e.id===t.id&&e.type===t.type)}fromRange(e,t,n){var r={range:!1,base:{},path:{},start:null,end:null},i=e.startContainer,o=e.endContainer,s=e.startOffset,a=e.endOffset,l=!1;if(n&&(l=null!=i.ownerDocument.querySelector("."+n)),"string"==typeof t?(r.base=this.parseComponent(t),r.spinePos=r.base.steps[1].index):"object"==typeof t&&(r.base=t),e.collapsed)l&&(s=this.patchOffset(i,s,n)),r.path=this.pathTo(i,s,n);else{r.range=!0,l&&(s=this.patchOffset(i,s,n)),r.start=this.pathTo(i,s,n),l&&(a=this.patchOffset(o,a,n)),r.end=this.pathTo(o,a,n),r.path={steps:[],terminal:null};var u,c=r.start.steps.length;for(u=0;u<c&&this.equalStep(r.start.steps[u],r.end.steps[u]);u++)u===c-1?r.start.terminal===r.end.terminal&&(r.path.steps.push(r.start.steps[u]),r.range=!1):r.path.steps.push(r.start.steps[u]);r.start.steps=r.start.steps.slice(r.path.steps.length),r.end.steps=r.end.steps.slice(r.path.steps.length)}return r}fromNode(e,t,n){var r={range:!1,base:{},path:{},start:null,end:null};return"string"==typeof t?(r.base=this.parseComponent(t),r.spinePos=r.base.steps[1].index):"object"==typeof t&&(r.base=t),r.path=this.pathTo(e,null,n),r}filter(e,t){var n,r,i,o,s,a=!1;return 3===e.nodeType?(a=!0,i=e.parentNode,n=e.parentNode.classList.contains(t)):(a=!1,n=e.classList.contains(t)),n&&a?(o=i.previousSibling,s=i.nextSibling,o&&3===o.nodeType?r=o:s&&3===s.nodeType&&(r=s),r||e):!(n&&!a)&&e}patchOffset(e,t,n){if(3!=e.nodeType)throw new Error("Anchor must be a text node");var r=e,i=t;for(e.parentNode.classList.contains(n)&&(r=e.parentNode);r.previousSibling;){if(1===r.previousSibling.nodeType){if(!r.previousSibling.classList.contains(n))break;i+=r.previousSibling.textContent.length}else i+=r.previousSibling.textContent.length;r=r.previousSibling}return i}normalizedMap(e,t,n){var r,i,o,s={},a=-1,l=e.length;for(r=0;r<l;r++)1===(i=e[r].nodeType)&&e[r].classList.contains(n)&&(i=3),r>0&&3===i&&3===o?s[r]=a:t===i&&(a+=1,s[r]=a),o=i;return s}position(e){var t,n;return 1===e.nodeType?((t=e.parentNode.children)||(t=Object(r.findChildren)(e.parentNode)),n=Array.prototype.indexOf.call(t,e)):n=(t=this.textNodes(e.parentNode)).indexOf(e),n}filteredPosition(e,t){var n,r;return 1===e.nodeType?(n=e.parentNode.children,r=this.normalizedMap(n,1,t)):(n=e.parentNode.childNodes,e.parentNode.classList.contains(t)&&(n=(e=e.parentNode).parentNode.childNodes),r=this.normalizedMap(n,3,t)),r[Array.prototype.indexOf.call(n,e)]}stepsToXpath(e){var t=[".","*"];return e.forEach((function(e){var n=e.index+1;e.id?t.push("*[position()="+n+" and @id='"+e.id+"']"):"text"===e.type?t.push("text()["+n+"]"):t.push("*["+n+"]")})),t.join("/")}stepsToQuerySelector(e){var t=["html"];return e.forEach((function(e){var n=e.index+1;e.id?t.push("#"+e.id):"text"===e.type||t.push("*:nth-child("+n+")")})),t.join(">")}textNodes(e,t){return Array.prototype.slice.call(e.childNodes).filter((function(e){return 3===e.nodeType||!(!t||!e.classList.contains(t))}))}walkToNode(e,t,n){var i,o,s=t||document,a=s.documentElement,l=e.length;for(o=0;o<l&&("element"===(i=e[o]).type?a=i.id?s.getElementById(i.id):(a.children||Object(r.findChildren)(a))[i.index]:"text"===i.type&&(a=this.textNodes(a,n)[i.index]),a);o++);return a}findNode(e,t,n){var r,i,o=t||document;return n||void 0===o.evaluate?r=n?this.walkToNode(e,o,n):this.walkToNode(e,o):(i=this.stepsToXpath(e),r=o.evaluate(i,o,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue),r}fixMiss(e,t,n,r){var i,o,s=this.findNode(e.slice(0,-1),n,r),a=s.childNodes,l=this.normalizedMap(a,3,r),u=e[e.length-1].index;for(let e in l){if(!l.hasOwnProperty(e))return;if(l[e]===u){if(!(t>(o=(i=a[e]).textContent.length))){s=1===i.nodeType?i.childNodes[0]:i;break}t-=o}}return{container:s,offset:t}}toRange(e,t){var n,i,o,s,a,l,u,c,h=e||document,d=!!t&&null!=h.querySelector("."+t);if(n=void 0!==h.createRange?h.createRange():new r.RangeObject,this.range?(i=this.start,l=this.path.steps.concat(i.steps),s=this.findNode(l,h,d?t:null),o=this.end,u=this.path.steps.concat(o.steps),a=this.findNode(u,h,d?t:null)):(i=this.path,l=this.path.steps,s=this.findNode(this.path.steps,h,d?t:null)),!s)return console.log("No startContainer found for",this.toString()),null;try{null!=i.terminal.offset?n.setStart(s,i.terminal.offset):n.setStart(s,0)}catch(e){c=this.fixMiss(l,i.terminal.offset,h,d?t:null),n.setStart(c.container,c.offset)}if(a)try{null!=o.terminal.offset?n.setEnd(a,o.terminal.offset):n.setEnd(a,0)}catch(e){c=this.fixMiss(u,this.end.terminal.offset,h,d?t:null),n.setEnd(c.container,c.offset)}return n}isCfiString(e){return"string"==typeof e&&0===e.indexOf("epubcfi(")&&")"===e[e.length-1]}generateChapterComponent(e,t,n){var r="/"+2*(e+1)+"/";return r+=2*(parseInt(t)+1),n&&(r+="["+n+"]"),r}collapse(e){this.range&&(this.range=!1,e?(this.path.steps=this.path.steps.concat(this.start.steps),this.path.terminal=this.start.terminal):(this.path.steps=this.path.steps.concat(this.end.steps),this.path.terminal=this.end.terminal))}}t.a=i},function(e,t,n){"use strict";var r,i,o,s,a,l,u,c=n(60),h=n(77),d=Function.prototype.apply,f=Function.prototype.call,p=Object.create,m=Object.defineProperty,g=Object.defineProperties,v=Object.prototype.hasOwnProperty,y={configurable:!0,enumerable:!1,writable:!0};i=function(e,t){var n,i;return h(t),i=this,r.call(this,e,n=function(){o.call(i,e,n),d.call(t,this,arguments)}),n.__eeOnceListener__=t,this},a={on:r=function(e,t){var n;return h(t),v.call(this,"__ee__")?n=this.__ee__:(n=y.value=p(null),m(this,"__ee__",y),y.value=null),n[e]?"object"==typeof n[e]?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:i,off:o=function(e,t){var n,r,i,o;if(h(t),!v.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==typeof(r=n[e]))for(o=0;i=r[o];++o)i!==t&&i.__eeOnceListener__!==t||(2===r.length?n[e]=r[o?0:1]:r.splice(o,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:s=function(e){var t,n,r,i,o;if(v.call(this,"__ee__")&&(i=this.__ee__[e]))if("object"==typeof i){for(n=arguments.length,o=new Array(n-1),t=1;t<n;++t)o[t-1]=arguments[t];for(i=i.slice(),t=0;r=i[t];++t)d.call(r,this,o)}else switch(arguments.length){case 1:f.call(i,this);break;case 2:f.call(i,this,arguments[1]);break;case 3:f.call(i,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,o=new Array(n-1),t=1;t<n;++t)o[t-1]=arguments[t];d.call(i,this,o)}}},l={on:c(r),once:c(i),off:c(o),emit:c(s)},u=g({},l),e.exports=t=function(e){return null==e?p(u):g(Object(e),l)},t.methods=a},function(e,t,n){"use strict";var r=n(9),i=n.n(r);t.a=class{constructor(e){var t;e.indexOf("://")>-1&&(e=new URL(e).pathname),t=this.parse(e),this.path=e,this.isDirectory(e)?this.directory=e:this.directory=t.dir+"/",this.filename=t.base,this.extension=t.ext.slice(1)}parse(e){return i.a.parse(e)}isAbsolute(e){return i.a.isAbsolute(e||this.path)}isDirectory(e){return"/"===e.charAt(e.length-1)}resolve(e){return i.a.resolve(this.directory,e)}relative(e){return e&&e.indexOf("://")>-1?e:i.a.relative(this.directory,e)}splitPath(e){return this.splitPathRe.exec(e).slice(1)}toString(){return this.path}}},function(e,t,n){"use strict";var r=n(4),i=n(9),o=n.n(i);t.a=class{constructor(e,t){var n=e.indexOf("://")>-1,i=e;if(this.Url=void 0,this.href=e,this.protocol="",this.origin="",this.hash="",this.hash="",this.search="",this.base=t,!n&&!1!==t&&"string"!=typeof t&&window&&window.location&&(this.base=window.location.href),n||this.base)try{this.base?this.Url=new URL(e,this.base):this.Url=new URL(e),this.href=this.Url.href,this.protocol=this.Url.protocol,this.origin=this.Url.origin,this.hash=this.Url.hash,this.search=this.Url.search,i=this.Url.pathname+(this.Url.search?this.Url.search:"")}catch(e){this.Url=void 0,this.base&&(i=new r.a(this.base).resolve(i))}this.Path=new r.a(i),this.directory=this.Path.directory,this.filename=this.Path.filename,this.extension=this.Path.extension}path(){return this.Path}resolve(e){var t;return e.indexOf("://")>-1?e:(t=o.a.resolve(this.directory,e),this.origin+t)}relative(e){return o.a.relative(e,this.directory)}toString(){return this.href}}},function(e,t,n){"use strict";t.a=class{constructor(e){this.context=e||this,this.hooks=[]}register(){for(var e=0;e<arguments.length;++e)if("function"==typeof arguments[e])this.hooks.push(arguments[e]);else for(var t=0;t<arguments[e].length;++t)this.hooks.push(arguments[e][t])}deregister(e){let t;for(let n=0;n<this.hooks.length;n++)if(t=this.hooks[n],t===e){this.hooks.splice(n,1);break}}trigger(){var e=arguments,t=this.context,n=[];return this.hooks.forEach((function(r){var i=r.apply(t,e);i&&"function"==typeof i.then&&n.push(i)})),Promise.all(n)}list(){return this.hooks}clear(){return this.hooks=[]}}},function(e,t,n){e.exports=n(108)()},function(e,t,n){"use strict";e.exports=n(41)},function(e,t,n){"use strict";if(!r)var r={cwd:function(){return"/"}};function i(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+e)}function o(e,t){for(var n,r="",i=-1,o=0,s=0;s<=e.length;++s){if(s<e.length)n=e.charCodeAt(s);else{if(47===n)break;n=47}if(47===n){if(i===s-1||1===o);else if(i!==s-1&&2===o){if(r.length<2||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){for(var a=r.length-1,l=a;l>=0&&47!==r.charCodeAt(l);--l);if(l!==a){r=-1===l?"":r.slice(0,l),i=s,o=0;continue}}else if(2===r.length||1===r.length){r="",i=s,o=0;continue}t&&(r.length>0?r+="/..":r="..")}else r.length>0?r+="/"+e.slice(i+1,s):r=e.slice(i+1,s);i=s,o=0}else 46===n&&-1!==o?++o:o=-1}return r}var s={resolve:function(){for(var e,t="",n=!1,s=arguments.length-1;s>=-1&&!n;s--){var a;s>=0?a=arguments[s]:(void 0===e&&(e=r.cwd()),a=e),i(a),0!==a.length&&(t=a+"/"+t,n=47===a.charCodeAt(0))}return t=o(t,!n),n?t.length>0?"/"+t:"/":t.length>0?t:"."},normalize:function(e){if(i(e),0===e.length)return".";var t=47===e.charCodeAt(0),n=47===e.charCodeAt(e.length-1);return 0!==(e=o(e,!t)).length||t||(e="."),e.length>0&&n&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return i(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var n=arguments[t];i(n),n.length>0&&(void 0===e?e=n:e+="/"+n)}return void 0===e?".":s.normalize(e)},relative:function(e,t){if(i(e),i(t),e===t)return"";if((e=s.resolve(e))===(t=s.resolve(t)))return"";for(var n=1;n<e.length&&47===e.charCodeAt(n);++n);for(var r=e.length,o=r-n,a=1;a<t.length&&47===t.charCodeAt(a);++a);for(var l=t.length-a,u=o<l?o:l,c=-1,h=0;h<=u;++h){if(h===u){if(l>u){if(47===t.charCodeAt(a+h))return t.slice(a+h+1);if(0===h)return t.slice(a+h)}else o>u&&(47===e.charCodeAt(n+h)?c=h:0===h&&(c=0));break}var d=e.charCodeAt(n+h);if(d!==t.charCodeAt(a+h))break;47===d&&(c=h)}var f="";for(h=n+c+1;h<=r;++h)h!==r&&47!==e.charCodeAt(h)||(0===f.length?f+="..":f+="/..");return f.length>0?f+t.slice(a+c):(a+=c,47===t.charCodeAt(a)&&++a,t.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(i(e),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,o=!0,s=e.length-1;s>=1;--s)if(47===(t=e.charCodeAt(s))){if(!o){r=s;break}}else o=!1;return-1===r?n?"/":".":n&&1===r?"//":e.slice(0,r)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');i(e);var n,r=0,o=-1,s=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var a=t.length-1,l=-1;for(n=e.length-1;n>=0;--n){var u=e.charCodeAt(n);if(47===u){if(!s){r=n+1;break}}else-1===l&&(s=!1,l=n+1),a>=0&&(u===t.charCodeAt(a)?-1==--a&&(o=n):(a=-1,o=l))}return r===o?o=l:-1===o&&(o=e.length),e.slice(r,o)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!s){r=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":e.slice(r,o)},extname:function(e){i(e);for(var t=-1,n=0,r=-1,o=!0,s=0,a=e.length-1;a>=0;--a){var l=e.charCodeAt(a);if(47!==l)-1===r&&(o=!1,r=a+1),46===l?-1===t?t=a:1!==s&&(s=1):-1!==t&&(s=-1);else if(!o){n=a+1;break}}return-1===t||-1===r||0===s||1===s&&t===r-1&&t===n+1?"":e.slice(t,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('Parameter "pathObject" must be an object, not '+typeof e);return function(e,t){var n=t.dir||t.root,r=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+r:n+e+r:r}("/",e)},parse:function(e){i(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var n,r=e.charCodeAt(0),o=47===r;o?(t.root="/",n=1):n=0;for(var s=-1,a=0,l=-1,u=!0,c=e.length-1,h=0;c>=n;--c)if(47!==(r=e.charCodeAt(c)))-1===l&&(u=!1,l=c+1),46===r?-1===s?s=c:1!==h&&(h=1):-1!==s&&(h=-1);else if(!u){a=c+1;break}return-1===s||-1===l||0===h||1===h&&s===l-1&&s===a+1?-1!==l&&(t.base=t.name=0===a&&o?e.slice(1,l):e.slice(a,l)):(0===a&&o?(t.name=e.slice(1,s),t.base=e.slice(1,l)):(t.name=e.slice(a,s),t.base=e.slice(a,l)),t.ext=e.slice(s,l)),a>0?t.dir=e.slice(0,a-1):o&&(t.dir="/"),t},sep:"/",delimiter:":",posix:null};e.exports=s},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return s})),n.d(t,"d",(function(){return a})),n.d(t,"c",(function(){return l})),n.d(t,"e",(function(){return u}));var r=n(0),i=n(5);n(4);function o(e,t){var n,i,o=t.url,s=o.indexOf("://")>-1;e&&(i=Object(r.qs)(e,"head"),(n=Object(r.qs)(i,"base"))||(n=e.createElement("base"),i.insertBefore(n,i.firstChild)),!s&&window&&window.location&&(o=window.location.origin+o),n.setAttribute("href",o))}function s(e,t){var n,i,o=t.canonical;e&&(n=Object(r.qs)(e,"head"),(i=Object(r.qs)(n,"link[rel='canonical']"))?i.setAttribute("href",o):((i=e.createElement("link")).setAttribute("rel","canonical"),i.setAttribute("href",o),n.appendChild(i)))}function a(e,t){var n,i,o=t.idref;e&&(n=Object(r.qs)(e,"head"),(i=Object(r.qs)(n,"link[property='dc.identifier']"))?i.setAttribute("content",o):((i=e.createElement("meta")).setAttribute("name","dc.identifier"),i.setAttribute("content",o),n.appendChild(i)))}function l(e,t){var n=e.querySelectorAll("a[href]");if(n.length)for(var o=Object(r.qs)(e.ownerDocument,"base"),s=o?o.getAttribute("href"):void 0,a=function(e){var n=e.getAttribute("href");if(0!==n.indexOf("mailto:"))if(n.indexOf("://")>-1)e.setAttribute("target","_blank");else{var r;try{r=new i.a(n,s)}catch(e){}e.onclick=function(){return r&&r.hash?t(r.Path.path+r.hash):t(r?r.Path.path:n),!1}}}.bind(this),l=0;l<n.length;l++)a(n[l])}function u(e,t,n){return t.forEach((function(t,r){t&&n[r]&&(t=t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),e=e.replace(new RegExp(t,"g"),n[r]))})),e}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(3),i=n.n(r),o=n(0),s=n(2),a=n(17),l=n(10),u=n(1);const c="undefined"!=typeof navigator,h=c&&/Chrome/.test(navigator.userAgent),d=c&&!h&&/AppleWebKit/.test(navigator.userAgent);class f{constructor(e,t,n,r){this.epubcfi=new s.a,this.document=e,this.documentElement=this.document.documentElement,this.content=t||this.document.body,this.window=this.document.defaultView,this._size={width:0,height:0},this.sectionIndex=r||0,this.cfiBase=n||"",this.epubReadingSystem("epub.js",u.b),this.called=0,this.active=!0,this.listeners()}static get listenedEvents(){return u.a}width(e){var t=this.content;return e&&Object(o.isNumber)(e)&&(e+="px"),e&&(t.style.width=e),parseInt(this.window.getComputedStyle(t).width)}height(e){var t=this.content;return e&&Object(o.isNumber)(e)&&(e+="px"),e&&(t.style.height=e),parseInt(this.window.getComputedStyle(t).height)}contentWidth(e){var t=this.content||this.document.body;return e&&Object(o.isNumber)(e)&&(e+="px"),e&&(t.style.width=e),parseInt(this.window.getComputedStyle(t).width)}contentHeight(e){var t=this.content||this.document.body;return e&&Object(o.isNumber)(e)&&(e+="px"),e&&(t.style.height=e),parseInt(this.window.getComputedStyle(t).height)}textWidth(){let e,t,n=this.document.createRange(),r=this.content||this.document.body,i=Object(o.borders)(r);return n.selectNodeContents(r),e=n.getBoundingClientRect(),t=e.width,i&&i.width&&(t+=i.width),Math.round(t)}textHeight(){let e,t,n=this.document.createRange(),r=this.content||this.document.body;return n.selectNodeContents(r),e=n.getBoundingClientRect(),t=e.bottom,Math.round(t)}scrollWidth(){return this.documentElement.scrollWidth}scrollHeight(){return this.documentElement.scrollHeight}overflow(e){return e&&(this.documentElement.style.overflow=e),this.window.getComputedStyle(this.documentElement).overflow}overflowX(e){return e&&(this.documentElement.style.overflowX=e),this.window.getComputedStyle(this.documentElement).overflowX}overflowY(e){return e&&(this.documentElement.style.overflowY=e),this.window.getComputedStyle(this.documentElement).overflowY}css(e,t,n){var r=this.content||this.document.body;return t?r.style.setProperty(e,t,n?"important":""):r.style.removeProperty(e),this.window.getComputedStyle(r)[e]}viewport(e){var t,n=this.document.querySelector("meta[name='viewport']"),r={width:void 0,height:void 0,scale:void 0,minimum:void 0,maximum:void 0,scalable:void 0},i=[];if(n&&n.hasAttribute("content")){let e=n.getAttribute("content"),t=e.match(/width\s*=\s*([^,]*)/),i=e.match(/height\s*=\s*([^,]*)/),o=e.match(/initial-scale\s*=\s*([^,]*)/),s=e.match(/minimum-scale\s*=\s*([^,]*)/),a=e.match(/maximum-scale\s*=\s*([^,]*)/),l=e.match(/user-scalable\s*=\s*([^,]*)/);t&&t.length&&void 0!==t[1]&&(r.width=t[1]),i&&i.length&&void 0!==i[1]&&(r.height=i[1]),o&&o.length&&void 0!==o[1]&&(r.scale=o[1]),s&&s.length&&void 0!==s[1]&&(r.minimum=s[1]),a&&a.length&&void 0!==a[1]&&(r.maximum=a[1]),l&&l.length&&void 0!==l[1]&&(r.scalable=l[1])}return t=Object(o.defaults)(e||{},r),e&&(t.width&&i.push("width="+t.width),t.height&&i.push("height="+t.height),t.scale&&i.push("initial-scale="+t.scale),"no"===t.scalable?(i.push("minimum-scale="+t.scale),i.push("maximum-scale="+t.scale),i.push("user-scalable="+t.scalable)):(t.scalable&&i.push("user-scalable="+t.scalable),t.minimum&&i.push("minimum-scale="+t.minimum),t.maximum&&i.push("minimum-scale="+t.maximum)),n||((n=this.document.createElement("meta")).setAttribute("name","viewport"),this.document.querySelector("head").appendChild(n)),n.setAttribute("content",i.join(", ")),this.window.scrollTo(0,0)),t}expand(){this.emit(u.c.CONTENTS.EXPAND)}listeners(){this.imageLoadListeners(),this.mediaQueryListeners(),this.addEventListeners(),this.addSelectionListeners(),"undefined"==typeof ResizeObserver?(this.resizeListeners(),this.visibilityListeners()):this.resizeObservers(),this.linksHandler()}removeListeners(){this.removeEventListeners(),this.removeSelectionListeners(),this.observer&&this.observer.disconnect(),clearTimeout(this.expanding)}resizeCheck(){let e=this.textWidth(),t=this.textHeight();e==this._size.width&&t==this._size.height||(this._size={width:e,height:t},this.onResize&&this.onResize(this._size),this.emit(u.c.CONTENTS.RESIZE,this._size))}resizeListeners(){clearTimeout(this.expanding),requestAnimationFrame(this.resizeCheck.bind(this)),this.expanding=setTimeout(this.resizeListeners.bind(this),350)}visibilityListeners(){document.addEventListener("visibilitychange",()=>{"visible"===document.visibilityState&&!1===this.active?(this.active=!0,this.resizeListeners()):(this.active=!1,clearTimeout(this.expanding))})}transitionListeners(){let e=this.content;e.style.transitionProperty="font, font-size, font-size-adjust, font-stretch, font-variation-settings, font-weight, width, height",e.style.transitionDuration="0.001ms",e.style.transitionTimingFunction="linear",e.style.transitionDelay="0",this._resizeCheck=this.resizeCheck.bind(this),this.document.addEventListener("transitionend",this._resizeCheck)}mediaQueryListeners(){for(var e=this.document.styleSheets,t=function(e){e.matches&&!this._expanding&&setTimeout(this.expand.bind(this),1)}.bind(this),n=0;n<e.length;n+=1){var r;try{r=e[n].cssRules}catch(e){return}if(!r)return;for(var i=0;i<r.length;i+=1){if(r[i].media)this.window.matchMedia(r[i].media.mediaText).addListener(t)}}}resizeObservers(){this.observer=new ResizeObserver(e=>{requestAnimationFrame(this.resizeCheck.bind(this))}),this.observer.observe(this.document.documentElement)}mutationObservers(){this.observer=new MutationObserver(e=>{this.resizeCheck()});this.observer.observe(this.document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})}imageLoadListeners(){for(var e,t=this.document.querySelectorAll("img"),n=0;n<t.length;n++)void 0!==(e=t[n]).naturalWidth&&0===e.naturalWidth&&(e.onload=this.expand.bind(this))}fontLoadListeners(){this.document&&this.document.fonts&&this.document.fonts.ready.then(function(){this.resizeCheck()}.bind(this))}root(){return this.document?this.document.documentElement:null}locationOf(e,t){var n,r={left:0,top:0};if(!this.document)return r;if(this.epubcfi.isCfiString(e)){let i=new s.a(e).toRange(this.document,t);if(i){try{if(!i.endContainer||i.startContainer==i.endContainer&&i.startOffset==i.endOffset){let e=i.startContainer.textContent.indexOf(" ",i.startOffset);-1==e&&(e=i.startContainer.textContent.length),i.setEnd(i.startContainer,e)}}catch(e){console.error("setting end offset to start container length failed",e)}if(i.startContainer.nodeType===Node.ELEMENT_NODE)n=i.startContainer.getBoundingClientRect(),r.left=n.left,r.top=n.top;else if(d){let e=i.startContainer,t=new Range;try{1===e.nodeType?n=e.getBoundingClientRect():i.startOffset+2<e.length?(t.setStart(e,i.startOffset),t.setEnd(e,i.startOffset+2),n=t.getBoundingClientRect()):i.startOffset-2>0?(t.setStart(e,i.startOffset-2),t.setEnd(e,i.startOffset),n=t.getBoundingClientRect()):n=e.parentNode.getBoundingClientRect()}catch(e){console.error(e,e.stack)}}else n=i.getBoundingClientRect()}}else if("string"==typeof e&&e.indexOf("#")>-1){let t=e.substring(e.indexOf("#")+1),r=this.document.getElementById(t);if(r)if(d){let e=new Range;e.selectNode(r),n=e.getBoundingClientRect()}else n=r.getBoundingClientRect()}return n&&(r.left=n.left,r.top=n.top),r}addStylesheet(e){return new Promise(function(t,n){var r,i=!1;this.document?(r=this.document.querySelector("link[href='"+e+"']"))?t(!0):((r=this.document.createElement("link")).type="text/css",r.rel="stylesheet",r.href=e,r.onload=r.onreadystatechange=function(){i||this.readyState&&"complete"!=this.readyState||(i=!0,setTimeout(()=>{t(!0)},1))},this.document.head.appendChild(r)):t(!1)}.bind(this))}_getStylesheetNode(e){var t;return e="epubjs-inserted-css-"+(e||""),!!this.document&&((t=this.document.getElementById(e))||((t=this.document.createElement("style")).id=e,this.document.head.appendChild(t)),t)}addStylesheetCss(e,t){return!(!this.document||!e)&&(this._getStylesheetNode(t).innerHTML=e,!0)}addStylesheetRules(e,t){var n;if(this.document&&e&&0!==e.length)if(n=this._getStylesheetNode(t).sheet,"[object Array]"===Object.prototype.toString.call(e))for(var r=0,i=e.length;r<i;r++){var o=1,s=e[r],a=e[r][0],l="";"[object Array]"===Object.prototype.toString.call(s[1][0])&&(s=s[1],o=0);for(var u=s.length;o<u;o++){var c=s[o];l+=c[0]+":"+c[1]+(c[2]?" !important":"")+";\n"}n.insertRule(a+"{"+l+"}",n.cssRules.length)}else{Object.keys(e).forEach(t=>{const r=e[t];if(Array.isArray(r))r.forEach(e=>{const r=Object.keys(e).map(t=>`${t}:${e[t]}`).join(";");n.insertRule(`${t}{${r}}`,n.cssRules.length)});else{const e=Object.keys(r).map(e=>`${e}:${r[e]}`).join(";");n.insertRule(`${t}{${e}}`,n.cssRules.length)}})}}addScript(e){return new Promise(function(t,n){var r,i=!1;this.document?((r=this.document.createElement("script")).type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){i||this.readyState&&"complete"!=this.readyState||(i=!0,setTimeout((function(){t(!0)}),1))},this.document.head.appendChild(r)):t(!1)}.bind(this))}addClass(e){var t;this.document&&(t=this.content||this.document.body)&&t.classList.add(e)}removeClass(e){var t;this.document&&(t=this.content||this.document.body)&&t.classList.remove(e)}addEventListeners(){this.document&&(this._triggerEvent=this.triggerEvent.bind(this),u.a.forEach((function(e){this.document.addEventListener(e,this._triggerEvent,{passive:!0})}),this))}removeEventListeners(){this.document&&(u.a.forEach((function(e){this.document.removeEventListener(e,this._triggerEvent,{passive:!0})}),this),this._triggerEvent=void 0)}triggerEvent(e){this.emit(e.type,e)}addSelectionListeners(){this.document&&(this._onSelectionChange=this.onSelectionChange.bind(this),this.document.addEventListener("selectionchange",this._onSelectionChange,{passive:!0}))}removeSelectionListeners(){this.document&&(this.document.removeEventListener("selectionchange",this._onSelectionChange,{passive:!0}),this._onSelectionChange=void 0)}onSelectionChange(e){this.selectionEndTimeout&&clearTimeout(this.selectionEndTimeout),this.selectionEndTimeout=setTimeout(function(){var e=this.window.getSelection();this.triggerSelectedEvent(e)}.bind(this),250)}triggerSelectedEvent(e){var t,n;e&&e.rangeCount>0&&((t=e.getRangeAt(0)).collapsed||(n=new s.a(t,this.cfiBase).toString(),this.emit(u.c.CONTENTS.SELECTED,n),this.emit(u.c.CONTENTS.SELECTED_RANGE,t)))}range(e,t){return new s.a(e).toRange(this.document,t)}cfiFromRange(e,t){return new s.a(e,this.cfiBase,t).toString()}cfiFromNode(e,t){return new s.a(e,this.cfiBase,t).toString()}map(e){return new a.a(e).section()}size(e,t){var n={scale:1,scalable:"no"};this.layoutStyle("scrolling"),e>=0&&(this.width(e),n.width=e,this.css("padding","0 "+e/12+"px")),t>=0&&(this.height(t),n.height=t),this.css("margin","0"),this.css("box-sizing","border-box"),this.viewport(n)}columns(e,t,n,r,i){let s=Object(o.prefixed)("column-axis"),a=Object(o.prefixed)("column-gap"),l=Object(o.prefixed)("column-width"),u=Object(o.prefixed)("column-fill"),c=0===this.writingMode().indexOf("vertical")?"vertical":"horizontal";this.layoutStyle("paginated"),"rtl"===i&&"horizontal"===c&&this.direction(i),this.width(e),this.height(t),this.viewport({width:e,height:t,scale:1,scalable:"no"}),this.css("overflow-y","hidden"),this.css("margin","0",!0),"vertical"===c?(this.css("padding-top",r/2+"px",!0),this.css("padding-bottom",r/2+"px",!0),this.css("padding-left","20px"),this.css("padding-right","20px"),this.css(s,"vertical")):(this.css("padding-top","20px"),this.css("padding-bottom","20px"),this.css("padding-left",r/2+"px",!0),this.css("padding-right",r/2+"px",!0),this.css(s,"horizontal")),this.css("box-sizing","border-box"),this.css("max-width","inherit"),this.css(u,"auto"),this.css(a,r+"px"),this.css(l,n+"px"),this.css("-webkit-line-box-contain","block glyphs replaced")}scaler(e,t,n){var r="scale("+e+")",i="";this.css("transform-origin","top left"),(t>=0||n>=0)&&(i=" translate("+(t||0)+"px, "+(n||0)+"px )"),this.css("transform",r+i)}fit(e,t,n){var r=this.viewport(),i=parseInt(r.width),o=parseInt(r.height),s=e/i,a=t/o,l=s<a?s:a;if(this.layoutStyle("paginated"),this.width(i),this.height(o),this.overflow("hidden"),this.scaler(l,0,0),this.css("background-size",i*l+"px "+o*l+"px"),this.css("background-color","transparent"),n&&n.properties.includes("page-spread-left")){var u=e-i*l;this.css("margin-left",u+"px")}}direction(e){this.documentElement&&(this.documentElement.style.direction=e)}mapPage(e,t,n,r,i){return new a.a(t,i).page(this,e,n,r)}linksHandler(){Object(l.c)(this.content,e=>{this.emit(u.c.CONTENTS.LINK_CLICKED,e)})}writingMode(e){let t=Object(o.prefixed)("writing-mode");return e&&this.documentElement&&(this.documentElement.style[t]=e),this.window.getComputedStyle(this.documentElement)[t]||""}layoutStyle(e){return e&&(this._layoutStyle=e,navigator.epubReadingSystem.layoutStyle=this._layoutStyle),this._layoutStyle||"paginated"}epubReadingSystem(e,t){return navigator.epubReadingSystem={name:e,version:t,layoutStyle:this.layoutStyle(),hasFeature:function(e){switch(e){case"dom-manipulation":case"layout-changes":case"touch-events":case"mouse-events":case"keyboard-events":return!0;case"spine-scripting":default:return!1}}},navigator.epubReadingSystem}destroy(){this.removeListeners()}}i()(f.prototype),t.a=f},function(e,t,n){"use strict";var r=n(3),i=n.n(r),o=n(0),s=n(6),a=n(2),l=n(15),u=n(22),c=n(5);var h=class{constructor(e){this.rendition=e,this._themes={default:{rules:{},url:"",serialized:""}},this._overrides={},this._current="default",this._injected=[],this.rendition.hooks.content.register(this.inject.bind(this)),this.rendition.hooks.content.register(this.overrides.bind(this))}register(){if(0!==arguments.length)return 1===arguments.length&&"object"==typeof arguments[0]?this.registerThemes(arguments[0]):1===arguments.length&&"string"==typeof arguments[0]?this.default(arguments[0]):2===arguments.length&&"string"==typeof arguments[1]?this.registerUrl(arguments[0],arguments[1]):2===arguments.length&&"object"==typeof arguments[1]?this.registerRules(arguments[0],arguments[1]):void 0}default(e){if(e)return"string"==typeof e?this.registerUrl("default",e):"object"==typeof e?this.registerRules("default",e):void 0}registerThemes(e){for(var t in e)e.hasOwnProperty(t)&&("string"==typeof e[t]?this.registerUrl(t,e[t]):this.registerRules(t,e[t]))}registerCss(e,t){this._themes[e]={serialized:t},(this._injected[e]||"default"==e)&&this.update(e)}registerUrl(e,t){var n=new c.a(t);this._themes[e]={url:n.toString()},(this._injected[e]||"default"==e)&&this.update(e)}registerRules(e,t){this._themes[e]={rules:t},(this._injected[e]||"default"==e)&&this.update(e)}select(e){var t=this._current;this._current=e,this.update(e),this.rendition.getContents().forEach(n=>{n.removeClass(t),n.addClass(e)})}update(e){this.rendition.getContents().forEach(t=>{this.add(e,t)})}inject(e){var t,n=[],r=this._themes;for(var i in r)!r.hasOwnProperty(i)||i!==this._current&&"default"!==i||(((t=r[i]).rules&&Object.keys(t.rules).length>0||t.url&&-1===n.indexOf(t.url))&&this.add(i,e),this._injected.push(i));"default"!=this._current&&e.addClass(this._current)}add(e,t){var n=this._themes[e];n&&t&&(n.url?t.addStylesheet(n.url):n.serialized?(t.addStylesheetCss(n.serialized,e),n.injected=!0):n.rules&&(t.addStylesheetRules(n.rules,e),n.injected=!0))}override(e,t,n){var r=this.rendition.getContents();this._overrides[e]={value:t,priority:!0===n},r.forEach(t=>{t.css(e,this._overrides[e].value,this._overrides[e].priority)})}removeOverride(e){var t=this.rendition.getContents();delete this._overrides[e],t.forEach(t=>{t.css(e)})}overrides(e){var t=this._overrides;for(var n in t)t.hasOwnProperty(n)&&e.css(n,t[n].value,t[n].priority)}fontSize(e){this.override("font-size",e)}font(e){this.override("font-family",e,!0)}destroy(){this.rendition=void 0,this._themes=void 0,this._overrides=void 0,this._current=void 0,this._injected=void 0}},d=(n(13),n(1));class f{constructor({type:e,cfiRange:t,data:n,sectionIndex:r,cb:i,className:o,styles:s}){this.type=e,this.cfiRange=t,this.data=n,this.sectionIndex=r,this.mark=void 0,this.cb=i,this.className=o,this.styles=s}update(e){this.data=e}attach(e){let t,{cfiRange:n,data:r,type:i,mark:o,cb:s,className:a,styles:l}=this;return"highlight"===i?t=e.highlight(n,r,s,a,l):"underline"===i?t=e.underline(n,r,s,a,l):"mark"===i&&(t=e.mark(n,r,s)),this.mark=t,this.emit(d.c.ANNOTATION.ATTACH,t),t}detach(e){let t,{cfiRange:n,type:r}=this;return e&&("highlight"===r?t=e.unhighlight(n):"underline"===r?t=e.ununderline(n):"mark"===r&&(t=e.unmark(n))),this.mark=void 0,this.emit(d.c.ANNOTATION.DETACH,t),t}text(){}}i()(f.prototype);var p=class{constructor(e){this.rendition=e,this.highlights=[],this.underlines=[],this.marks=[],this._annotations={},this._annotationsBySectionIndex={},this.rendition.hooks.render.register(this.inject.bind(this)),this.rendition.hooks.unloaded.register(this.clear.bind(this))}add(e,t,n,r,i,o){let s=encodeURI(t+e),l=new a.a(t).spinePos,u=new f({type:e,cfiRange:t,data:n,sectionIndex:l,cb:r,className:i,styles:o});return this._annotations[s]=u,l in this._annotationsBySectionIndex?this._annotationsBySectionIndex[l].push(s):this._annotationsBySectionIndex[l]=[s],this.rendition.views().forEach(e=>{u.sectionIndex===e.index&&u.attach(e)}),u}remove(e,t){let n=encodeURI(e+t);if(n in this._annotations){let e=this._annotations[n];if(t&&e.type!==t)return;this.rendition.views().forEach(t=>{this._removeFromAnnotationBySectionIndex(e.sectionIndex,n),e.sectionIndex===t.index&&e.detach(t)}),delete this._annotations[n]}}_removeFromAnnotationBySectionIndex(e,t){this._annotationsBySectionIndex[e]=this._annotationsAt(e).filter(e=>e!==t)}_annotationsAt(e){return this._annotationsBySectionIndex[e]}highlight(e,t,n,r,i){return this.add("highlight",e,t,n,r,i)}underline(e,t,n,r,i){return this.add("underline",e,t,n,r,i)}mark(e,t,n){return this.add("mark",e,t,n)}each(){return this._annotations.forEach.apply(this._annotations,arguments)}inject(e){let t=e.index;if(t in this._annotationsBySectionIndex){this._annotationsBySectionIndex[t].forEach(t=>{this._annotations[t].attach(e)})}}clear(e){let t=e.index;if(t in this._annotationsBySectionIndex){this._annotationsBySectionIndex[t].forEach(t=>{this._annotations[t].detach(e)})}}show(){}hide(){}},m=n(26),g=n(16),v=n(28);class y{constructor(e,t){this.settings=Object(o.extend)(this.settings||{},{width:null,height:null,ignoreClass:"",manager:"default",view:"iframe",flow:null,layout:null,spread:null,minSpreadWidth:800,stylesheet:null,resizeOnOrientationChange:!0,script:null,snap:!1,defaultDirection:"ltr"}),Object(o.extend)(this.settings,t),"object"==typeof this.settings.manager&&(this.manager=this.settings.manager),this.book=e,this.hooks={},this.hooks.display=new s.a(this),this.hooks.serialize=new s.a(this),this.hooks.content=new s.a(this),this.hooks.unloaded=new s.a(this),this.hooks.layout=new s.a(this),this.hooks.render=new s.a(this),this.hooks.show=new s.a(this),this.hooks.content.register(this.handleLinks.bind(this)),this.hooks.content.register(this.passEvents.bind(this)),this.hooks.content.register(this.adjustImages.bind(this)),this.book.spine.hooks.content.register(this.injectIdentifier.bind(this)),this.settings.stylesheet&&this.book.spine.hooks.content.register(this.injectStylesheet.bind(this)),this.settings.script&&this.book.spine.hooks.content.register(this.injectScript.bind(this)),this.themes=new h(this),this.annotations=new p(this),this.epubcfi=new a.a,this.q=new l.a(this),this.location=void 0,this.q.enqueue(this.book.opened),this.starting=new o.defer,this.started=this.starting.promise,this.q.enqueue(this.start)}setManager(e){this.manager=e}requireManager(e){return"string"==typeof e&&"default"===e?g.a:"string"==typeof e&&"continuous"===e?v.a:e}requireView(e){return"string"==typeof e&&"iframe"===e?m.a:e}start(){switch(this.settings.layout||"pre-paginated"!==this.book.package.metadata.layout&&"true"!==this.book.displayOptions.fixedLayout||(this.settings.layout="pre-paginated"),this.book.package.metadata.spread){case"none":this.settings.spread="none";break;case"both":this.settings.spread=!0}this.manager||(this.ViewManager=this.requireManager(this.settings.manager),this.View=this.requireView(this.settings.view),this.manager=new this.ViewManager({view:this.View,queue:this.q,request:this.book.load.bind(this.book),settings:this.settings})),this.direction(this.book.package.metadata.direction||this.settings.defaultDirection),this.settings.globalLayoutProperties=this.determineLayoutProperties(this.book.package.metadata),this.flow(this.settings.globalLayoutProperties.flow),this.layout(this.settings.globalLayoutProperties),this.manager.on(d.c.MANAGERS.ADDED,this.afterDisplayed.bind(this)),this.manager.on(d.c.MANAGERS.REMOVED,this.afterRemoved.bind(this)),this.manager.on(d.c.MANAGERS.RESIZED,this.onResized.bind(this)),this.manager.on(d.c.MANAGERS.ORIENTATION_CHANGE,this.onOrientationChange.bind(this)),this.manager.on(d.c.MANAGERS.SCROLLED,this.reportLocation.bind(this)),this.emit(d.c.RENDITION.STARTED),this.starting.resolve()}attachTo(e){return this.q.enqueue(function(){this.manager.render(e,{width:this.settings.width,height:this.settings.height}),this.emit(d.c.RENDITION.ATTACHED)}.bind(this))}display(e){return this.displaying&&this.displaying.resolve(),this.q.enqueue(this._display,e)}_display(e){if(this.book){this.epubcfi.isCfiString(e);var t,n=new o.defer,r=n.promise;return this.displaying=n,this.book.locations.length()&&Object(o.isFloat)(e)&&(e=this.book.locations.cfiFromPercentage(parseFloat(e))),(t=this.book.spine.get(e))?(this.manager.display(t,e).then(()=>{n.resolve(t),this.displaying=void 0,this.emit(d.c.RENDITION.DISPLAYED,t),this.reportLocation()},e=>{this.emit(d.c.RENDITION.DISPLAY_ERROR,e)}),r):(n.reject(new Error("No Section Found")),r)}}afterDisplayed(e){e.on(d.c.VIEWS.MARK_CLICKED,(t,n)=>this.triggerMarkEvent(t,n,e.contents)),this.hooks.render.trigger(e,this).then(()=>{e.contents?this.hooks.content.trigger(e.contents,this).then(()=>{this.emit(d.c.RENDITION.RENDERED,e.section,e)}):this.emit(d.c.RENDITION.RENDERED,e.section,e)})}afterRemoved(e){this.hooks.unloaded.trigger(e,this).then(()=>{this.emit(d.c.RENDITION.REMOVED,e.section,e)})}onResized(e,t){this.emit(d.c.RENDITION.RESIZED,{width:e.width,height:e.height},t),this.location&&this.location.start&&this.display(t||this.location.start.cfi)}onOrientationChange(e){this.emit(d.c.RENDITION.ORIENTATION_CHANGE,e)}moveTo(e){this.manager.moveTo(e)}resize(e,t,n){e&&(this.settings.width=e),t&&(this.settings.height=t),this.manager.resize(e,t,n)}clear(){this.manager.clear()}next(){return this.q.enqueue(this.manager.next.bind(this.manager)).then(this.reportLocation.bind(this))}prev(){return this.q.enqueue(this.manager.prev.bind(this.manager)).then(this.reportLocation.bind(this))}determineLayoutProperties(e){var t=this.settings.layout||e.layout||"reflowable",n=this.settings.spread||e.spread||"auto",r=this.settings.orientation||e.orientation||"auto",i=this.settings.flow||e.flow||"auto",o=e.viewport||"",s=this.settings.minSpreadWidth||e.minSpreadWidth||800,a=this.settings.direction||e.direction||"ltr";return(0===this.settings.width||this.settings.width>0)&&(0===this.settings.height||this.settings.height),{layout:t,spread:n,orientation:r,flow:i,viewport:o,minSpreadWidth:s,direction:a}}flow(e){var t=e;"scrolled"!==e&&"scrolled-doc"!==e&&"scrolled-continuous"!==e||(t="scrolled"),"auto"!==e&&"paginated"!==e||(t="paginated"),this.settings.flow=e,this._layout&&this._layout.flow(t),this.manager&&this._layout&&this.manager.applyLayout(this._layout),this.manager&&this.manager.updateFlow(t),this.manager&&this.manager.isRendered()&&this.location&&(this.manager.clear(),this.display(this.location.start.cfi))}layout(e){return e&&(this._layout=new u.a(e),this._layout.spread(e.spread,this.settings.minSpreadWidth),this._layout.on(d.c.LAYOUT.UPDATED,(e,t)=>{this.emit(d.c.RENDITION.LAYOUT,e,t)})),this.manager&&this._layout&&this.manager.applyLayout(this._layout),this._layout}spread(e,t){this.settings.spread=e,t&&(this.settings.minSpreadWidth=t),this._layout&&this._layout.spread(e,t),this.manager&&this.manager.isRendered()&&this.manager.updateLayout()}direction(e){this.settings.direction=e||"ltr",this.manager&&this.manager.direction(this.settings.direction),this.manager&&this.manager.isRendered()&&this.location&&(this.manager.clear(),this.display(this.location.start.cfi))}reportLocation(){return this.q.enqueue(function(){requestAnimationFrame(function(){var e=this.manager.currentLocation();if(e&&e.then&&"function"==typeof e.then)e.then(function(e){let t=this.located(e);t&&t.start&&t.end&&(this.location=t,this.emit(d.c.RENDITION.LOCATION_CHANGED,{index:this.location.start.index,href:this.location.start.href,start:this.location.start.cfi,end:this.location.end.cfi,percentage:this.location.start.percentage}),this.emit(d.c.RENDITION.RELOCATED,this.location))}.bind(this));else if(e){let t=this.located(e);if(!t||!t.start||!t.end)return;this.location=t,this.emit(d.c.RENDITION.LOCATION_CHANGED,{index:this.location.start.index,href:this.location.start.href,start:this.location.start.cfi,end:this.location.end.cfi,percentage:this.location.start.percentage}),this.emit(d.c.RENDITION.RELOCATED,this.location)}}.bind(this))}.bind(this))}currentLocation(){var e=this.manager.currentLocation();if(e&&e.then&&"function"==typeof e.then)e.then(function(e){return this.located(e)}.bind(this));else if(e){return this.located(e)}}located(e){if(!e.length)return{};let t=e[0],n=e[e.length-1],r={start:{index:t.index,href:t.href,cfi:t.mapping.start,displayed:{page:t.pages[0]||1,total:t.totalPages}},end:{index:n.index,href:n.href,cfi:n.mapping.end,displayed:{page:n.pages[n.pages.length-1]||1,total:n.totalPages}}},i=this.book.locations.locationFromCfi(t.mapping.start),o=this.book.locations.locationFromCfi(n.mapping.end);null!=i&&(r.start.location=i,r.start.percentage=this.book.locations.percentageFromLocation(i)),null!=o&&(r.end.location=o,r.end.percentage=this.book.locations.percentageFromLocation(o));let s=this.book.pageList.pageFromCfi(t.mapping.start),a=this.book.pageList.pageFromCfi(n.mapping.end);return-1!=s&&(r.start.page=s),-1!=a&&(r.end.page=a),n.index===this.book.spine.last().index&&r.end.displayed.page>=r.end.displayed.total&&(r.atEnd=!0),t.index===this.book.spine.first().index&&1===r.start.displayed.page&&(r.atStart=!0),r}destroy(){this.manager&&this.manager.destroy(),this.book=void 0}passEvents(e){d.a.forEach(t=>{e.on(t,t=>this.triggerViewEvent(t,e))}),e.on(d.c.CONTENTS.SELECTED,t=>this.triggerSelectedEvent(t,e))}triggerViewEvent(e,t){this.emit(e.type,e,t)}triggerSelectedEvent(e,t){this.emit(d.c.RENDITION.SELECTED,e,t)}triggerMarkEvent(e,t,n){this.emit(d.c.RENDITION.MARK_CLICKED,e,t,n)}getRange(e,t){var n=new a.a(e),r=this.manager.visible().filter((function(e){if(n.spinePos===e.index)return!0}));if(r.length)return r[0].contents.range(n,t)}adjustImages(e){if("pre-paginated"===this._layout.name)return new Promise((function(e){e()}));let t=e.window.getComputedStyle(e.content,null),n=.95*(e.content.offsetHeight-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom))),r=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight);return e.addStylesheetRules({img:{"max-width":(this._layout.columnWidth?this._layout.columnWidth-r+"px":"100%")+"!important","max-height":n+"px!important","object-fit":"contain","page-break-inside":"avoid","break-inside":"avoid","box-sizing":"border-box"},svg:{"max-width":(this._layout.columnWidth?this._layout.columnWidth-r+"px":"100%")+"!important","max-height":n+"px!important","page-break-inside":"avoid","break-inside":"avoid"}}),new Promise((function(e,t){setTimeout((function(){e()}),1)}))}getContents(){return this.manager?this.manager.getContents():[]}views(){return(this.manager?this.manager.views:void 0)||[]}handleLinks(e){e&&e.on(d.c.CONTENTS.LINK_CLICKED,e=>{let t=this.book.path.relative(e);this.display(t)})}injectStylesheet(e,t){let n=e.createElement("link");n.setAttribute("type","text/css"),n.setAttribute("rel","stylesheet"),n.setAttribute("href",this.settings.stylesheet),e.getElementsByTagName("head")[0].appendChild(n)}injectScript(e,t){let n=e.createElement("script");n.setAttribute("type","text/javascript"),n.setAttribute("src",this.settings.script),n.textContent=" ",e.getElementsByTagName("head")[0].appendChild(n)}injectIdentifier(e,t){let n=this.book.packaging.metadata.identifier,r=e.createElement("meta");r.setAttribute("name","dc.relation.ispartof"),n&&r.setAttribute("content",n),e.getElementsByTagName("head")[0].appendChild(r)}}i()(y.prototype);t.a=y},function(e,t,n){"use strict";var r=n(0);t.a=class{constructor(e){this._q=[],this.context=e,this.tick=r.requestAnimationFrame,this.running=!1,this.paused=!1}enqueue(){var e,t,n=[].shift.call(arguments),i=arguments;if(!n)throw new Error("No Task Provided");return t="function"==typeof n?{task:n,args:i,deferred:e=new r.defer,promise:e.promise}:{promise:n},this._q.push(t),0!=this.paused||this.running||this.run(),t.promise}dequeue(){var e,t,n;return!this._q.length||this.paused?((e=new r.defer).deferred.resolve(),e.promise):(t=(e=this._q.shift()).task)?(n=t.apply(this.context,e.args))&&"function"==typeof n.then?n.then(function(){e.deferred.resolve.apply(this.context,arguments)}.bind(this),function(){e.deferred.reject.apply(this.context,arguments)}.bind(this)):(e.deferred.resolve.apply(this.context,n),e.promise):e.promise?e.promise:void 0}dump(){for(;this._q.length;)this.dequeue()}run(){return this.running||(this.running=!0,this.defered=new r.defer),this.tick.call(window,()=>{this._q.length?this.dequeue().then(function(){this.run()}.bind(this)):(this.defered.resolve(),this.running=void 0)}),1==this.paused&&(this.paused=!1),this.defered.promise}flush(){return this.running?this.running:this._q.length?(this.running=this.dequeue().then(function(){return this.running=void 0,this.flush()}.bind(this)),this.running):void 0}clear(){this._q=[]}length(){return this._q.length}pause(){this.paused=!0}stop(){this._q=[],this.running=!1,this.paused=!0}}},function(e,t,n){"use strict";var r=n(3),i=n.n(r),o=n(0);function s(){var e="reverse",t=function(){var e=document.createElement("div");e.dir="rtl",e.style.position="fixed",e.style.width="1px",e.style.height="1px",e.style.top="0px",e.style.left="0px",e.style.overflow="hidden";var t=document.createElement("div");t.style.width="2px";var n=document.createElement("span");n.style.width="1px",n.style.display="inline-block";var r=document.createElement("span");return r.style.width="1px",r.style.display="inline-block",t.appendChild(n),t.appendChild(r),e.appendChild(t),e}();return document.body.appendChild(t),t.scrollLeft>0?e="default":"undefined"!=typeof Element&&Element.prototype.scrollIntoView?(t.children[0].children[1].scrollIntoView(),t.scrollLeft<0&&(e="negative")):(t.scrollLeft=1,0===t.scrollLeft&&(e="negative")),document.body.removeChild(t),e}var a=n(17),l=n(15),u=n(37),c=n.n(u);var h=class{constructor(e){this.settings=e||{},this.id="epubjs-container-"+Object(o.uuid)(),this.container=this.create(this.settings),this.settings.hidden&&(this.wrapper=this.wrap(this.container))}create(e){let t=e.height,n=e.width,r=e.overflow||!1,i=e.axis||"vertical",s=e.direction;Object(o.extend)(this.settings,e),e.height&&Object(o.isNumber)(e.height)&&(t=e.height+"px"),e.width&&Object(o.isNumber)(e.width)&&(n=e.width+"px");let a=document.createElement("div");return a.id=this.id,a.classList.add("epub-container"),a.style.wordSpacing="0",a.style.lineHeight="0",a.style.verticalAlign="top",a.style.position="relative","horizontal"===i&&(a.style.display="flex",a.style.flexDirection="row",a.style.flexWrap="nowrap"),n&&(a.style.width=n),t&&(a.style.height=t),r&&("scroll"===r&&"vertical"===i?(a.style["overflow-y"]=r,a.style["overflow-x"]="hidden"):"scroll"===r&&"horizontal"===i?(a.style["overflow-y"]="hidden",a.style["overflow-x"]=r):a.style.overflow=r),s&&(a.dir=s,a.style.direction=s),s&&this.settings.fullsize&&(document.body.style.direction=s),a}wrap(e){var t=document.createElement("div");return t.style.visibility="hidden",t.style.overflow="hidden",t.style.width="0",t.style.height="0",t.appendChild(e),t}getElement(e){var t;if(Object(o.isElement)(e)?t=e:"string"==typeof e&&(t=document.getElementById(e)),!t)throw new Error("Not an Element");return t}attachTo(e){var t,n=this.getElement(e);if(n)return t=this.settings.hidden?this.wrapper:this.container,n.appendChild(t),this.element=n,n}getContainer(){return this.container}onResize(e){Object(o.isNumber)(this.settings.width)&&Object(o.isNumber)(this.settings.height)||(this.resizeFunc=c()(e,50),window.addEventListener("resize",this.resizeFunc,!1))}onOrientationChange(e){this.orientationChangeFunc=e,window.addEventListener("orientationchange",this.orientationChangeFunc,!1)}size(e,t){var n;let r=e||this.settings.width,i=t||this.settings.height;null===e?(n=this.element.getBoundingClientRect()).width&&(e=Math.floor(n.width),this.container.style.width=e+"px"):Object(o.isNumber)(e)?this.container.style.width=e+"px":this.container.style.width=e,null===t?(n=n||this.element.getBoundingClientRect()).height&&(t=n.height,this.container.style.height=t+"px"):Object(o.isNumber)(t)?this.container.style.height=t+"px":this.container.style.height=t,Object(o.isNumber)(e)||(e=this.container.clientWidth),Object(o.isNumber)(t)||(t=this.container.clientHeight),this.containerStyles=window.getComputedStyle(this.container),this.containerPadding={left:parseFloat(this.containerStyles["padding-left"])||0,right:parseFloat(this.containerStyles["padding-right"])||0,top:parseFloat(this.containerStyles["padding-top"])||0,bottom:parseFloat(this.containerStyles["padding-bottom"])||0};let s=Object(o.windowBounds)(),a=window.getComputedStyle(document.body),l=parseFloat(a["padding-left"])||0,u=parseFloat(a["padding-right"])||0,c=parseFloat(a["padding-top"])||0,h=parseFloat(a["padding-bottom"])||0;return r||(e=s.width-l-u),(this.settings.fullsize&&!i||!i)&&(t=s.height-c-h),{width:e-this.containerPadding.left-this.containerPadding.right,height:t-this.containerPadding.top-this.containerPadding.bottom}}bounds(){let e;return"visible"!==this.container.style.overflow&&(e=this.container&&this.container.getBoundingClientRect()),e&&e.width&&e.height?e:Object(o.windowBounds)()}getSheet(){var e=document.createElement("style");return e.appendChild(document.createTextNode("")),document.head.appendChild(e),e.sheet}addStyleRules(e,t){var n="#"+this.id+" ",r="";this.sheet||(this.sheet=this.getSheet()),t.forEach((function(e){for(var t in e)e.hasOwnProperty(t)&&(r+=t+":"+e[t]+";")})),this.sheet.insertRule(n+e+" {"+r+"}",0)}axis(e){"horizontal"===e?(this.container.style.display="flex",this.container.style.flexDirection="row",this.container.style.flexWrap="nowrap"):this.container.style.display="block",this.settings.axis=e}direction(e){this.container&&(this.container.dir=e,this.container.style.direction=e),this.settings.fullsize&&(document.body.style.direction=e),this.settings.dir=e}overflow(e){this.container&&("scroll"===e&&"vertical"===this.settings.axis?(this.container.style["overflow-y"]=e,this.container.style["overflow-x"]="hidden"):"scroll"===e&&"horizontal"===this.settings.axis?(this.container.style["overflow-y"]="hidden",this.container.style["overflow-x"]=e):this.container.style.overflow=e),this.settings.overflow=e}destroy(){this.element&&(this.settings.hidden?this.wrapper:this.container,this.element.contains(this.container)&&this.element.removeChild(this.container),window.removeEventListener("resize",this.resizeFunc),window.removeEventListener("orientationChange",this.orientationChangeFunc))}};var d=class{constructor(e){this.container=e,this._views=[],this.length=0,this.hidden=!1}all(){return this._views}first(){return this._views[0]}last(){return this._views[this._views.length-1]}indexOf(e){return this._views.indexOf(e)}slice(){return this._views.slice.apply(this._views,arguments)}get(e){return this._views[e]}append(e){return this._views.push(e),this.container&&this.container.appendChild(e.element),this.length++,e}prepend(e){return this._views.unshift(e),this.container&&this.container.insertBefore(e.element,this.container.firstChild),this.length++,e}insert(e,t){return this._views.splice(t,0,e),this.container&&(t<this.container.children.length?this.container.insertBefore(e.element,this.container.children[t]):this.container.appendChild(e.element)),this.length++,e}remove(e){var t=this._views.indexOf(e);t>-1&&this._views.splice(t,1),this.destroy(e),this.length--}destroy(e){e.displayed&&e.destroy(),this.container&&this.container.removeChild(e.element),e=null}forEach(){return this._views.forEach.apply(this._views,arguments)}clear(){var e,t=this.length;if(this.length){for(var n=0;n<t;n++)e=this._views[n],this.destroy(e);this._views=[],this.length=0}}find(e){for(var t,n=this.length,r=0;r<n;r++)if((t=this._views[r]).displayed&&t.section.index==e.index)return t}displayed(){for(var e,t=[],n=this.length,r=0;r<n;r++)(e=this._views[r]).displayed&&t.push(e);return t}show(){for(var e,t=this.length,n=0;n<t;n++)(e=this._views[n]).displayed&&e.show();this.hidden=!1}hide(){for(var e,t=this.length,n=0;n<t;n++)(e=this._views[n]).displayed&&e.hide();this.hidden=!0}},f=n(1);class p{constructor(e){this.name="default",this.optsSettings=e.settings,this.View=e.view,this.request=e.request,this.renditionQueue=e.queue,this.q=new l.a(this),this.settings=Object(o.extend)(this.settings||{},{infinite:!0,hidden:!1,width:void 0,height:void 0,axis:void 0,writingMode:void 0,flow:"scrolled",ignoreClass:"",fullsize:void 0}),Object(o.extend)(this.settings,e.settings||{}),this.viewSettings={ignoreClass:this.settings.ignoreClass,axis:this.settings.axis,flow:this.settings.flow,layout:this.layout,method:this.settings.method,width:0,height:0,forceEvenPages:!0},this.rendered=!1}render(e,t){let n=e.tagName;void 0!==this.settings.fullsize||!n||"body"!=n.toLowerCase()&&"html"!=n.toLowerCase()||(this.settings.fullsize=!0),this.settings.fullsize&&(this.settings.overflow="visible",this.overflow=this.settings.overflow),this.settings.size=t,this.settings.rtlScrollType=s(),this.stage=new h({width:t.width,height:t.height,overflow:this.overflow,hidden:this.settings.hidden,axis:this.settings.axis,fullsize:this.settings.fullsize,direction:this.settings.direction}),this.stage.attachTo(e),this.container=this.stage.getContainer(),this.views=new d(this.container),this._bounds=this.bounds(),this._stageSize=this.stage.size(),this.viewSettings.width=this._stageSize.width,this.viewSettings.height=this._stageSize.height,this.stage.onResize(this.onResized.bind(this)),this.stage.onOrientationChange(this.onOrientationChange.bind(this)),this.addEventListeners(),this.layout&&this.updateLayout(),this.rendered=!0}addEventListeners(){var e;window.addEventListener("unload",function(e){this.destroy()}.bind(this)),e=this.settings.fullsize?window:this.container,this._onScroll=this.onScroll.bind(this),e.addEventListener("scroll",this._onScroll)}removeEventListeners(){(this.settings.fullsize?window:this.container).removeEventListener("scroll",this._onScroll),this._onScroll=void 0}destroy(){clearTimeout(this.orientationTimeout),clearTimeout(this.resizeTimeout),clearTimeout(this.afterScrolled),this.clear(),this.removeEventListeners(),this.stage.destroy(),this.rendered=!1}onOrientationChange(e){let{orientation:t}=window;this.optsSettings.resizeOnOrientationChange&&this.resize(),clearTimeout(this.orientationTimeout),this.orientationTimeout=setTimeout(function(){this.orientationTimeout=void 0,this.optsSettings.resizeOnOrientationChange&&this.resize(),this.emit(f.c.MANAGERS.ORIENTATION_CHANGE,t)}.bind(this),500)}onResized(e){this.resize()}resize(e,t,n){let r=this.stage.size(e,t);this.winBounds=Object(o.windowBounds)(),this.orientationTimeout&&this.winBounds.width===this.winBounds.height?this._stageSize=void 0:this._stageSize&&this._stageSize.width===r.width&&this._stageSize.height===r.height||(this._stageSize=r,this._bounds=this.bounds(),this.clear(),this.viewSettings.width=this._stageSize.width,this.viewSettings.height=this._stageSize.height,this.updateLayout(),this.emit(f.c.MANAGERS.RESIZED,{width:this._stageSize.width,height:this._stageSize.height},n))}createView(e,t){return new this.View(e,Object(o.extend)(this.viewSettings,{forceRight:t}))}handleNextPrePaginated(e,t,n){let r;if("pre-paginated"===this.layout.name&&this.layout.divisor>1){if(e||0===t.index)return;if(r=t.next(),r&&!r.properties.includes("page-spread-left"))return n.call(this,r)}}display(e,t){var n=new o.defer,r=n.promise;(t===e.href||Object(o.isNumber)(t))&&(t=void 0);var i=this.views.find(e);if(i&&e&&"pre-paginated"!==this.layout.name){let e=i.offset();if("ltr"===this.settings.direction)this.scrollTo(e.left,e.top,!0);else{let t=i.width();this.scrollTo(e.left+t,e.top,!0)}if(t){let e=i.locationOf(t);this.moveTo(e)}return n.resolve(),r}this.clear();let s=!1;return"pre-paginated"===this.layout.name&&2===this.layout.divisor&&e.properties.includes("page-spread-right")&&(s=!0),this.add(e,s).then(function(e){if(t){let n=e.locationOf(t);this.moveTo(n)}}.bind(this),e=>{n.reject(e)}).then(function(){return this.handleNextPrePaginated(s,e,this.add)}.bind(this)).then(function(){this.views.show(),n.resolve()}.bind(this)),r}afterDisplayed(e){this.emit(f.c.MANAGERS.ADDED,e)}afterResized(e){this.emit(f.c.MANAGERS.RESIZE,e.section)}moveTo(e){var t=0,n=0;this.isPaginated?(t=Math.floor(e.left/this.layout.delta)*this.layout.delta)+this.layout.delta>this.container.scrollWidth&&(t=this.container.scrollWidth-this.layout.delta):n=e.top,this.scrollTo(t,n,!0)}add(e,t){var n=this.createView(e,t);return this.views.append(n),n.onDisplayed=this.afterDisplayed.bind(this),n.onResize=this.afterResized.bind(this),n.on(f.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),n.on(f.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),n.display(this.request)}append(e,t){var n=this.createView(e,t);return this.views.append(n),n.onDisplayed=this.afterDisplayed.bind(this),n.onResize=this.afterResized.bind(this),n.on(f.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),n.on(f.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),n.display(this.request)}prepend(e,t){var n=this.createView(e,t);return n.on(f.c.VIEWS.RESIZED,e=>{this.counter(e)}),this.views.prepend(n),n.onDisplayed=this.afterDisplayed.bind(this),n.onResize=this.afterResized.bind(this),n.on(f.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),n.on(f.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),n.display(this.request)}counter(e){"vertical"===this.settings.axis?this.scrollBy(0,e.heightDelta,!0):this.scrollBy(e.widthDelta,0,!0)}next(){var e;let t=this.settings.direction;if(this.views.length){if(!this.isPaginated||"horizontal"!==this.settings.axis||t&&"ltr"!==t)if(this.isPaginated&&"horizontal"===this.settings.axis&&"rtl"===t)this.scrollLeft=this.container.scrollLeft,"default"===this.settings.rtlScrollType?this.container.scrollLeft>0?this.scrollBy(this.layout.delta,0,!0):e=this.views.last().section.next():this.container.scrollLeft+-1*this.layout.delta>-1*this.container.scrollWidth?this.scrollBy(this.layout.delta,0,!0):e=this.views.last().section.next();else if(this.isPaginated&&"vertical"===this.settings.axis){this.scrollTop=this.container.scrollTop,this.container.scrollTop+this.container.offsetHeight<this.container.scrollHeight?this.scrollBy(0,this.layout.height,!0):e=this.views.last().section.next()}else e=this.views.last().section.next();else this.scrollLeft=this.container.scrollLeft,this.container.scrollLeft+this.container.offsetWidth+this.layout.delta<=this.container.scrollWidth?this.scrollBy(this.layout.delta,0,!0):e=this.views.last().section.next();if(e){this.clear();let t=!1;return"pre-paginated"===this.layout.name&&2===this.layout.divisor&&e.properties.includes("page-spread-right")&&(t=!0),this.append(e,t).then(function(){return this.handleNextPrePaginated(t,e,this.append)}.bind(this),e=>e).then(function(){this.isPaginated||"horizontal"!==this.settings.axis||"rtl"!==this.settings.direction||"default"!==this.settings.rtlScrollType||this.scrollTo(this.container.scrollWidth,0,!0),this.views.show()}.bind(this))}}}prev(){var e;let t=this.settings.direction;if(this.views.length){if(!this.isPaginated||"horizontal"!==this.settings.axis||t&&"ltr"!==t)if(this.isPaginated&&"horizontal"===this.settings.axis&&"rtl"===t)this.scrollLeft=this.container.scrollLeft,"default"===this.settings.rtlScrollType?this.container.scrollLeft+this.container.offsetWidth<this.container.scrollWidth?this.scrollBy(-this.layout.delta,0,!0):e=this.views.first().section.prev():this.container.scrollLeft<0?this.scrollBy(-this.layout.delta,0,!0):e=this.views.first().section.prev();else if(this.isPaginated&&"vertical"===this.settings.axis){this.scrollTop=this.container.scrollTop,this.container.scrollTop>0?this.scrollBy(0,-this.layout.height,!0):e=this.views.first().section.prev()}else e=this.views.first().section.prev();else this.scrollLeft=this.container.scrollLeft,this.container.scrollLeft>0?this.scrollBy(-this.layout.delta,0,!0):e=this.views.first().section.prev();if(e){this.clear();let t=!1;return"pre-paginated"===this.layout.name&&2===this.layout.divisor&&"object"!=typeof e.prev()&&(t=!0),this.prepend(e,t).then(function(){var t;if("pre-paginated"===this.layout.name&&this.layout.divisor>1&&(t=e.prev()))return this.prepend(t)}.bind(this),e=>e).then(function(){this.isPaginated&&"horizontal"===this.settings.axis&&("rtl"===this.settings.direction?"default"===this.settings.rtlScrollType?this.scrollTo(0,0,!0):this.scrollTo(-1*this.container.scrollWidth+this.layout.delta,0,!0):this.scrollTo(this.container.scrollWidth-this.layout.delta,0,!0)),this.views.show()}.bind(this))}}}current(){var e=this.visible();return e.length?e[e.length-1]:null}clear(){this.views&&(this.views.hide(),this.scrollTo(0,0,!0),this.views.clear())}currentLocation(){return this.isPaginated&&"horizontal"===this.settings.axis?this.location=this.paginatedLocation():this.location=this.scrolledLocation(),this.location}scrolledLocation(){let e=this.visible(),t=this.container.getBoundingClientRect(),n=t.height<window.innerHeight?t.height:window.innerHeight,r=t.width<window.innerWidth?t.width:window.innerWidth,i="vertical"===this.settings.axis,o=(this.settings.direction,0);return this.settings.fullsize&&(o=i?window.scrollY:window.scrollX),e.map(e=>{let s,a,l,u,{index:c,href:h}=e.section,d=e.position(),f=e.width(),p=e.height();i?(s=o+t.top-d.top+0,a=s+n-0,u=this.layout.count(p,n).pages,l=n):(s=o+t.left-d.left+0,a=s+r-0,u=this.layout.count(f,r).pages,l=r);let m=Math.ceil(s/l),g=[],v=Math.ceil(a/l);if("rtl"===this.settings.direction&&!i){let e=m;m=u-v,v=u-e}g=[];for(var y=m;y<=v;y++){let e=y+1;g.push(e)}return{index:c,href:h,pages:g,totalPages:u,mapping:this.mapping.page(e.contents,e.section.cfiBase,s,a)}})}paginatedLocation(){let e=this.visible(),t=this.container.getBoundingClientRect(),n=0,r=0;return this.settings.fullsize&&(n=window.scrollX),e.map(e=>{let i,o,s,a,{index:l,href:u}=e.section,c=e.position(),h=e.width();"rtl"===this.settings.direction?(i=t.right-n,a=Math.min(Math.abs(i-c.left),this.layout.width)-r,s=c.width-(c.right-i)-r,o=s-a):(i=t.left+n,a=Math.min(c.right-i,this.layout.width)-r,o=i-c.left+r,s=o+a),r+=a;let d=this.mapping.page(e.contents,e.section.cfiBase,o,s),f=this.layout.count(h).pages,p=Math.floor(o/this.layout.pageWidth),m=[],g=Math.floor(s/this.layout.pageWidth);if(p<0&&(p=0,g+=1),"rtl"===this.settings.direction){let e=p;p=f-g,g=f-e}for(var v=p+1;v<=g;v++){let e=v;m.push(e)}return{index:l,href:u,pages:m,totalPages:f,mapping:d}})}isVisible(e,t,n,r){var i=e.position(),o=r||this.bounds();return"horizontal"===this.settings.axis&&i.right>o.left-t&&i.left<o.right+n||"vertical"===this.settings.axis&&i.bottom>o.top-t&&i.top<o.bottom+n}visible(){for(var e,t=this.bounds(),n=this.views.displayed(),r=n.length,i=[],o=0;o<r;o++)e=n[o],!0===this.isVisible(e,0,0,t)&&i.push(e);return i}scrollBy(e,t,n){let r="rtl"===this.settings.direction?-1:1;n&&(this.ignore=!0),this.settings.fullsize?window.scrollBy(e*r,t*r):(e&&(this.container.scrollLeft+=e*r),t&&(this.container.scrollTop+=t)),this.scrolled=!0}scrollTo(e,t,n){n&&(this.ignore=!0),this.settings.fullsize?window.scrollTo(e,t):(this.container.scrollLeft=e,this.container.scrollTop=t),this.scrolled=!0}onScroll(){let e,t;this.settings.fullsize?(e=window.scrollY,t=window.scrollX):(e=this.container.scrollTop,t=this.container.scrollLeft),this.scrollTop=e,this.scrollLeft=t,this.ignore?this.ignore=!1:(this.emit(f.c.MANAGERS.SCROLL,{top:e,left:t}),clearTimeout(this.afterScrolled),this.afterScrolled=setTimeout(function(){this.emit(f.c.MANAGERS.SCROLLED,{top:this.scrollTop,left:this.scrollLeft})}.bind(this),20))}bounds(){return this.stage.bounds()}applyLayout(e){this.layout=e,this.updateLayout(),this.views&&this.views.length>0&&"pre-paginated"===this.layout.name&&this.display(this.views.first().section)}updateLayout(){this.stage&&(this._stageSize=this.stage.size(),this.isPaginated?(this.layout.calculate(this._stageSize.width,this._stageSize.height,this.settings.gap),this.settings.offset=this.layout.delta/this.layout.divisor):this.layout.calculate(this._stageSize.width,this._stageSize.height),this.viewSettings.width=this.layout.width,this.viewSettings.height=this.layout.height,this.setLayout(this.layout))}setLayout(e){this.viewSettings.layout=e,this.mapping=new a.a(e.props,this.settings.direction,this.settings.axis),this.views&&this.views.forEach((function(t){t&&t.setLayout(e)}))}updateWritingMode(e){this.writingMode=e}updateAxis(e,t){(t||e!==this.settings.axis)&&(this.settings.axis=e,this.stage&&this.stage.axis(e),this.viewSettings.axis=e,this.mapping&&(this.mapping=new a.a(this.layout.props,this.settings.direction,this.settings.axis)),this.layout&&("vertical"===e?this.layout.spread("none"):this.layout.spread(this.layout.settings.spread)))}updateFlow(e,t="auto"){let n="paginated"===e||"auto"===e;this.isPaginated=n,"scrolled-doc"===e||"scrolled-continuous"===e||"scrolled"===e?this.updateAxis("vertical"):this.updateAxis("horizontal"),this.viewSettings.flow=e,this.settings.overflow?this.overflow=this.settings.overflow:this.overflow=n?"hidden":t,this.stage&&this.stage.overflow(this.overflow),this.updateLayout()}getContents(){var e=[];return this.views?(this.views.forEach((function(t){const n=t&&t.contents;n&&e.push(n)})),e):e}direction(e="ltr"){this.settings.direction=e,this.stage&&this.stage.direction(e),this.viewSettings.direction=e,this.updateLayout()}isRendered(){return this.rendered}}i()(p.prototype);t.a=p},function(e,t,n){"use strict";var r=n(2),i=n(0);t.a=class{constructor(e,t,n,r=!1){this.layout=e,this.horizontal="horizontal"===n,this.direction=t||"ltr",this._dev=r}section(e){var t=this.findRanges(e);return this.rangeListToCfiList(e.section.cfiBase,t)}page(e,t,n,i){var o,s=!(!e||!e.document)&&e.document.body;if(s){if(o=this.rangePairToCfiPair(t,{start:this.findStart(s,n,i),end:this.findEnd(s,n,i)}),!0===this._dev){let t=e.document,n=new r.a(o.start).toRange(t),i=new r.a(o.end).toRange(t),s=t.defaultView.getSelection(),a=t.createRange();s.removeAllRanges(),a.setStart(n.startContainer,n.startOffset),a.setEnd(i.endContainer,i.endOffset),s.addRange(a)}return o}}walk(e,t){if(!e||e.nodeType!==Node.TEXT_NODE){var n=function(e){return e.data.trim().length>0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT},r=n;r.acceptNode=n;for(var i,o,s=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,r,!1);(i=s.nextNode())&&!(o=t(i)););return o}}findRanges(e){for(var t,n,r=[],i=e.contents.scrollWidth(),o=Math.ceil(i/this.layout.spreadWidth)*this.layout.divisor,s=this.layout.columnWidth,a=this.layout.gap,l=0;l<o.pages;l++)t=(s+a)*l,n=s*(l+1)+a*l,r.push({start:this.findStart(e.document.body,t,n),end:this.findEnd(e.document.body,t,n)});return r}findStart(e,t,n){for(var r,o,s=[e],a=e;s.length;)if(r=s.shift(),o=this.walk(r,e=>{var r,o,l,u,c;if(c=Object(i.nodeBounds)(e),this.horizontal&&"ltr"===this.direction){if(r=this.horizontal?c.left:c.top,o=this.horizontal?c.right:c.bottom,r>=t&&r<=n)return e;if(o>t)return e;a=e,s.push(e)}else if(this.horizontal&&"rtl"===this.direction){if(r=c.left,(o=c.right)<=n&&o>=t)return e;if(r<n)return e;a=e,s.push(e)}else{if(l=c.top,u=c.bottom,l>=t&&l<=n)return e;if(u>t)return e;a=e,s.push(e)}}))return this.findTextStartRange(o,t,n);return this.findTextStartRange(a,t,n)}findEnd(e,t,n){for(var r,o,s=[e],a=e;s.length;)if(r=s.shift(),o=this.walk(r,e=>{var r,o,l,u,c;if(c=Object(i.nodeBounds)(e),this.horizontal&&"ltr"===this.direction){if(r=Math.round(c.left),o=Math.round(c.right),r>n&&a)return a;if(o>n)return e;a=e,s.push(e)}else if(this.horizontal&&"rtl"===this.direction){if(r=Math.round(this.horizontal?c.left:c.top),(o=Math.round(this.horizontal?c.right:c.bottom))<t&&a)return a;if(r<t)return e;a=e,s.push(e)}else{if(l=Math.round(c.top),u=Math.round(c.bottom),l>n&&a)return a;if(u>n)return e;a=e,s.push(e)}}))return this.findTextEndRange(o,t,n);return this.findTextEndRange(a,t,n)}findTextStartRange(e,t,n){for(var r,i,o=this.splitTextNodeIntoRanges(e),s=0;s<o.length;s++)if(i=(r=o[s]).getBoundingClientRect(),this.horizontal&&"ltr"===this.direction){if(i.left>=t)return r}else if(this.horizontal&&"rtl"===this.direction){if(i.right<=n)return r}else if(i.top>=t)return r;return o[0]}findTextEndRange(e,t,n){for(var r,i,o,s,a,l,u,c=this.splitTextNodeIntoRanges(e),h=0;h<c.length;h++){if(o=(i=c[h]).getBoundingClientRect(),this.horizontal&&"ltr"===this.direction){if(s=o.left,a=o.right,s>n&&r)return r;if(a>n)return i}else if(this.horizontal&&"rtl"===this.direction){if(s=o.left,(a=o.right)<t&&r)return r;if(s<t)return i}else{if(l=o.top,u=o.bottom,l>n&&r)return r;if(u>n)return i}r=i}return c[c.length-1]}splitTextNodeIntoRanges(e,t){var n,r=[],i=(e.textContent||"").trim(),o=e.ownerDocument,s=t||" ",a=i.indexOf(s);if(-1===a||e.nodeType!=Node.TEXT_NODE)return(n=o.createRange()).selectNodeContents(e),[n];for((n=o.createRange()).setStart(e,0),n.setEnd(e,a),r.push(n),n=!1;-1!=a;)(a=i.indexOf(s,a+1))>0&&(n&&(n.setEnd(e,a),r.push(n)),(n=o.createRange()).setStart(e,a+1));return n&&(n.setEnd(e,i.length),r.push(n)),r}rangePairToCfiPair(e,t){var n=t.start,i=t.end;return n.collapse(!0),i.collapse(!1),{start:new r.a(n,e).toString(),end:new r.a(i,e).toString()}}rangeListToCfiList(e,t){for(var n,r=[],i=0;i<t.length;i++)n=this.rangePairToCfiPair(e,t[i]),r.push(n);return r}axis(e){return e&&(this.horizontal="horizontal"===e),this.horizontal}}},function(e,t,n){"use strict";var r=n(3),i=n.n(r),o=n(0),s=n(5),a=n(4),l=n(2),u=n(6),c=n(10);var h=function(e,t,n,r){var i,s="undefined"!=typeof window&&window.URL,l=s?"blob":"arraybuffer",u=new o.defer,c=new XMLHttpRequest,h=XMLHttpRequest.prototype;for(i in"overrideMimeType"in h||Object.defineProperty(h,"overrideMimeType",{value:function(){}}),n&&(c.withCredentials=!0),c.onreadystatechange=function(){if(this.readyState===XMLHttpRequest.DONE){var e=!1;if(""!==this.responseType&&"document"!==this.responseType||(e=this.responseXML),200===this.status||0===this.status||e){var n;if(!this.response&&!e)return u.reject({status:this.status,message:"Empty Response",stack:(new Error).stack}),u.promise;if(403===this.status)return u.reject({status:this.status,response:this.response,message:"Forbidden",stack:(new Error).stack}),u.promise;n=e?this.responseXML:Object(o.isXml)(t)?Object(o.parse)(this.response,"text/xml"):"xhtml"==t?Object(o.parse)(this.response,"application/xhtml+xml"):"html"==t||"htm"==t?Object(o.parse)(this.response,"text/html"):"json"==t?JSON.parse(this.response):"blob"==t?s?this.response:new Blob([this.response]):this.response,u.resolve(n)}else u.reject({status:this.status,message:this.response,stack:(new Error).stack})}},c.onerror=function(e){u.reject(e)},c.open("GET",e,!0),r)c.setRequestHeader(i,r[i]);return"json"==t&&c.setRequestHeader("Accept","application/json"),t||(t=new a.a(e).extension),"blob"==t&&(c.responseType=l),Object(o.isXml)(t)&&c.overrideMimeType("text/xml"),"binary"==t&&(c.responseType="arraybuffer"),c.send(),u.promise},d=n(23);var f=class{constructor(e,t){this.idref=e.idref,this.linear="yes"===e.linear,this.properties=e.properties,this.index=e.index,this.href=e.href,this.url=e.url,this.canonical=e.canonical,this.next=e.next,this.prev=e.prev,this.cfiBase=e.cfiBase,t?this.hooks=t:(this.hooks={},this.hooks.serialize=new u.a(this),this.hooks.content=new u.a(this)),this.document=void 0,this.contents=void 0,this.output=void 0}load(e){var t=e||this.request||h,n=new o.defer,r=n.promise;return this.contents?n.resolve(this.contents):t(this.url).then(function(e){return this.document=e,this.contents=e.documentElement,this.hooks.content.trigger(this.document,this)}.bind(this)).then(function(){n.resolve(this.contents)}.bind(this)).catch((function(e){n.reject(e)})),r}base(){return Object(c.a)(this.document,this)}render(e){var t=new o.defer,n=t.promise;return this.output,this.load(e).then(function(e){var t=("undefined"!=typeof navigator&&navigator.userAgent||"").indexOf("Trident")>=0,n=new("undefined"==typeof XMLSerializer||t?d.XMLDOMParser:XMLSerializer);return this.output=n.serializeToString(e),this.output}.bind(this)).then(function(){return this.hooks.serialize.trigger(this.output,this)}.bind(this)).then(function(){t.resolve(this.output)}.bind(this)).catch((function(e){t.reject(e)})),n}find(e){var t=this,n=[],r=e.toLowerCase();return Object(o.sprint)(t.document,(function(e){!function(e){for(var i,o,s,a=e.textContent.toLowerCase(),l=t.document.createRange(),u=-1;-1!=o;)-1!=(o=a.indexOf(r,u+1))&&((l=t.document.createRange()).setStart(e,o),l.setEnd(e,o+r.length),i=t.cfiFromRange(l),s=e.textContent.length<150?e.textContent:"..."+(s=e.textContent.substring(o-75,o+75))+"...",n.push({cfi:i,excerpt:s})),u=o}(e)})),n}search(e,t=5){if(void 0===document.createTreeWalker)return this.find(e);let n=[];const r=this,i=e.toLowerCase(),o=function(e){const t=e.reduce((e,t)=>e+t.textContent,"").toLowerCase().indexOf(i);if(-1!=t){const o=0,s=t+i.length;let a=0,l=0;if(t<e[o].length){let i;for(;a<e.length-1&&(l+=e[a].length,!(s<=l));)a+=1;let u=e[o],c=e[a],h=r.document.createRange();h.setStart(u,t);let d=e.slice(0,a).reduce((e,t)=>e+t.textContent.length,0);h.setEnd(c,d>s?s:s-d),i=r.cfiFromRange(h);let f=e.slice(0,a+1).reduce((e,t)=>e+t.textContent,"");f.length>150&&(f=f.substring(t-75,t+75),f="..."+f+"..."),n.push({cfi:i,excerpt:f})}}},s=document.createTreeWalker(r.document,NodeFilter.SHOW_TEXT,null,!1);let a,l=[];for(;a=s.nextNode();)l.push(a),l.length==t&&(o(l.slice(0,t)),l=l.slice(1,t));return l.length>0&&o(l),n}reconcileLayoutSettings(e){var t={layout:e.layout,spread:e.spread,orientation:e.orientation};return this.properties.forEach((function(e){var n,r,i=e.replace("rendition:",""),o=i.indexOf("-");-1!=o&&(n=i.slice(0,o),r=i.slice(o+1),t[n]=r)})),t}cfiFromRange(e){return new l.a(e,this.cfiBase).toString()}cfiFromElement(e){return new l.a(e,this.cfiBase).toString()}unload(){this.document=void 0,this.contents=void 0,this.output=void 0}destroy(){this.unload(),this.hooks.serialize.clear(),this.hooks.content.clear(),this.hooks=void 0,this.idref=void 0,this.linear=void 0,this.properties=void 0,this.index=void 0,this.href=void 0,this.url=void 0,this.next=void 0,this.prev=void 0,this.cfiBase=void 0}};var p=class{constructor(){this.spineItems=[],this.spineByHref={},this.spineById={},this.hooks={},this.hooks.serialize=new u.a,this.hooks.content=new u.a,this.hooks.content.register(c.a),this.hooks.content.register(c.b),this.hooks.content.register(c.d),this.epubcfi=new l.a,this.loaded=!1,this.items=void 0,this.manifest=void 0,this.spineNodeIndex=void 0,this.baseUrl=void 0,this.length=void 0}unpack(e,t,n){this.items=e.spine,this.manifest=e.manifest,this.spineNodeIndex=e.spineNodeIndex,this.baseUrl=e.baseUrl||e.basePath||"",this.length=this.items.length,this.items.forEach((e,r)=>{var i,o=this.manifest[e.idref];e.index=r,e.cfiBase=this.epubcfi.generateChapterComponent(this.spineNodeIndex,e.index,e.idref),e.href&&(e.url=t(e.href,!0),e.canonical=n(e.href)),o&&(e.href=o.href,e.url=t(e.href,!0),e.canonical=n(e.href),o.properties.length&&e.properties.push.apply(e.properties,o.properties)),"yes"===e.linear?(e.prev=function(){let t=e.index;for(;t>0;){let e=this.get(t-1);if(e&&e.linear)return e;t-=1}}.bind(this),e.next=function(){let t=e.index;for(;t<this.spineItems.length-1;){let e=this.get(t+1);if(e&&e.linear)return e;t+=1}}.bind(this)):(e.prev=function(){},e.next=function(){}),i=new f(e,this.hooks),this.append(i)}),this.loaded=!0}get(e){var t=0;if(void 0===e)for(;t<this.spineItems.length;){let e=this.spineItems[t];if(e&&e.linear)break;t+=1}else if(this.epubcfi.isCfiString(e)){t=new l.a(e).spinePos}else"number"==typeof e||!1===isNaN(e)?t=e:"string"==typeof e&&0===e.indexOf("#")?t=this.spineById[e.substring(1)]:"string"==typeof e&&(e=e.split("#")[0],t=this.spineByHref[e]||this.spineByHref[encodeURI(e)]);return this.spineItems[t]||null}append(e){var t=this.spineItems.length;return e.index=t,this.spineItems.push(e),this.spineByHref[decodeURI(e.href)]=t,this.spineByHref[encodeURI(e.href)]=t,this.spineByHref[e.href]=t,this.spineById[e.idref]=t,t}prepend(e){return this.spineByHref[e.href]=0,this.spineById[e.idref]=0,this.spineItems.forEach((function(e,t){e.index=t})),0}remove(e){var t=this.spineItems.indexOf(e);if(t>-1)return delete this.spineByHref[e.href],delete this.spineById[e.idref],this.spineItems.splice(t,1)}each(){return this.spineItems.forEach.apply(this.spineItems,arguments)}first(){let e=0;do{let t=this.get(e);if(t&&t.linear)return t;e+=1}while(e<this.spineItems.length)}last(){let e=this.spineItems.length-1;do{let t=this.get(e);if(t&&t.linear)return t;e-=1}while(e>=0)}destroy(){this.each(e=>e.destroy()),this.spineItems=void 0,this.spineByHref=void 0,this.spineById=void 0,this.hooks.serialize.clear(),this.hooks.content.clear(),this.hooks=void 0,this.epubcfi=void 0,this.loaded=!1,this.items=void 0,this.manifest=void 0,this.spineNodeIndex=void 0,this.baseUrl=void 0,this.length=void 0}},m=n(15),g=n(1);class v{constructor(e,t,n){this.spine=e,this.request=t,this.pause=n||100,this.q=new m.a(this),this.epubcfi=new l.a,this._locations=[],this._locationsWords=[],this.total=0,this.break=150,this._current=0,this._wordCounter=0,this.currentLocation="",this._currentCfi="",this.processingTimeout=void 0}generate(e){return e&&(this.break=e),this.q.pause(),this.spine.each(function(e){e.linear&&this.q.enqueue(this.process.bind(this),e)}.bind(this)),this.q.run().then(function(){return this.total=this._locations.length-1,this._currentCfi&&(this.currentLocation=this._currentCfi),this._locations}.bind(this))}createRange(){return{startContainer:void 0,startOffset:void 0,endContainer:void 0,endOffset:void 0}}process(e){return e.load(this.request).then(function(t){var n=new o.defer,r=this.parse(t,e.cfiBase);return this._locations=this._locations.concat(r),e.unload(),this.processingTimeout=setTimeout(()=>n.resolve(r),this.pause),n.promise}.bind(this))}parse(e,t,n){var r,i,s=[],a=e.ownerDocument,u=Object(o.qs)(a,"body"),c=0,h=n||this.break;if(Object(o.sprint)(u,function(e){var n,o=e.length,a=0;if(0===e.textContent.trim().length)return!1;for(0==c&&((r=this.createRange()).startContainer=e,r.startOffset=0),(n=h-c)>o&&(c+=o,a=o);a<o;)if(n=h-c,0===c&&(a+=1,(r=this.createRange()).startContainer=e,r.startOffset=a),a+n>=o)c+=o-a,a=o;else{a+=n,r.endContainer=e,r.endOffset=a;let i=new l.a(r,t).toString();s.push(i),c=0}i=e}.bind(this)),r&&r.startContainer&&i){r.endContainer=i,r.endOffset=i.length;let e=new l.a(r,t).toString();s.push(e),c=0}return s}generateFromWords(e,t,n){var r=e?new l.a(e):void 0;return this.q.pause(),this._locationsWords=[],this._wordCounter=0,this.spine.each(function(e){e.linear&&(r?e.index>=r.spinePos&&this.q.enqueue(this.processWords.bind(this),e,t,r,n):this.q.enqueue(this.processWords.bind(this),e,t,r,n))}.bind(this)),this.q.run().then(function(){return this._currentCfi&&(this.currentLocation=this._currentCfi),this._locationsWords}.bind(this))}processWords(e,t,n,r){return r&&this._locationsWords.length>=r?Promise.resolve():e.load(this.request).then(function(i){var s=new o.defer,a=this.parseWords(i,e,t,n),l=r-this._locationsWords.length;return this._locationsWords=this._locationsWords.concat(a.length>=r?a.slice(0,l):a),e.unload(),this.processingTimeout=setTimeout(()=>s.resolve(a),this.pause),s.promise}.bind(this))}countWords(e){return(e=(e=(e=e.replace(/(^\s*)|(\s*$)/gi,"")).replace(/[ ]{2,}/gi," ")).replace(/\n /,"\n")).split(" ").length}parseWords(e,t,n,r){var i,s=t.cfiBase,a=[],u=e.ownerDocument,c=Object(o.qs)(u,"body"),h=n,d=!r||r.spinePos!==t.index;r&&t.index===r.spinePos&&(i=r.findNode(r.range?r.path.steps.concat(r.start.steps):r.path.steps,e.ownerDocument));return Object(o.sprint)(c,function(e){if(!d){if(e!==i)return!1;d=!0}if(e.textContent.length<10&&0===e.textContent.trim().length)return!1;var t,n=this.countWords(e.textContent),r=0;if(0===n)return!1;for((t=h-this._wordCounter)>n&&(this._wordCounter+=n,r=n);r<n;)if(r+(t=h-this._wordCounter)>=n)this._wordCounter+=n-r,r=n;else{r+=t;let n=new l.a(e,s);a.push({cfi:n.toString(),wordCount:this._wordCounter}),this._wordCounter=0}e}.bind(this)),a}locationFromCfi(e){let t;return l.a.prototype.isCfiString(e)&&(e=new l.a(e)),0===this._locations.length?-1:(t=Object(o.locationOf)(e,this._locations,this.epubcfi.compare),t>this.total?this.total:t)}percentageFromCfi(e){if(0===this._locations.length)return null;var t=this.locationFromCfi(e);return this.percentageFromLocation(t)}percentageFromLocation(e){return e&&this.total?e/this.total:0}cfiFromLocation(e){var t=-1;return"number"!=typeof e&&(e=parseInt(e)),e>=0&&e<this._locations.length&&(t=this._locations[e]),t}cfiFromPercentage(e){let t;if(e>1&&console.warn("Normalize cfiFromPercentage value to between 0 - 1"),e>=1){let e=new l.a(this._locations[this.total]);return e.collapse(),e.toString()}return t=Math.ceil(this.total*e),this.cfiFromLocation(t)}load(e){return this._locations="string"==typeof e?JSON.parse(e):e,this.total=this._locations.length-1,this._locations}save(){return JSON.stringify(this._locations)}getCurrent(){return this._current}setCurrent(e){var t;if("string"==typeof e)this._currentCfi=e;else{if("number"!=typeof e)return;this._current=e}0!==this._locations.length&&("string"==typeof e?(t=this.locationFromCfi(e),this._current=t):t=e,this.emit(g.c.LOCATIONS.CHANGED,{percentage:this.percentageFromLocation(t)}))}get currentLocation(){return this._current}set currentLocation(e){this.setCurrent(e)}length(){return this._locations.length}destroy(){this.spine=void 0,this.request=void 0,this.pause=void 0,this.q.stop(),this.q=void 0,this.epubcfi=void 0,this._locations=void 0,this.total=void 0,this.break=void 0,this._current=void 0,this.currentLocation=void 0,this._currentCfi=void 0,clearTimeout(this.processingTimeout)}}i()(v.prototype);var y=v,b=n(9),w=n.n(b);var _=class{constructor(e){this.packagePath="",this.directory="",this.encoding="",e&&this.parse(e)}parse(e){var t;if(!e)throw new Error("Container File Not Found");if(!(t=Object(o.qs)(e,"rootfile")))throw new Error("No RootFile Found");this.packagePath=t.getAttribute("full-path"),this.directory=w.a.dirname(this.packagePath),this.encoding=e.xmlEncoding}destroy(){this.packagePath=void 0,this.directory=void 0,this.encoding=void 0}};var x=class{constructor(e){this.manifest={},this.navPath="",this.ncxPath="",this.coverPath="",this.spineNodeIndex=0,this.spine=[],this.metadata={},e&&this.parse(e)}parse(e){var t,n,r;if(!e)throw new Error("Package File Not Found");if(!(t=Object(o.qs)(e,"metadata")))throw new Error("No Metadata Found");if(!(n=Object(o.qs)(e,"manifest")))throw new Error("No Manifest Found");if(!(r=Object(o.qs)(e,"spine")))throw new Error("No Spine Found");return this.manifest=this.parseManifest(n),this.navPath=this.findNavPath(n),this.ncxPath=this.findNcxPath(n,r),this.coverPath=this.findCoverPath(e),this.spineNodeIndex=Object(o.indexOfElementNode)(r),this.spine=this.parseSpine(r,this.manifest),this.uniqueIdentifier=this.findUniqueIdentifier(e),this.metadata=this.parseMetadata(t),this.metadata.direction=r.getAttribute("page-progression-direction"),{metadata:this.metadata,spine:this.spine,manifest:this.manifest,navPath:this.navPath,ncxPath:this.ncxPath,coverPath:this.coverPath,spineNodeIndex:this.spineNodeIndex}}parseMetadata(e){var t={};return t.title=this.getElementText(e,"title"),t.creator=this.getElementText(e,"creator"),t.description=this.getElementText(e,"description"),t.pubdate=this.getElementText(e,"date"),t.publisher=this.getElementText(e,"publisher"),t.identifier=this.getElementText(e,"identifier"),t.language=this.getElementText(e,"language"),t.rights=this.getElementText(e,"rights"),t.modified_date=this.getPropertyText(e,"dcterms:modified"),t.layout=this.getPropertyText(e,"rendition:layout"),t.orientation=this.getPropertyText(e,"rendition:orientation"),t.flow=this.getPropertyText(e,"rendition:flow"),t.viewport=this.getPropertyText(e,"rendition:viewport"),t.media_active_class=this.getPropertyText(e,"media:active-class"),t.spread=this.getPropertyText(e,"rendition:spread"),t}parseManifest(e){var t={},n=Object(o.qsa)(e,"item");return Array.prototype.slice.call(n).forEach((function(e){var n=e.getAttribute("id"),r=e.getAttribute("href")||"",i=e.getAttribute("media-type")||"",o=e.getAttribute("media-overlay")||"",s=e.getAttribute("properties")||"";t[n]={href:r,type:i,overlay:o,properties:s.length?s.split(" "):[]}})),t}parseSpine(e,t){var n=[],r=Object(o.qsa)(e,"itemref");return Array.prototype.slice.call(r).forEach((function(e,t){var r=e.getAttribute("idref"),i=e.getAttribute("properties")||"",o=i.length?i.split(" "):[],s={idref:r,linear:e.getAttribute("linear")||"yes",properties:o,index:t};n.push(s)})),n}findUniqueIdentifier(e){var t=e.documentElement.getAttribute("unique-identifier");if(!t)return"";var n=e.getElementById(t);return n&&"identifier"===n.localName&&"http://purl.org/dc/elements/1.1/"===n.namespaceURI&&n.childNodes.length>0?n.childNodes[0].nodeValue.trim():""}findNavPath(e){var t=Object(o.qsp)(e,"item",{properties:"nav"});return!!t&&t.getAttribute("href")}findNcxPath(e,t){var n,r=Object(o.qsp)(e,"item",{"media-type":"application/x-dtbncx+xml"});return r||(n=t.getAttribute("toc"))&&(r=e.querySelector("#"+n)),!!r&&r.getAttribute("href")}findCoverPath(e){Object(o.qs)(e,"package").getAttribute("version");var t=Object(o.qsp)(e,"item",{properties:"cover-image"});if(t)return t.getAttribute("href");var n=Object(o.qsp)(e,"meta",{name:"cover"});if(n){var r=n.getAttribute("content"),i=e.getElementById(r);return i?i.getAttribute("href"):""}return!1}getElementText(e,t){var n,r=e.getElementsByTagNameNS("http://purl.org/dc/elements/1.1/",t);return r&&0!==r.length&&(n=r[0]).childNodes.length?n.childNodes[0].nodeValue:""}getPropertyText(e,t){var n=Object(o.qsp)(e,"meta",{property:t});return n&&n.childNodes.length?n.childNodes[0].nodeValue:""}load(e){this.metadata=e.metadata;let t=e.readingOrder||e.spine;return this.spine=t.map((e,t)=>(e.index=t,e.linear=e.linear||"yes",e)),e.resources.forEach((e,t)=>{this.manifest[t]=e,e.rel&&"cover"===e.rel[0]&&(this.coverPath=e.href)}),this.spineNodeIndex=0,this.toc=e.toc.map((e,t)=>(e.label=e.title,e)),{metadata:this.metadata,spine:this.spine,manifest:this.manifest,navPath:this.navPath,ncxPath:this.ncxPath,coverPath:this.coverPath,spineNodeIndex:this.spineNodeIndex,toc:this.toc}}destroy(){this.manifest=void 0,this.navPath=void 0,this.ncxPath=void 0,this.coverPath=void 0,this.spineNodeIndex=void 0,this.spine=void 0,this.metadata=void 0}};var E=class{constructor(e){this.toc=[],this.tocByHref={},this.tocById={},this.landmarks=[],this.landmarksByType={},this.length=0,e&&this.parse(e)}parse(e){let t,n,r=e.nodeType;r&&(t=Object(o.qs)(e,"html"),n=Object(o.qs)(e,"ncx")),r?t?(this.toc=this.parseNav(e),this.landmarks=this.parseLandmarks(e)):n&&(this.toc=this.parseNcx(e)):this.toc=this.load(e),this.length=0,this.unpack(this.toc)}unpack(e){for(var t,n=0;n<e.length;n++)(t=e[n]).href&&(this.tocByHref[t.href]=n),t.id&&(this.tocById[t.id]=n),this.length++,t.subitems.length&&this.unpack(t.subitems)}get(e){var t;return e?(0===e.indexOf("#")?t=this.tocById[e.substring(1)]:e in this.tocByHref&&(t=this.tocByHref[e]),this.getByIndex(e,t,this.toc)):this.toc}getByIndex(e,t,n){if(0===n.length)return;const r=n[t];if(!r||e!==r.id&&e!==r.href){let r;for(let i=0;i<n.length&&(r=this.getByIndex(e,t,n[i].subitems),!r);++i);return r}return r}landmark(e){var t;return e?(t=this.landmarksByType[e],this.landmarks[t]):this.landmarks}parseNav(e){var t,n,r=Object(o.querySelectorByType)(e,"nav","toc"),i=r?Object(o.qsa)(r,"li"):[],s=i.length,a={},l=[];if(!i||0===s)return l;for(t=0;t<s;++t)(n=this.navItem(i[t]))&&(a[n.id]=n,n.parent?a[n.parent].subitems.push(n):l.push(n));return l}navItem(e){let t=e.getAttribute("id")||void 0,n=Object(o.filterChildren)(e,"a",!0);if(!n)return;let r=n.getAttribute("href")||"";t||(t=r);let i,s=n.textContent||"",a=Object(o.getParentByTagName)(e,"li");if(a&&(i=a.getAttribute("id"),!i)){const e=Object(o.filterChildren)(a,"a",!0);i=e&&e.getAttribute("href")}for(;!i&&a;)if(a=Object(o.getParentByTagName)(a,"li"),a&&(i=a.getAttribute("id"),!i)){const e=Object(o.filterChildren)(a,"a",!0);i=e&&e.getAttribute("href")}return{id:t,href:r,label:s,subitems:[],parent:i}}parseLandmarks(e){var t,n,r=Object(o.querySelectorByType)(e,"nav","landmarks"),i=r?Object(o.qsa)(r,"li"):[],s=i.length,a=[];if(!i||0===s)return a;for(t=0;t<s;++t)(n=this.landmarkItem(i[t]))&&(a.push(n),this.landmarksByType[n.type]=t);return a}landmarkItem(e){let t=Object(o.filterChildren)(e,"a",!0);if(!t)return;let n=t.getAttributeNS("http://www.idpf.org/2007/ops","type")||void 0;return{href:t.getAttribute("href")||"",label:t.textContent||"",type:n}}parseNcx(e){var t,n,r=Object(o.qsa)(e,"navPoint"),i=r.length,s={},a=[];if(!r||0===i)return a;for(t=0;t<i;++t)s[(n=this.ncxItem(r[t])).id]=n,n.parent?s[n.parent].subitems.push(n):a.push(n);return a}ncxItem(e){var t,n=e.getAttribute("id")||!1,r=Object(o.qs)(e,"content").getAttribute("src"),i=Object(o.qs)(e,"navLabel"),s=i.textContent?i.textContent:"",a=e.parentNode;return!a||"navPoint"!==a.nodeName&&"navPoint"!==a.nodeName.split(":").slice(-1)[0]||(t=a.getAttribute("id")),{id:n,href:r,label:s,subitems:[],parent:t}}load(e){return e.map(e=>(e.label=e.title,e.subitems=e.children?this.load(e.children):[],e))}forEach(e){return this.toc.forEach(e)}},k={application:{ecmascript:["es","ecma"],javascript:"js",ogg:"ogx",pdf:"pdf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],"rdf+xml":"rdf",smil:["smi","smil"],"xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","opf","ncx"],zip:"zip","x-httpd-eruby":"rhtml","x-latex":"latex","x-maker":["frm","maker","frame","fm","fb","book","fbdoc"],"x-object":"o","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","epub+zip":"epub","font-tdpfr":"pfr","inkml+xml":["ink","inkml"],json:"json","jsonml+json":"jsonml","mathml+xml":"mathml","metalink+xml":"metalink",mp4:"mp4s","omdoc+xml":"omdoc",oxps:"oxps","vnd.amazon.ebook":"azw",widget:"wgt","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-otf":"otf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-font-woff":"woff","x-mobipocket-ebook":["prc","mobi"],"x-mspublisher":"pub","x-nzb":"nzb","x-tgif":"obj","xaml+xml":"xaml","xml-dtd":"dtd","xproc+xml":"xpl","xslt+xml":"xslt","internet-property-stream":"acx","x-compress":"z","x-compressed":"tgz","x-gzip":"gz"},audio:{flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp2","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"x-aiff":["aif","aiff","aifc"],"x-ms-wma":"wma","x-wav":"wav",adpcm:"adp",mp4:"mp4a",webm:"weba","x-aac":"aac","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",mid:["mid","rmi"]},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"x-icon":"ico",bmp:"bmp",webp:"webp","x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod"},text:{"cache-manifest":["manifest","appcache"],css:"css",csv:"csv",html:["html","htm","shtml","stm"],mathml:"mml",plain:["txt","text","brf","conf","def","list","log","in","bas"],richtext:"rtx","tab-separated-values":"tsv","x-bibtex":"bib"},video:{mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv"}},S=function(){var e,t,n,r,i={};for(e in k)if(k.hasOwnProperty(e))for(t in k[e])if(k[e].hasOwnProperty(t))if("string"==typeof(n=k[e][t]))i[n]=e+"/"+t;else for(r=0;r<n.length;r++)i[n[r]]=e+"/"+t;return i}();var T={lookup:function(e){return e&&S[e.split(".").pop().toLowerCase()]||"text/plain"}};var C=class{constructor(e,t){this.settings={replacements:t&&t.replacements||"base64",archive:t&&t.archive,resolver:t&&t.resolver,request:t&&t.request},this.process(e)}process(e){this.manifest=e,this.resources=Object.keys(e).map((function(t){return e[t]})),this.replacementUrls=[],this.html=[],this.assets=[],this.css=[],this.urls=[],this.cssUrls=[],this.split(),this.splitUrls()}split(){this.html=this.resources.filter((function(e){if("application/xhtml+xml"===e.type||"text/html"===e.type)return!0})),this.assets=this.resources.filter((function(e){if("application/xhtml+xml"!==e.type&&"text/html"!==e.type)return!0})),this.css=this.resources.filter((function(e){if("text/css"===e.type)return!0}))}splitUrls(){this.urls=this.assets.map(function(e){return e.href}.bind(this)),this.cssUrls=this.css.map((function(e){return e.href}))}createUrl(e){var t=new s.a(e),n=T.lookup(t.filename);return this.settings.archive?this.settings.archive.createUrl(e,{base64:"base64"===this.settings.replacements}):"base64"===this.settings.replacements?this.settings.request(e,"blob").then(e=>Object(o.blob2base64)(e)).then(e=>Object(o.createBase64Url)(e,n)):this.settings.request(e,"blob").then(e=>Object(o.createBlobUrl)(e,n))}replacements(){if("none"===this.settings.replacements)return new Promise(function(e){e(this.urls)}.bind(this));var e=this.urls.map(e=>{var t=this.settings.resolver(e);return this.createUrl(t).catch(e=>(console.error(e),null))});return Promise.all(e).then(e=>(this.replacementUrls=e.filter(e=>"string"==typeof e),e))}replaceCss(e,t){var n=[];return e=e||this.settings.archive,t=t||this.settings.resolver,this.cssUrls.forEach(function(r){var i=this.createCssFile(r,e,t).then(function(e){var t=this.urls.indexOf(r);t>-1&&(this.replacementUrls[t]=e)}.bind(this));n.push(i)}.bind(this)),Promise.all(n)}createCssFile(e){if(w.a.isAbsolute(e))return new Promise((function(e){e()}));var t,n=this.settings.resolver(e);t=this.settings.archive?this.settings.archive.getText(n):this.settings.request(n,"text");var r=this.urls.map(e=>{var t=this.settings.resolver(e);return new a.a(n).relative(t)});return t?t.then(e=>(e=Object(c.e)(e,r,this.replacementUrls),"base64"===this.settings.replacements?Object(o.createBase64Url)(e,"text/css"):Object(o.createBlobUrl)(e,"text/css")),e=>new Promise((function(e){e()}))):new Promise((function(e){e()}))}relativeTo(e,t){return t=t||this.settings.resolver,this.urls.map(function(n){var r=t(n);return new a.a(e).relative(r)}.bind(this))}get(e){var t=this.urls.indexOf(e);if(-1!==t)return this.replacementUrls.length?new Promise(function(e,n){e(this.replacementUrls[t])}.bind(this)):this.createUrl(e)}substitute(e,t){var n;return n=t?this.relativeTo(t):this.urls,Object(c.e)(e,n,this.replacementUrls)}destroy(){this.settings=void 0,this.manifest=void 0,this.resources=void 0,this.replacementUrls=void 0,this.html=void 0,this.assets=void 0,this.css=void 0,this.urls=void 0,this.cssUrls=void 0}};var N=class{constructor(e){this.pages=[],this.locations=[],this.epubcfi=new l.a,this.firstPage=0,this.lastPage=0,this.totalPages=0,this.toc=void 0,this.ncx=void 0,e&&(this.pageList=this.parse(e)),this.pageList&&this.pageList.length&&this.process(this.pageList)}parse(e){var t=Object(o.qs)(e,"html"),n=Object(o.qs)(e,"ncx");return t?this.parseNav(e):n?this.parseNcx(e):void 0}parseNav(e){var t,n,r=Object(o.querySelectorByType)(e,"nav","page-list"),i=r?Object(o.qsa)(r,"li"):[],s=i.length,a=[];if(!i||0===s)return a;for(t=0;t<s;++t)n=this.item(i[t]),a.push(n);return a}parseNcx(e){var t,n,r,i,s=[],a=0;if(!(n=Object(o.qs)(e,"pageList")))return s;if(i=(r=Object(o.qsa)(n,"pageTarget")).length,!r||0===r.length)return s;for(a=0;a<i;++a)t=this.ncxItem(r[a]),s.push(t);return s}ncxItem(e){var t=Object(o.qs)(e,"navLabel"),n=Object(o.qs)(t,"text").textContent;return{href:Object(o.qs)(e,"content").getAttribute("src"),page:parseInt(n,10)}}item(e){var t,n,r=Object(o.qs)(e,"a"),i=r.getAttribute("href")||"",s=r.textContent||"",a=parseInt(s);return-1!=i.indexOf("epubcfi")?(n=(t=i.split("#"))[0],{cfi:t.length>1&&t[1],href:i,packageUrl:n,page:a}):{href:i,page:a}}process(e){e.forEach((function(e){this.pages.push(e.page),e.cfi&&this.locations.push(e.cfi)}),this),this.firstPage=parseInt(this.pages[0]),this.lastPage=parseInt(this.pages[this.pages.length-1]),this.totalPages=this.lastPage-this.firstPage}pageFromCfi(e){var t=-1;if(0===this.locations.length)return-1;var n=Object(o.indexOfSorted)(e,this.locations,this.epubcfi.compare);return-1!=n?t=this.pages[n]:void 0!==(t=(n=Object(o.locationOf)(e,this.locations,this.epubcfi.compare))-1>=0?this.pages[n-1]:this.pages[0])||(t=-1),t}cfiFromPage(e){var t=-1;"number"!=typeof e&&(e=parseInt(e));var n=this.pages.indexOf(e);return-1!=n&&(t=this.locations[n]),t}pageFromPercentage(e){return Math.round(this.totalPages*e)}percentageFromPage(e){var t=(e-this.firstPage)/this.totalPages;return Math.round(1e3*t)/1e3}percentageFromCfi(e){var t=this.pageFromCfi(e);return this.percentageFromPage(t)}destroy(){this.pages=void 0,this.locations=void 0,this.epubcfi=void 0,this.pageList=void 0,this.toc=void 0,this.ncx=void 0}},O=n(14),I=n(38),R=n.n(I);var A=class{constructor(){this.zip=void 0,this.urlCache={},this.checkRequirements()}checkRequirements(){try{this.zip=new R.a}catch(e){throw new Error("JSZip lib not loaded")}}open(e,t){return this.zip.loadAsync(e,{base64:t})}openUrl(e,t){return h(e,"binary").then(function(e){return this.zip.loadAsync(e,{base64:t})}.bind(this))}request(e,t){var n,r=new o.defer,i=new a.a(e);return t||(t=i.extension),(n="blob"==t?this.getBlob(e):this.getText(e))?n.then(function(e){let n=this.handleResponse(e,t);r.resolve(n)}.bind(this)):r.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),r.promise}handleResponse(e,t){return"json"==t?JSON.parse(e):Object(o.isXml)(t)?Object(o.parse)(e,"text/xml"):"xhtml"==t?Object(o.parse)(e,"application/xhtml+xml"):"html"==t||"htm"==t?Object(o.parse)(e,"text/html"):e}getBlob(e,t){var n=window.decodeURIComponent(e.substr(1)),r=this.zip.file(n);if(r)return t=t||T.lookup(r.name),r.async("uint8array").then((function(e){return new Blob([e],{type:t})}))}getText(e,t){var n=window.decodeURIComponent(e.substr(1)),r=this.zip.file(n);if(r)return r.async("string").then((function(e){return e}))}getBase64(e,t){var n=window.decodeURIComponent(e.substr(1)),r=this.zip.file(n);if(r)return t=t||T.lookup(r.name),r.async("base64").then((function(e){return"data:"+t+";base64,"+e}))}createUrl(e,t){var n,r,i=new o.defer,s=window.URL||window.webkitURL||window.mozURL,a=t&&t.base64;return e in this.urlCache?(i.resolve(this.urlCache[e]),i.promise):(a?(r=this.getBase64(e))&&r.then(function(t){this.urlCache[e]=t,i.resolve(t)}.bind(this)):(r=this.getBlob(e))&&r.then(function(t){n=s.createObjectURL(t),this.urlCache[e]=n,i.resolve(n)}.bind(this)),r||i.reject({message:"File not found in the epub: "+e,stack:(new Error).stack}),i.promise)}revokeUrl(e){var t=window.URL||window.webkitURL||window.mozURL,n=this.urlCache[e];n&&t.revokeObjectURL(n)}destroy(){var e=window.URL||window.webkitURL||window.mozURL;for(let t in this.urlCache)e.revokeObjectURL(t);this.zip=void 0,this.urlCache={}}},P=n(29),z=n.n(P);class L{constructor(e,t,n){this.urlCache={},this.storage=void 0,this.name=e,this.requester=t||h,this.resolver=n,this.online=!0,this.checkRequirements(),this.addListeners()}checkRequirements(){try{let e;void 0===z.a&&(e=z.a),this.storage=e.createInstance({name:this.name})}catch(e){throw new Error("localForage lib not loaded")}}addListeners(){this._status=this.status.bind(this),window.addEventListener("online",this._status),window.addEventListener("offline",this._status)}removeListeners(){window.removeEventListener("online",this._status),window.removeEventListener("offline",this._status),this._status=void 0}status(e){let t=navigator.onLine;this.online=t,t?this.emit("online",this):this.emit("offline",this)}add(e,t){let n=e.resources.map(e=>{let{href:n}=e,r=this.resolver(n),i=window.encodeURIComponent(r);return this.storage.getItem(i).then(e=>!e||t?this.requester(r,"binary").then(e=>this.storage.setItem(i,e)):e)});return Promise.all(n)}put(e,t,n){let r=window.encodeURIComponent(e);return this.storage.getItem(r).then(i=>i||this.requester(e,"binary",t,n).then(e=>this.storage.setItem(r,e)))}request(e,t,n,r){return this.online?this.requester(e,t,n,r).then(t=>(this.put(e),t)):this.retrieve(e,t)}retrieve(e,t){new o.defer;var n=new a.a(e);return t||(t=n.extension),("blob"==t?this.getBlob(e):this.getText(e)).then(n=>{var r,i=new o.defer;return n?(r=this.handleResponse(n,t),i.resolve(r)):i.reject({message:"File not found in storage: "+e,stack:(new Error).stack}),i.promise})}handleResponse(e,t){return"json"==t?JSON.parse(e):Object(o.isXml)(t)?Object(o.parse)(e,"text/xml"):"xhtml"==t?Object(o.parse)(e,"application/xhtml+xml"):"html"==t||"htm"==t?Object(o.parse)(e,"text/html"):e}getBlob(e,t){let n=window.encodeURIComponent(e);return this.storage.getItem(n).then((function(n){if(n)return t=t||T.lookup(e),new Blob([n],{type:t})}))}getText(e,t){let n=window.encodeURIComponent(e);return t=t||T.lookup(e),this.storage.getItem(n).then((function(e){var n,r=new o.defer,i=new FileReader;if(e)return n=new Blob([e],{type:t}),i.addEventListener("loadend",()=>{r.resolve(i.result)}),i.readAsText(n,t),r.promise}))}getBase64(e,t){let n=window.encodeURIComponent(e);return t=t||T.lookup(e),this.storage.getItem(n).then(e=>{var n,r=new o.defer,i=new FileReader;if(e)return n=new Blob([e],{type:t}),i.addEventListener("loadend",()=>{r.resolve(i.result)}),i.readAsDataURL(n,t),r.promise})}createUrl(e,t){var n,r,i=new o.defer,s=window.URL||window.webkitURL||window.mozURL,a=t&&t.base64;return e in this.urlCache?(i.resolve(this.urlCache[e]),i.promise):(a?(r=this.getBase64(e))&&r.then(function(t){this.urlCache[e]=t,i.resolve(t)}.bind(this)):(r=this.getBlob(e))&&r.then(function(t){n=s.createObjectURL(t),this.urlCache[e]=n,i.resolve(n)}.bind(this)),r||i.reject({message:"File not found in storage: "+e,stack:(new Error).stack}),i.promise)}revokeUrl(e){var t=window.URL||window.webkitURL||window.mozURL,n=this.urlCache[e];n&&t.revokeObjectURL(n)}destroy(){var e=window.URL||window.webkitURL||window.mozURL;for(let t in this.urlCache)e.revokeObjectURL(t);this.urlCache={},this.removeListeners()}}i()(L.prototype);var D=L;var j=class{constructor(e){this.interactive="",this.fixedLayout="",this.openToSpread="",this.orientationLock="",e&&this.parse(e)}parse(e){if(!e)return this;const t=Object(o.qs)(e,"display_options");if(!t)return this;return Object(o.qsa)(t,"option").forEach(e=>{let t="";switch(e.childNodes.length&&(t=e.childNodes[0].nodeValue),e.attributes.name.value){case"interactive":this.interactive=t;break;case"fixed-layout":this.fixedLayout=t;break;case"open-to-spread":this.openToSpread=t;break;case"orientation-lock":this.orientationLock=t}}),this}destroy(){this.interactive=void 0,this.fixedLayout=void 0,this.openToSpread=void 0,this.orientationLock=void 0}};const B="binary",M="base64",F="epub",U="opf",W="json",q="directory";class H{constructor(e,t){void 0===t&&"string"!=typeof e&&e instanceof Blob==!1&&e instanceof ArrayBuffer==!1&&(t=e,e=void 0),this.settings=Object(o.extend)(this.settings||{},{requestMethod:void 0,requestCredentials:void 0,requestHeaders:void 0,encoding:void 0,replacements:void 0,canonical:void 0,openAs:void 0,store:void 0}),Object(o.extend)(this.settings,t),this.opening=new o.defer,this.opened=this.opening.promise,this.isOpen=!1,this.loading={manifest:new o.defer,spine:new o.defer,metadata:new o.defer,cover:new o.defer,navigation:new o.defer,pageList:new o.defer,resources:new o.defer,displayOptions:new o.defer},this.loaded={manifest:this.loading.manifest.promise,spine:this.loading.spine.promise,metadata:this.loading.metadata.promise,cover:this.loading.cover.promise,navigation:this.loading.navigation.promise,pageList:this.loading.pageList.promise,resources:this.loading.resources.promise,displayOptions:this.loading.displayOptions.promise},this.ready=Promise.all([this.loaded.manifest,this.loaded.spine,this.loaded.metadata,this.loaded.cover,this.loaded.navigation,this.loaded.resources,this.loaded.displayOptions]),this.isRendered=!1,this.request=this.settings.requestMethod||h,this.spine=new p,this.locations=new y(this.spine,this.load.bind(this)),this.navigation=void 0,this.pageList=void 0,this.url=void 0,this.path=void 0,this.archived=!1,this.archive=void 0,this.storage=void 0,this.resources=void 0,this.rendition=void 0,this.container=void 0,this.packaging=void 0,this.displayOptions=void 0,this.settings.store&&this.store(this.settings.store),e&&this.open(e,this.settings.openAs).catch(t=>{var n=new Error("Cannot load book at "+e);this.emit(g.c.BOOK.OPEN_FAILED,n)})}open(e,t){var n,r=t||this.determineType(e);return r===B?(this.archived=!0,this.url=new s.a("/",""),n=this.openEpub(e)):r===M?(this.archived=!0,this.url=new s.a("/",""),n=this.openEpub(e,r)):r===F?(this.archived=!0,this.url=new s.a("/",""),n=this.request(e,"binary",this.settings.requestCredentials,this.settings.requestHeaders).then(this.openEpub.bind(this))):r==U?(this.url=new s.a(e),n=this.openPackaging(this.url.Path.toString())):r==W?(this.url=new s.a(e),n=this.openManifest(this.url.Path.toString())):(this.url=new s.a(e),n=this.openContainer("META-INF/container.xml").then(this.openPackaging.bind(this))),n}openEpub(e,t){return this.unarchive(e,t||this.settings.encoding).then(()=>this.openContainer("META-INF/container.xml")).then(e=>this.openPackaging(e))}openContainer(e){return this.load(e).then(e=>(this.container=new _(e),this.resolve(this.container.packagePath)))}openPackaging(e){return this.path=new a.a(e),this.load(e).then(e=>(this.packaging=new x(e),this.unpack(this.packaging)))}openManifest(e){return this.path=new a.a(e),this.load(e).then(e=>(this.packaging=new x,this.packaging.load(e),this.unpack(this.packaging)))}load(e){var t=this.resolve(e);return this.archived?this.archive.request(t):this.request(t,null,this.settings.requestCredentials,this.settings.requestHeaders)}resolve(e,t){if(e){var n=e;return e.indexOf("://")>-1?e:(this.path&&(n=this.path.resolve(e)),0!=t&&this.url&&(n=this.url.resolve(n)),n)}}canonical(e){return e?this.settings.canonical?this.settings.canonical(e):this.resolve(e,!0):""}determineType(e){var t;return"base64"===this.settings.encoding?M:"string"!=typeof e?B:((t=new s.a(e).path().extension)&&(t=t.replace(/\?.*$/,"")),t?"epub"===t?F:"opf"===t?U:"json"===t?W:void 0:q)}unpack(e){this.package=e,""===this.packaging.metadata.layout?this.load(this.url.resolve("META-INF/com.apple.ibooks.display-options.xml")).then(e=>{this.displayOptions=new j(e),this.loading.displayOptions.resolve(this.displayOptions)}).catch(e=>{this.displayOptions=new j,this.loading.displayOptions.resolve(this.displayOptions)}):(this.displayOptions=new j,this.loading.displayOptions.resolve(this.displayOptions)),this.spine.unpack(this.packaging,this.resolve.bind(this),this.canonical.bind(this)),this.resources=new C(this.packaging.manifest,{archive:this.archive,resolver:this.resolve.bind(this),request:this.request.bind(this),replacements:this.settings.replacements||(this.archived?"blobUrl":"base64")}),this.loadNavigation(this.packaging).then(()=>{this.loading.navigation.resolve(this.navigation)}),this.packaging.coverPath&&(this.cover=this.resolve(this.packaging.coverPath)),this.loading.manifest.resolve(this.packaging.manifest),this.loading.metadata.resolve(this.packaging.metadata),this.loading.spine.resolve(this.spine),this.loading.cover.resolve(this.cover),this.loading.resources.resolve(this.resources),this.loading.pageList.resolve(this.pageList),this.isOpen=!0,this.archived||this.settings.replacements&&"none"!=this.settings.replacements?this.replacements().then(()=>{this.loaded.displayOptions.then(()=>{this.opening.resolve(this)})}).catch(e=>{console.error(e)}):this.loaded.displayOptions.then(()=>{this.opening.resolve(this)})}loadNavigation(e){let t=e.navPath||e.ncxPath,n=e.toc;return n?new Promise((t,r)=>{this.navigation=new E(n),e.pageList&&(this.pageList=new N(e.pageList)),t(this.navigation)}):t?this.load(t,"xml").then(e=>(this.navigation=new E(e),this.pageList=new N(e),this.navigation)):new Promise((e,t)=>{this.navigation=new E,this.pageList=new N,e(this.navigation)})}section(e){return this.spine.get(e)}renderTo(e,t){return this.rendition=new O.a(this,t),this.rendition.attachTo(e),this.rendition}setRequestCredentials(e){this.settings.requestCredentials=e}setRequestHeaders(e){this.settings.requestHeaders=e}unarchive(e,t){return this.archive=new A,this.archive.open(e,t)}store(e){let t=this.settings.replacements&&"none"!==this.settings.replacements,n=this.url,r=this.settings.requestMethod||h.bind(this);return this.storage=new D(e,r,this.resolve.bind(this)),this.request=this.storage.request.bind(this.storage),this.opened.then(()=>{this.archived&&(this.storage.requester=this.archive.request.bind(this.archive));let e=(e,t)=>{t.output=this.resources.substitute(e,t.url)};this.resources.settings.replacements=t||"blobUrl",this.resources.replacements().then(()=>this.resources.replaceCss()),this.storage.on("offline",()=>{this.url=new s.a("/",""),this.spine.hooks.serialize.register(e)}),this.storage.on("online",()=>{this.url=n,this.spine.hooks.serialize.deregister(e)})}),this.storage}coverUrl(){return this.loaded.cover.then(()=>this.cover?this.archived?this.archive.createUrl(this.cover):this.cover:null)}replacements(){return this.spine.hooks.serialize.register((e,t)=>{t.output=this.resources.substitute(e,t.url)}),this.resources.replacements().then(()=>this.resources.replaceCss())}getRange(e){var t=new l.a(e),n=this.spine.get(t.spinePos),r=this.load.bind(this);return n?n.load(r).then((function(e){return t.toRange(n.document)})):new Promise((e,t)=>{t("CFI could not be found")})}key(e){var t=e||this.packaging.metadata.identifier||this.url.filename;return`epubjs:${g.b}:${t}`}destroy(){this.opened=void 0,this.loading=void 0,this.loaded=void 0,this.ready=void 0,this.isOpen=!1,this.isRendered=!1,this.spine&&this.spine.destroy(),this.locations&&this.locations.destroy(),this.pageList&&this.pageList.destroy(),this.archive&&this.archive.destroy(),this.resources&&this.resources.destroy(),this.container&&this.container.destroy(),this.packaging&&this.packaging.destroy(),this.rendition&&this.rendition.destroy(),this.displayOptions&&this.displayOptions.destroy(),this.spine=void 0,this.locations=void 0,this.pageList=void 0,this.archive=void 0,this.resources=void 0,this.container=void 0,this.packaging=void 0,this.rendition=void 0,this.navigation=void 0,this.url=void 0,this.path=void 0,this.archived=!1}}i()(H.prototype);t.a=H},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Underline=t.Highlight=t.Mark=t.Pane=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(80)),o=s(n(81));function s(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.Pane=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.body;u(this,e),this.target=t,this.element=i.default.createElement("svg"),this.marks=[],this.element.style.position="absolute",this.element.setAttribute("pointer-events","none"),o.default.proxyMouse(this.target,this.marks),this.container=n,this.container.appendChild(this.element),this.render()}return r(e,[{key:"addMark",value:function(e){var t=i.default.createElement("g");return this.element.appendChild(t),e.bind(t,this.container),this.marks.push(e),e.render(),e}},{key:"removeMark",value:function(e){var t=this.marks.indexOf(e);if(-1!==t){var n=e.unbind();this.element.removeChild(n),this.marks.splice(t,1)}}},{key:"render",value:function(){var e,t,n,r;!function(e,t){e.style.setProperty("top",t.top+"px","important"),e.style.setProperty("left",t.left+"px","important"),e.style.setProperty("height",t.height+"px","important"),e.style.setProperty("width",t.width+"px","important")}(this.element,(e=this.target,t=this.container,n=t.getBoundingClientRect(),r=e.getBoundingClientRect(),{top:r.top-n.top,left:r.left-n.left,height:e.scrollHeight,width:e.scrollWidth}));var i=!0,o=!1,s=void 0;try{for(var a,l=this.marks[Symbol.iterator]();!(i=(a=l.next()).done);i=!0){a.value.render()}}catch(e){o=!0,s=e}finally{try{!i&&l.return&&l.return()}finally{if(o)throw s}}}}]),e}();var c=t.Mark=function(){function e(){u(this,e),this.element=null}return r(e,[{key:"bind",value:function(e,t){this.element=e,this.container=t}},{key:"unbind",value:function(){var e=this.element;return this.element=null,e}},{key:"render",value:function(){}},{key:"dispatchEvent",value:function(e){this.element&&this.element.dispatchEvent(e)}},{key:"getBoundingClientRect",value:function(){return this.element.getBoundingClientRect()}},{key:"getClientRects",value:function(){for(var e=[],t=this.element.firstChild;t;)e.push(t.getBoundingClientRect()),t=t.nextSibling;return e}},{key:"filteredRanges",value:function(){var e=Array.from(this.range.getClientRects());return e.filter((function(t){for(var n=0;n<e.length;n++){if(e[n]===t)return!0;if(r=e[n],(i=t).right<=r.right&&i.left>=r.left&&i.top>=r.top&&i.bottom<=r.bottom)return!1}var r,i;return!0}))}}]),e}(),h=t.Highlight=function(e){function t(e,n,r,i){u(this,t);var o=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.range=e,o.className=n,o.data=r||{},o.attributes=i||{},o}return l(t,e),r(t,[{key:"bind",value:function(e,n){for(var r in function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var s=i.get;return void 0!==s?s.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"bind",this).call(this,e,n),this.data)this.data.hasOwnProperty(r)&&(this.element.dataset[r]=this.data[r]);for(var r in this.attributes)this.attributes.hasOwnProperty(r)&&this.element.setAttribute(r,this.attributes[r]);this.className&&this.element.classList.add(this.className)}},{key:"render",value:function(){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);for(var e=this.element.ownerDocument.createDocumentFragment(),t=this.filteredRanges(),n=this.element.getBoundingClientRect(),r=this.container.getBoundingClientRect(),o=0,s=t.length;o<s;o++){var a=t[o],l=i.default.createElement("rect");l.setAttribute("x",a.left-n.left+r.left),l.setAttribute("y",a.top-n.top+r.top),l.setAttribute("height",a.height),l.setAttribute("width",a.width),e.appendChild(l)}this.element.appendChild(e)}}]),t}(c);t.Underline=function(e){function t(e,n,r,i){return u(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,r,i))}return l(t,e),r(t,[{key:"render",value:function(){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);for(var e=this.element.ownerDocument.createDocumentFragment(),t=this.filteredRanges(),n=this.element.getBoundingClientRect(),r=this.container.getBoundingClientRect(),o=0,s=t.length;o<s;o++){var a=t[o],l=i.default.createElement("rect");l.setAttribute("x",a.left-n.left+r.left),l.setAttribute("y",a.top-n.top+r.top),l.setAttribute("height",a.height),l.setAttribute("width",a.width),l.setAttribute("fill","none");var u=i.default.createElement("line");u.setAttribute("x1",a.left-n.left+r.left),u.setAttribute("x2",a.left-n.left+r.left+a.width),u.setAttribute("y1",a.top-n.top+r.top+a.height-1),u.setAttribute("y2",a.top-n.top+r.top+a.height-1),u.setAttribute("stroke-width",1),u.setAttribute("stroke","black"),u.setAttribute("stroke-linecap","square"),e.appendChild(l),e.appendChild(u)}this.element.appendChild(e)}}]),t}(h)},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var h=a(c),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(s[h].references++,s[h].updater(d)):s.push({identifier:c,updater:g(d,t),references:1}),r.push(c)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,h=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,m=0;function g(e,t){var n,r,i;if(t.singleton){var o=m++;n=p||(p=u(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=u(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=a(n[r]);s[i].references--}for(var o=l(e,t),u=0;u<n.length;u++){var c=a(n[u]);0===s[c].references&&(s[c].updater(),s.splice(c,1))}n=o}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var s,a,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";var r=n(0),i=n(1),o=n(3),s=n.n(o);class a{constructor(e){this.settings=e,this.name=e.layout||"reflowable",this._spread="none"!==e.spread,this._minSpreadWidth=e.minSpreadWidth||800,this._evenSpreads=e.evenSpreads||!1,"scrolled"===e.flow||"scrolled-continuous"===e.flow||"scrolled-doc"===e.flow?this._flow="scrolled":this._flow="paginated",this.width=0,this.height=0,this.spreadWidth=0,this.delta=0,this.columnWidth=0,this.gap=0,this.divisor=1,this.props={name:this.name,spread:this._spread,flow:this._flow,width:0,height:0,spreadWidth:0,delta:0,columnWidth:0,gap:0,divisor:1}}flow(e){return void 0!==e&&(this._flow="scrolled"===e||"scrolled-continuous"===e||"scrolled-doc"===e?"scrolled":"paginated",this.update({flow:this._flow})),this._flow}spread(e,t){return e&&(this._spread="none"!==e,this.update({spread:this._spread})),t>=0&&(this._minSpreadWidth=t),this._spread}calculate(e,t,n){var r,i,o,s,a=1,l=n||0,u=e,c=t,h=Math.floor(u/12);a=this._spread&&u>=this._minSpreadWidth?2:1,"reflowable"!==this.name||"paginated"!==this._flow||n>=0||(l=h%2==0?h:h-1),"pre-paginated"===this.name&&(l=0),a>1?o=(r=u/a-l)+l:(r=u,o=u),"pre-paginated"===this.name&&a>1&&(u=r),i=r*a+l,s=u,this.width=u,this.height=c,this.spreadWidth=i,this.pageWidth=o,this.delta=s,this.columnWidth=r,this.gap=l,this.divisor=a,this.update({width:u,height:c,spreadWidth:i,pageWidth:o,delta:s,columnWidth:r,gap:l,divisor:a})}format(e,t,n){return"pre-paginated"===this.name?e.fit(this.columnWidth,this.height,t):"paginated"===this._flow?e.columns(this.width,this.height,this.columnWidth,this.gap,this.settings.direction):n&&"horizontal"===n?e.size(null,this.height):e.size(this.width,null)}count(e,t){let n,r;return"pre-paginated"===this.name?(n=1,r=1):"paginated"===this._flow?(t=t||this.delta,n=Math.ceil(e/t),r=n*this.divisor):(t=t||this.height,n=Math.ceil(e/t),r=n),{spreads:n,pages:r}}update(e){if(Object.keys(e).forEach(t=>{this.props[t]===e[t]&&delete e[t]}),Object.keys(e).length>0){let t=Object(r.extend)(this.props,e);this.emit(i.c.LAYOUT.UPDATED,t,e)}}}s()(a.prototype),t.a=a},function(e,t,n){function r(e){this.options=e||{locator:{}}}function i(){this.cdata=!1}function o(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function s(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function a(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function l(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}r.prototype.parseFromString=function(e,t){var n=this.options,r=new c,o=n.domBuilder||new i,a=n.errorHandler,l=n.locator,h=n.xmlns||{},d=/\/x?html?$/.test(t),f=d?u.entityMap:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return l&&o.setDocumentLocator(l),r.errorHandler=function(e,t,n){if(!e){if(t instanceof i)return t;e=t}var r={},o=e instanceof Function;function a(t){var i=e[t];!i&&o&&(i=2==e.length?function(n){e(t,n)}:e),r[t]=i&&function(e){i("[xmldom "+t+"]\t"+e+s(n))}||function(){}}return n=n||{},a("warning"),a("error"),a("fatalError"),r}(a,o,l),r.domBuilder=n.domBuilder||o,d&&(h[""]="http://www.w3.org/1999/xhtml"),h.xml=h.xml||"http://www.w3.org/XML/1998/namespace",e?r.parse(e,h,f):r.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new h).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var i=this.doc,s=i.createElementNS(e,n||t),a=r.length;l(this,s),this.currentElement=s,this.locator&&o(this.locator,s);for(var u=0;u<a;u++){e=r.getURI(u);var c=r.getValue(u),h=(n=r.getQName(u),i.createAttributeNS(e,n));this.locator&&o(r.getLocator(u),h),h.value=h.nodeValue=c,s.setAttributeNode(h)}},endElement:function(e,t,n){var r=this.currentElement;r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&o(this.locator,n),l(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=a.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(e);else r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&o(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=a.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&o(this.locator,r),l(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(e,t,n);this.locator&&o(this.locator,i),l(this,i)}},warning:function(e){console.warn("[xmldom warning]\t"+e,s(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,s(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,s(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(e){i.prototype[e]=function(){return null}}));var u=n(78),c=n(79).XMLReader,h=t.DOMImplementation=n(34).DOMImplementation;t.XMLSerializer=n(34).XMLSerializer,t.DOMParser=r},function(e,t,n){"use strict";var r=n(71)();e.exports=function(e){return e!==r&&null!==e}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var r=n(3),i=n.n(r),o=n(0),s=n(2),a=n(13),l=n(1),u=n(19);class c{constructor(e,t){this.settings=Object(o.extend)({ignoreClass:"",axis:void 0,direction:void 0,width:0,height:0,layout:void 0,globalLayoutProperties:{},method:void 0,forceRight:!1},t||{}),this.id="epubjs-view-"+Object(o.uuid)(),this.section=e,this.index=e.index,this.element=this.container(this.settings.axis),this.added=!1,this.displayed=!1,this.rendered=!1,this.fixedWidth=0,this.fixedHeight=0,this.epubcfi=new s.a,this.layout=this.settings.layout,this.pane=void 0,this.highlights={},this.underlines={},this.marks={}}container(e){var t=document.createElement("div");return t.classList.add("epub-view"),t.style.height="0px",t.style.width="0px",t.style.overflow="hidden",t.style.position="relative",t.style.display="block",t.style.flex=e&&"horizontal"==e?"none":"initial",t}create(){return this.iframe||(this.element||(this.element=this.createContainer()),this.iframe=document.createElement("iframe"),this.iframe.id=this.id,this.iframe.scrolling="no",this.iframe.style.overflow="hidden",this.iframe.seamless="seamless",this.iframe.style.border="none",this.iframe.setAttribute("enable-annotation","true"),this.resizing=!0,this.element.style.visibility="hidden",this.iframe.style.visibility="hidden",this.iframe.style.width="0",this.iframe.style.height="0",this._width=0,this._height=0,this.element.setAttribute("ref",this.index),this.added=!0,this.elementBounds=Object(o.bounds)(this.element),"srcdoc"in this.iframe?this.supportsSrcdoc=!0:this.supportsSrcdoc=!1,this.settings.method||(this.settings.method=this.supportsSrcdoc?"srcdoc":"write")),this.iframe}render(e,t){return this.create(),this.size(),this.sectionRender||(this.sectionRender=this.section.render(e)),this.sectionRender.then(function(e){return this.load(e)}.bind(this)).then(function(){let e,t=this.contents.writingMode();return e="scrolled"===this.settings.flow?0===t.indexOf("vertical")?"horizontal":"vertical":0===t.indexOf("vertical")?"vertical":"horizontal",0===t.indexOf("vertical")&&"paginated"===this.settings.flow&&(this.layout.delta=this.layout.height),this.setAxis(e),this.emit(l.c.VIEWS.AXIS,e),this.setWritingMode(t),this.emit(l.c.VIEWS.WRITING_MODE,t),this.layout.format(this.contents,this.section,this.axis),this.addListeners(),new Promise((e,t)=>{this.expand(),this.settings.forceRight&&(this.element.style.marginLeft=this.width()+"px"),e()})}.bind(this),function(e){return this.emit(l.c.VIEWS.LOAD_ERROR,e),new Promise((t,n)=>{n(e)})}.bind(this)).then(function(){this.emit(l.c.VIEWS.RENDERED,this.section)}.bind(this))}reset(){this.iframe&&(this.iframe.style.width="0",this.iframe.style.height="0",this._width=0,this._height=0,this._textWidth=void 0,this._contentWidth=void 0,this._textHeight=void 0,this._contentHeight=void 0),this._needsReframe=!0}size(e,t){var n=e||this.settings.width,r=t||this.settings.height;"pre-paginated"===this.layout.name?this.lock("both",n,r):"horizontal"===this.settings.axis?this.lock("height",n,r):this.lock("width",n,r),this.settings.width=n,this.settings.height=r}lock(e,t,n){var r,i=Object(o.borders)(this.element);r=this.iframe?Object(o.borders)(this.iframe):{width:0,height:0},"width"==e&&Object(o.isNumber)(t)&&(this.lockedWidth=t-i.width-r.width),"height"==e&&Object(o.isNumber)(n)&&(this.lockedHeight=n-i.height-r.height),"both"===e&&Object(o.isNumber)(t)&&Object(o.isNumber)(n)&&(this.lockedWidth=t-i.width-r.width,this.lockedHeight=n-i.height-r.height),this.displayed&&this.iframe&&this.expand()}expand(e){var t,n=this.lockedWidth,r=this.lockedHeight;this.iframe&&!this._expanding&&(this._expanding=!0,"pre-paginated"===this.layout.name?(n=this.layout.columnWidth,r=this.layout.height):"horizontal"===this.settings.axis?((n=this.contents.textWidth())%this.layout.pageWidth>0&&(n=Math.ceil(n/this.layout.pageWidth)*this.layout.pageWidth),this.settings.forceEvenPages&&(t=n/this.layout.pageWidth,this.layout.divisor>1&&"reflowable"===this.layout.name&&t%2>0&&(n+=this.layout.pageWidth))):"vertical"===this.settings.axis&&(r=this.contents.textHeight(),"paginated"===this.settings.flow&&r%this.layout.height>0&&(r=Math.ceil(r/this.layout.height)*this.layout.height)),(this._needsReframe||n!=this._width||r!=this._height)&&this.reframe(n,r),this._expanding=!1)}reframe(e,t){var n;Object(o.isNumber)(e)&&(this.element.style.width=e+"px",this.iframe.style.width=e+"px",this._width=e),Object(o.isNumber)(t)&&(this.element.style.height=t+"px",this.iframe.style.height=t+"px",this._height=t),n={width:e,height:t,widthDelta:this.prevBounds?e-this.prevBounds.width:e,heightDelta:this.prevBounds?t-this.prevBounds.height:t},this.pane&&this.pane.render(),requestAnimationFrame(()=>{let e;for(let t in this.marks)this.marks.hasOwnProperty(t)&&(e=this.marks[t],this.placeMark(e.element,e.range))}),this.onResize(this,n),this.emit(l.c.VIEWS.RESIZED,n),this.prevBounds=n,this.elementBounds=Object(o.bounds)(this.element)}load(e){var t=new o.defer,n=t.promise;if(!this.iframe)return t.reject(new Error("No Iframe Available")),n;if(this.iframe.onload=function(e){this.onLoad(e,t)}.bind(this),"blobUrl"===this.settings.method)this.blobUrl=Object(o.createBlobUrl)(e,"application/xhtml+xml"),this.iframe.src=this.blobUrl,this.element.appendChild(this.iframe);else if("srcdoc"===this.settings.method)this.iframe.srcdoc=e,this.element.appendChild(this.iframe);else{if(this.element.appendChild(this.iframe),this.document=this.iframe.contentDocument,!this.document)return t.reject(new Error("No Document Available")),n;if(this.iframe.contentDocument.open(),window.MSApp&&MSApp.execUnsafeLocalFunction){var r=this;MSApp.execUnsafeLocalFunction((function(){r.iframe.contentDocument.write(e)}))}else this.iframe.contentDocument.write(e);this.iframe.contentDocument.close()}return n}onLoad(e,t){this.window=this.iframe.contentWindow,this.document=this.iframe.contentDocument,this.contents=new a.a(this.document,this.document.body,this.section.cfiBase,this.section.index),this.rendering=!1;var n=this.document.querySelector("link[rel='canonical']");n?n.setAttribute("href",this.section.canonical):((n=this.document.createElement("link")).setAttribute("rel","canonical"),n.setAttribute("href",this.section.canonical),this.document.querySelector("head").appendChild(n)),this.contents.on(l.c.CONTENTS.EXPAND,()=>{this.displayed&&this.iframe&&(this.expand(),this.contents&&this.layout.format(this.contents))}),this.contents.on(l.c.CONTENTS.RESIZE,e=>{this.displayed&&this.iframe&&(this.expand(),this.contents&&this.layout.format(this.contents))}),t.resolve(this.contents)}setLayout(e){this.layout=e,this.contents&&(this.layout.format(this.contents),this.expand())}setAxis(e){this.settings.axis=e,this.element.style.flex="horizontal"==e?"none":"initial",this.size()}setWritingMode(e){this.writingMode=e}addListeners(){}removeListeners(e){}display(e){var t=new o.defer;return this.displayed?t.resolve(this):this.render(e).then(function(){this.emit(l.c.VIEWS.DISPLAYED,this),this.onDisplayed(this),this.displayed=!0,t.resolve(this)}.bind(this),(function(e){t.reject(e,this)})),t.promise}show(){this.element.style.visibility="visible",this.iframe&&(this.iframe.style.visibility="visible",this.iframe.style.transform="translateZ(0)",this.iframe.offsetWidth,this.iframe.style.transform=null),this.emit(l.c.VIEWS.SHOWN,this)}hide(){this.element.style.visibility="hidden",this.iframe.style.visibility="hidden",this.stopExpanding=!0,this.emit(l.c.VIEWS.HIDDEN,this)}offset(){return{top:this.element.offsetTop,left:this.element.offsetLeft}}width(){return this._width}height(){return this._height}position(){return this.element.getBoundingClientRect()}locationOf(e){this.iframe.getBoundingClientRect();var t=this.contents.locationOf(e,this.settings.ignoreClass);return{left:t.left,top:t.top}}onDisplayed(e){}onResize(e,t){}bounds(e){return!e&&this.elementBounds||(this.elementBounds=Object(o.bounds)(this.element)),this.elementBounds}highlight(e,t={},n,r="epubjs-hl",i={}){if(!this.contents)return;const o=Object.assign({fill:"yellow","fill-opacity":"0.3","mix-blend-mode":"multiply"},i);let s=this.contents.range(e),a=()=>{this.emit(l.c.VIEWS.MARK_CLICKED,e,t)};t.epubcfi=e,this.pane||(this.pane=new u.Pane(this.iframe,this.element));let c=new u.Highlight(s,r,t,o),h=this.pane.addMark(c);return this.highlights[e]={mark:h,element:h.element,listeners:[a,n]},h.element.setAttribute("ref",r),h.element.addEventListener("click",a),h.element.addEventListener("touchstart",a),n&&(h.element.addEventListener("click",n),h.element.addEventListener("touchstart",n)),h}underline(e,t={},n,r="epubjs-ul",i={}){if(!this.contents)return;const o=Object.assign({stroke:"black","stroke-opacity":"0.3","mix-blend-mode":"multiply"},i);let s=this.contents.range(e),a=()=>{this.emit(l.c.VIEWS.MARK_CLICKED,e,t)};t.epubcfi=e,this.pane||(this.pane=new u.Pane(this.iframe,this.element));let c=new u.Underline(s,r,t,o),h=this.pane.addMark(c);return this.underlines[e]={mark:h,element:h.element,listeners:[a,n]},h.element.setAttribute("ref",r),h.element.addEventListener("click",a),h.element.addEventListener("touchstart",a),n&&(h.element.addEventListener("click",n),h.element.addEventListener("touchstart",n)),h}mark(e,t={},n){if(!this.contents)return;if(e in this.marks){return this.marks[e]}let r=this.contents.range(e);if(!r)return;let i=r.commonAncestorContainer,o=1===i.nodeType?i:i.parentNode,s=n=>{this.emit(l.c.VIEWS.MARK_CLICKED,e,t)};r.collapsed&&1===i.nodeType?(r=new Range,r.selectNodeContents(i)):r.collapsed&&(r=new Range,r.selectNodeContents(o));let a=this.document.createElement("a");return a.setAttribute("ref","epubjs-mk"),a.style.position="absolute",a.dataset.epubcfi=e,t&&Object.keys(t).forEach(e=>{a.dataset[e]=t[e]}),n&&(a.addEventListener("click",n),a.addEventListener("touchstart",n)),a.addEventListener("click",s),a.addEventListener("touchstart",s),this.placeMark(a,r),this.element.appendChild(a),this.marks[e]={element:a,range:r,listeners:[s,n]},o}placeMark(e,t){let n,r,i;if("pre-paginated"===this.layout.name||"horizontal"!==this.settings.axis){let e=t.getBoundingClientRect();n=e.top,r=e.right}else{let e,s=t.getClientRects();for(var o=0;o!=s.length;o++)e=s[o],(!i||e.left<i)&&(i=e.left,r=Math.ceil(i/this.layout.props.pageWidth)*this.layout.props.pageWidth-this.layout.gap/2,n=e.top)}e.style.top=n+"px",e.style.left=r+"px"}unhighlight(e){let t;e in this.highlights&&(t=this.highlights[e],this.pane.removeMark(t.mark),t.listeners.forEach(e=>{e&&(t.element.removeEventListener("click",e),t.element.removeEventListener("touchstart",e))}),delete this.highlights[e])}ununderline(e){let t;e in this.underlines&&(t=this.underlines[e],this.pane.removeMark(t.mark),t.listeners.forEach(e=>{e&&(t.element.removeEventListener("click",e),t.element.removeEventListener("touchstart",e))}),delete this.underlines[e])}unmark(e){let t;e in this.marks&&(t=this.marks[e],this.element.removeChild(t.element),t.listeners.forEach(e=>{e&&(t.element.removeEventListener("click",e),t.element.removeEventListener("touchstart",e))}),delete this.marks[e])}destroy(){for(let e in this.highlights)this.unhighlight(e);for(let e in this.underlines)this.ununderline(e);for(let e in this.marks)this.unmark(e);this.blobUrl&&Object(o.revokeBlobUrl)(this.blobUrl),this.displayed&&(this.displayed=!1,this.removeListeners(),this.contents.destroy(),this.stopExpanding=!0,this.element.removeChild(this.iframe),this.iframe=void 0,this.contents=void 0,this._textWidth=null,this._textHeight=null,this._width=null,this._height=null)}}i()(c.prototype),t.a=c},function(e,t,n){var r=n(25),i=n(82),o=n(84),s=Math.max,a=Math.min;e.exports=function(e,t,n){var l,u,c,h,d,f,p=0,m=!1,g=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(t){var n=l,r=u;return l=u=void 0,p=t,h=e.apply(r,n)}function b(e){return p=e,d=setTimeout(_,t),m?y(e):h}function w(e){var n=e-f;return void 0===f||n>=t||n<0||g&&e-p>=c}function _(){var e=i();if(w(e))return x(e);d=setTimeout(_,function(e){var n=t-(e-f);return g?a(n,c-(e-p)):n}(e))}function x(e){return d=void 0,v&&l?y(e):(l=u=void 0,h)}function E(){var e=i(),n=w(e);if(l=arguments,u=this,f=e,n){if(void 0===d)return b(f);if(g)return clearTimeout(d),d=setTimeout(_,t),y(f)}return void 0===d&&(d=setTimeout(_,t)),h}return t=o(t)||0,r(n)&&(m=!!n.leading,c=(g="maxWait"in n)?s(o(n.maxWait)||0,t):c,v="trailing"in n?!!n.trailing:v),E.cancel=function(){void 0!==d&&clearTimeout(d),p=0,l=f=u=d=void 0},E.flush=function(){return void 0===d?h:x(i())},E}},function(e,t,n){"use strict";var r=n(0),i=n(16),o=n(1),s=n(3),a=n.n(s);const l=Math.PI/2,u={easeOutSine:function(e){return Math.sin(e*l)},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInOutQuint:function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)},easeInCubic:function(e){return Math.pow(e,3)}};class c{constructor(e,t){this.settings=Object(r.extend)({duration:80,minVelocity:.2,minDistance:10,easing:u.easeInCubic},t||{}),this.supportsTouch=this.supportsTouch(),this.supportsTouch&&this.setup(e)}setup(e){this.manager=e,this.layout=this.manager.layout,this.fullsize=this.manager.settings.fullsize,this.fullsize?(this.element=this.manager.stage.element,this.scroller=window,this.disableScroll()):(this.element=this.manager.stage.container,this.scroller=this.element,this.element.style.WebkitOverflowScrolling="touch"),this.manager.settings.offset=this.layout.width,this.manager.settings.afterScrolledTimeout=2*this.settings.duration,this.isVertical="vertical"===this.manager.settings.axis,this.manager.isPaginated&&!this.isVertical&&(this.touchCanceler=!1,this.resizeCanceler=!1,this.snapping=!1,this.scrollLeft,this.scrollTop,this.startTouchX=void 0,this.startTouchY=void 0,this.startTime=void 0,this.endTouchX=void 0,this.endTouchY=void 0,this.endTime=void 0,this.addListeners())}supportsTouch(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}disableScroll(){this.element.style.overflow="hidden"}enableScroll(){this.element.style.overflow=""}addListeners(){this._onResize=this.onResize.bind(this),window.addEventListener("resize",this._onResize),this._onScroll=this.onScroll.bind(this),this.scroller.addEventListener("scroll",this._onScroll),this._onTouchStart=this.onTouchStart.bind(this),this.scroller.addEventListener("touchstart",this._onTouchStart,{passive:!0}),this.on("touchstart",this._onTouchStart),this._onTouchMove=this.onTouchMove.bind(this),this.scroller.addEventListener("touchmove",this._onTouchMove,{passive:!0}),this.on("touchmove",this._onTouchMove),this._onTouchEnd=this.onTouchEnd.bind(this),this.scroller.addEventListener("touchend",this._onTouchEnd,{passive:!0}),this.on("touchend",this._onTouchEnd),this._afterDisplayed=this.afterDisplayed.bind(this),this.manager.on(o.c.MANAGERS.ADDED,this._afterDisplayed)}removeListeners(){window.removeEventListener("resize",this._onResize),this._onResize=void 0,this.scroller.removeEventListener("scroll",this._onScroll),this._onScroll=void 0,this.scroller.removeEventListener("touchstart",this._onTouchStart,{passive:!0}),this.off("touchstart",this._onTouchStart),this._onTouchStart=void 0,this.scroller.removeEventListener("touchmove",this._onTouchMove,{passive:!0}),this.off("touchmove",this._onTouchMove),this._onTouchMove=void 0,this.scroller.removeEventListener("touchend",this._onTouchEnd,{passive:!0}),this.off("touchend",this._onTouchEnd),this._onTouchEnd=void 0,this.manager.off(o.c.MANAGERS.ADDED,this._afterDisplayed),this._afterDisplayed=void 0}afterDisplayed(e){let t=e.contents;["touchstart","touchmove","touchend"].forEach(e=>{t.on(e,e=>this.triggerViewEvent(e,t))})}triggerViewEvent(e,t){this.emit(e.type,e,t)}onScroll(e){this.scrollLeft=this.fullsize?window.scrollX:this.scroller.scrollLeft,this.scrollTop=this.fullsize?window.scrollY:this.scroller.scrollTop}onResize(e){this.resizeCanceler=!0}onTouchStart(e){let{screenX:t,screenY:n}=e.touches[0];this.fullsize&&this.enableScroll(),this.touchCanceler=!0,this.startTouchX||(this.startTouchX=t,this.startTouchY=n,this.startTime=this.now()),this.endTouchX=t,this.endTouchY=n,this.endTime=this.now()}onTouchMove(e){let{screenX:t,screenY:n}=e.touches[0],r=Math.abs(n-this.endTouchY);this.touchCanceler=!0,!this.fullsize&&r<10&&(this.element.scrollLeft-=t-this.endTouchX),this.endTouchX=t,this.endTouchY=n,this.endTime=this.now()}onTouchEnd(e){this.fullsize&&this.disableScroll(),this.touchCanceler=!1;let t=this.wasSwiped();0!==t?this.snap(t):this.snap(),this.startTouchX=void 0,this.startTouchY=void 0,this.startTime=void 0,this.endTouchX=void 0,this.endTouchY=void 0,this.endTime=void 0}wasSwiped(){let e=this.layout.pageWidth*this.layout.divisor,t=this.endTouchX-this.startTouchX,n=Math.abs(t),r=t/(this.endTime-this.startTime),i=this.settings.minVelocity;return n<=this.settings.minDistance||n>=e?0:r>i?-1:r<-i?1:void 0}needsSnap(){return this.scrollLeft%(this.layout.pageWidth*this.layout.divisor)!=0}snap(e=0){let t=this.scrollLeft,n=this.layout.pageWidth*this.layout.divisor,r=Math.round(t/n)*n;return e&&(r+=e*n),this.smoothScrollTo(r)}smoothScrollTo(e){const t=new r.defer,n=this.scrollLeft,i=this.now(),o=this.settings.duration,s=this.settings.easing;return this.snapping=!0,function r(){const a=this.now(),l=Math.min(1,(a-i)/o);if(s(l),this.touchCanceler||this.resizeCanceler)return this.resizeCanceler=!1,this.snapping=!1,void t.resolve();l<1?(window.requestAnimationFrame(r.bind(this)),this.scrollTo(n+(e-n)*l,0)):(this.scrollTo(e,0),this.snapping=!1,t.resolve())}.call(this),t.promise}scrollTo(e=0,t=0){this.fullsize?window.scroll(e,t):(this.scroller.scrollLeft=e,this.scroller.scrollTop=t)}now(){return"now"in window.performance?performance.now():(new Date).getTime()}destroy(){this.scroller&&(this.fullsize&&this.enableScroll(),this.removeListeners(),this.scroller=void 0)}}a()(c.prototype);var h=c,d=n(27),f=n.n(d);class p extends i.a{constructor(e){super(e),this.name="continuous",this.settings=Object(r.extend)(this.settings||{},{infinite:!0,overflow:void 0,axis:void 0,writingMode:void 0,flow:"scrolled",offset:500,offsetDelta:250,width:void 0,height:void 0,snap:!1,afterScrolledTimeout:10}),Object(r.extend)(this.settings,e.settings||{}),"undefined"!=e.settings.gap&&0===e.settings.gap&&(this.settings.gap=e.settings.gap),this.viewSettings={ignoreClass:this.settings.ignoreClass,axis:this.settings.axis,flow:this.settings.flow,layout:this.layout,width:0,height:0,forceEvenPages:!1},this.scrollTop=0,this.scrollLeft=0}display(e,t){return i.a.prototype.display.call(this,e,t).then(function(){return this.fill()}.bind(this))}fill(e){var t=e||new r.defer;return this.q.enqueue(()=>this.check()).then(e=>{e?this.fill(t):t.resolve()}),t.promise}moveTo(e){var t=0,n=0;this.isPaginated?(t=Math.floor(e.left/this.layout.delta)*this.layout.delta,this.settings.offsetDelta):(n=e.top,e.top,this.settings.offsetDelta),(t>0||n>0)&&this.scrollBy(t,n,!0)}afterResized(e){this.emit(o.c.MANAGERS.RESIZE,e.section)}removeShownListeners(e){e.onDisplayed=function(){}}add(e){var t=this.createView(e);return this.views.append(t),t.on(o.c.VIEWS.RESIZED,e=>{t.expanded=!0}),t.on(o.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),t.on(o.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),t.onDisplayed=this.afterDisplayed.bind(this),t.onResize=this.afterResized.bind(this),t.display(this.request)}append(e){var t=this.createView(e);return t.on(o.c.VIEWS.RESIZED,e=>{t.expanded=!0}),t.on(o.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),t.on(o.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),this.views.append(t),t.onDisplayed=this.afterDisplayed.bind(this),t}prepend(e){var t=this.createView(e);return t.on(o.c.VIEWS.RESIZED,e=>{this.counter(e),t.expanded=!0}),t.on(o.c.VIEWS.AXIS,e=>{this.updateAxis(e)}),t.on(o.c.VIEWS.WRITING_MODE,e=>{this.updateWritingMode(e)}),this.views.prepend(t),t.onDisplayed=this.afterDisplayed.bind(this),t}counter(e){"vertical"===this.settings.axis?this.scrollBy(0,e.heightDelta,!0):this.scrollBy(e.widthDelta,0,!0)}update(e){for(var t,n=this.bounds(),i=this.views.all(),o=i.length,s=[],a=void 0!==e?e:this.settings.offset||0,l=new r.defer,u=[],c=0;c<o;c++)if(t=i[c],!0===this.isVisible(t,a,a,n)){if(t.displayed)t.show();else{let e=t.display(this.request).then((function(e){e.show()}),e=>{t.hide()});u.push(e)}s.push(t)}else this.q.enqueue(t.destroy.bind(t)),clearTimeout(this.trimTimeout),this.trimTimeout=setTimeout(function(){this.q.enqueue(this.trim.bind(this))}.bind(this),250);return u.length?Promise.all(u).catch(e=>{l.reject(e)}):(l.resolve(),l.promise)}check(e,t){var n=new r.defer,i=[],o="horizontal"===this.settings.axis,s=this.settings.offset||0;e&&o&&(s=e),t&&!o&&(s=t);var a=this._bounds;let l=o?this.scrollLeft:this.scrollTop,u=o?Math.floor(a.width):a.height,c=o?this.container.scrollWidth:this.container.scrollHeight,h=this.writingMode&&0===this.writingMode.indexOf("vertical")?"vertical":"horizontal",d=this.settings.rtlScrollType,f="rtl"===this.settings.direction;this.settings.fullsize?(o&&f&&"negative"===d||!o&&f&&"default"===d)&&(l*=-1):(f&&"default"===d&&"horizontal"===h&&(l=c-u-l),f&&"negative"===d&&"horizontal"===h&&(l*=-1));let p=()=>{let e=this.views.first(),t=e&&e.section.prev();t&&i.push(this.prepend(t))},m=l-s;l+u+s>=c&&(()=>{let e=this.views.last(),t=e&&e.section.next();t&&i.push(this.append(t))})(),m<0&&p();let g=i.map(e=>e.display(this.request));return i.length?Promise.all(g).then(()=>this.check()).then(()=>this.update(s),e=>e):(this.q.enqueue(function(){this.update()}.bind(this)),n.resolve(!1),n.promise)}trim(){for(var e=new r.defer,t=this.views.displayed(),n=t[0],i=t[t.length-1],o=this.views.indexOf(n),s=this.views.indexOf(i),a=this.views.slice(0,o),l=this.views.slice(s+1),u=0;u<a.length-1;u++)this.erase(a[u],a);for(var c=1;c<l.length;c++)this.erase(l[c]);return e.resolve(),e.promise}erase(e,t){var n,r;this.settings.fullsize?(n=window.scrollY,r=window.scrollX):(n=this.container.scrollTop,r=this.container.scrollLeft);var i=e.bounds();this.views.remove(e),t&&("vertical"===this.settings.axis?this.scrollTo(0,n-i.height,!0):"rtl"===this.settings.direction?this.settings.fullsize?this.scrollTo(r+Math.floor(i.width),0,!0):this.scrollTo(r,0,!0):this.scrollTo(r-Math.floor(i.width),0,!0))}addEventListeners(e){window.addEventListener("unload",function(e){this.ignore=!0,this.destroy()}.bind(this)),this.addScrollListeners(),this.isPaginated&&this.settings.snap&&(this.snapper=new h(this,this.settings.snap&&"object"==typeof this.settings.snap&&this.settings.snap))}addScrollListeners(){var e;this.tick=r.requestAnimationFrame;let t="rtl"===this.settings.direction&&"default"===this.settings.rtlScrollType?-1:1;this.scrollDeltaVert=0,this.scrollDeltaHorz=0,this.settings.fullsize?(e=window,this.scrollTop=window.scrollY*t,this.scrollLeft=window.scrollX*t):(e=this.container,this.scrollTop=this.container.scrollTop,this.scrollLeft=this.container.scrollLeft),this._onScroll=this.onScroll.bind(this),e.addEventListener("scroll",this._onScroll),this._scrolled=f()(this.scrolled.bind(this),30),this.didScroll=!1}removeEventListeners(){(this.settings.fullsize?window:this.container).removeEventListener("scroll",this._onScroll),this._onScroll=void 0}onScroll(){let e,t,n="rtl"===this.settings.direction&&"default"===this.settings.rtlScrollType?-1:1;this.settings.fullsize?(e=window.scrollY*n,t=window.scrollX*n):(e=this.container.scrollTop,t=this.container.scrollLeft),this.scrollTop=e,this.scrollLeft=t,this.ignore?this.ignore=!1:this._scrolled(),this.scrollDeltaVert+=Math.abs(e-this.prevScrollTop),this.scrollDeltaHorz+=Math.abs(t-this.prevScrollLeft),this.prevScrollTop=e,this.prevScrollLeft=t,clearTimeout(this.scrollTimeout),this.scrollTimeout=setTimeout(function(){this.scrollDeltaVert=0,this.scrollDeltaHorz=0}.bind(this),150),clearTimeout(this.afterScrolled),this.didScroll=!1}scrolled(){this.q.enqueue(function(){return this.check()}.bind(this)),this.emit(o.c.MANAGERS.SCROLL,{top:this.scrollTop,left:this.scrollLeft}),clearTimeout(this.afterScrolled),this.afterScrolled=setTimeout(function(){this.snapper&&this.snapper.supportsTouch&&this.snapper.needsSnap()||this.emit(o.c.MANAGERS.SCROLLED,{top:this.scrollTop,left:this.scrollLeft})}.bind(this),this.settings.afterScrolledTimeout)}next(){let e="pre-paginated"===this.layout.props.name&&this.layout.props.spread?2*this.layout.props.delta:this.layout.props.delta;this.views.length&&(this.isPaginated&&"horizontal"===this.settings.axis?this.scrollBy(e,0,!0):this.scrollBy(0,this.layout.height,!0),this.q.enqueue(function(){return this.check()}.bind(this)))}prev(){let e="pre-paginated"===this.layout.props.name&&this.layout.props.spread?2*this.layout.props.delta:this.layout.props.delta;this.views.length&&(this.isPaginated&&"horizontal"===this.settings.axis?this.scrollBy(-e,0,!0):this.scrollBy(0,-this.layout.height,!0),this.q.enqueue(function(){return this.check()}.bind(this)))}updateFlow(e){this.rendered&&this.snapper&&(this.snapper.destroy(),this.snapper=void 0),super.updateFlow(e,"scroll"),this.rendered&&this.isPaginated&&this.settings.snap&&(this.snapper=new h(this,this.settings.snap&&"object"==typeof this.settings.snap&&this.settings.snap))}destroy(){super.destroy(),this.snapper&&this.snapper.destroy()}}t.a=p},function(e,t,n){(function(t){e.exports=function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[s]={exports:{}};t[s][0].call(u.exports,(function(e){var n=t[s][1][e];return i(n||e)}),u,u.exports,e,t,n,r)}return n[s].exports}for(var o=!1,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,n,r){(function(e){"use strict";var t,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,s=new i(c),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),t=function(){a.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)t="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var l=new e.MessageChannel;l.port1.onmessage=c,t=function(){l.port2.postMessage(0)}}var u=[];function c(){var e,t;r=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}r=!1}n.exports=function(e){1!==u.push(e)||r||t()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function i(){}var o={},s=["REJECTED"],a=["FULFILLED"],l=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&f(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function h(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return o.reject(e,t)}r===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function f(e,t){var n=!1;function r(t){n||(n=!0,o.reject(e,t))}function i(t){n||(n=!0,o.resolve(e,t))}var s=p((function(){t(i,r)}));"error"===s.status&&r(s.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=u,u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var n=new this.constructor(i);return this.state!==l?h(n,this.state===a?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){o.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=p(d,t);if("error"===n.status)return o.reject(e,n.value);var r=n.value;if(r)f(e,r);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},o.reject=function(e,t){e.state=s,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:o.resolve(new this(i),e)},u.reject=function(e){var t=new this(i);return o.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,l=-1,u=new this(i);++l<n;)c(e[l],l);return u;function c(e,i){t.resolve(e).then((function(e){s[i]=e,++a!==n||r||(r=!0,o.resolve(u,s))}),(function(e){r||(r=!0,o.reject(u,e))}))}},u.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s,a=-1,l=new this(i);++a<n;)s=e[a],t.resolve(s).then((function(e){r||(r=!0,o.resolve(l,e))}),(function(e){r||(r=!0,o.reject(l,e))}));return l}},{1:1}],3:[function(e,n,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function o(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(i){if("TypeError"!==i.name)throw i;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var s=Promise;function a(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function l(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function u(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function c(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var h=void 0,d={},f=Object.prototype.toString;function p(e){return"boolean"==typeof h?s.resolve(h):function(e){return new s((function(t){var n=e.transaction("local-forage-detect-blob-support","readwrite"),r=o([""]);n.objectStore("local-forage-detect-blob-support").put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return h=e}))}function m(e){var t=d[e.name],n={};n.promise=new s((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then((function(){return n.promise})):t.dbReady=n.promise}function g(e){var t=d[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function v(e,t){var n=d[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function y(e,t){return new s((function(n,r){if(d[e.name]=d[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);m(e),e.db.close()}var o=[e.name];t&&o.push(e.version);var s=i.open.apply(i,o);t&&(s.onupgradeneeded=function(t){var n=s.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore("local-forage-detect-blob-support")}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),s.onerror=function(e){e.preventDefault(),r(s.error)},s.onsuccess=function(){n(s.result),g(e)}}))}function b(e){return y(e,!1)}function w(e){return y(e,!0)}function _(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,i=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),i||n){if(n){var o=e.db.version+1;o>e.version&&(e.version=o)}return!0}return!1}function x(e){return o([function(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),i=0;i<t;i++)r[i]=e.charCodeAt(i);return n}(atob(e.data))],{type:e.type})}function E(e){return e&&e.__local_forage_encoded_blob}function k(e){var t=this,n=t._initReady().then((function(){var e=d[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return l(n,e,e),n}function S(e,t,n,r){void 0===r&&(r=1);try{var i=e.db.transaction(e.storeName,t);n(null,i)}catch(i){if(r>0&&(!e.db||"InvalidStateError"===i.name||"NotFoundError"===i.name))return s.resolve().then((function(){if(!e.db||"NotFoundError"===i.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),w(e)})).then((function(){return function(e){m(e);for(var t=d[e.name],n=t.forages,r=0;r<n.length;r++){var i=n[r];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null)}return e.db=null,b(e).then((function(t){return e.db=t,_(e)?w(e):t})).then((function(r){e.db=t.db=r;for(var i=0;i<n.length;i++)n[i]._dbInfo.db=r})).catch((function(t){throw v(e,t),t}))}(e).then((function(){S(e,t,n,r-1)}))})).catch(n);n(i)}}var T={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var i=d[n.name];i||(i={forages:[],db:null,dbReady:null,deferredOperations:[]},d[n.name]=i),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=k);var o=[];function a(){return s.resolve()}for(var l=0;l<i.forages.length;l++){var u=i.forages[l];u!==t&&o.push(u._initReady().catch(a))}var c=i.forages.slice(0);return s.all(o).then((function(){return n.db=i.db,b(n)})).then((function(e){return n.db=e,_(n,t._defaultConfig.version)?w(n):e})).then((function(e){n.db=i.db=e,t._dbInfo=n;for(var r=0;r<c.length;r++){var o=c[r];o!==t&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},_support:function(){try{if(!i||!i.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){S(n._dbInfo,"readonly",(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).openCursor(),a=1;s.onsuccess=function(){var n=s.result;if(n){var r=n.value;E(r)&&(r=x(r));var i=e(r,n.key,a++);void 0!==i?t(i):n.continue()}else t()},s.onerror=function(){r(s.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){S(n._dbInfo,"readonly",(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).get(e);s.onsuccess=function(){var e=s.result;void 0===e&&(e=null),E(e)&&(e=x(e)),t(e)},s.onerror=function(){r(s.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},setItem:function(e,t,n){var r=this;e=u(e);var i=new s((function(n,i){var o;r.ready().then((function(){return o=r._dbInfo,"[object Blob]"===f.call(t)?p(o.db).then((function(e){return e?t:(n=t,new s((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){S(r._dbInfo,"readwrite",(function(o,s){if(o)return i(o);try{var a=s.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var l=a.put(t,e);s.oncomplete=function(){void 0===t&&(t=null),n(t)},s.onabort=s.onerror=function(){var e=l.error?l.error:l.transaction.error;i(e)}}catch(e){i(e)}}))})).catch(i)}));return a(i,n),i},removeItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){S(n._dbInfo,"readwrite",(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).delete(e);o.oncomplete=function(){t()},o.onerror=function(){r(s.error)},o.onabort=function(){var e=s.error?s.error:s.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){S(t._dbInfo,"readwrite",(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).clear();i.oncomplete=function(){e()},i.onabort=i.onerror=function(){var e=o.error?o.error:o.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){S(t._dbInfo,"readonly",(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).count();o.onsuccess=function(){e(o.result)},o.onerror=function(){n(o.error)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){e<0?t(null):n.ready().then((function(){S(n._dbInfo,"readonly",(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName),a=!1,l=s.openKeyCursor();l.onsuccess=function(){var n=l.result;n?0===e||a?t(n.key):(a=!0,n.advance(e)):t(null)},l.onerror=function(){r(l.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){S(t._dbInfo,"readonly",(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).openKeyCursor(),s=[];o.onsuccess=function(){var t=o.result;t?(s.push(t.key),t.continue()):e(s)},o.onerror=function(){n(o.error)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;if(e.name){var l=e.name===n.name&&o._dbInfo.db,u=l?s.resolve(o._dbInfo.db):b(e).then((function(t){var n=d[e.name],r=n.forages;n.db=t;for(var i=0;i<r.length;i++)r[i]._dbInfo.db=t;return t}));r=e.storeName?u.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;m(e);var r=d[e.name],o=r.forages;t.close();for(var a=0;a<o.length;a++){var l=o[a];l._dbInfo.db=null,l._dbInfo.version=n}return new s((function(t,r){var o=i.open(e.name,n);o.onerror=function(e){o.result.close(),r(e)},o.onupgradeneeded=function(){o.result.deleteObjectStore(e.storeName)},o.onsuccess=function(){var e=o.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<o.length;t++){var n=o[t];n._dbInfo.db=e,g(n._dbInfo)}})).catch((function(t){throw(v(e,t)||s.resolve()).catch((function(){})),t}))}})):u.then((function(t){m(e);var n=d[e.name],r=n.forages;t.close();for(var o=0;o<r.length;o++)r[o]._dbInfo.db=null;return new s((function(t,n){var r=i.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)g(r[t]._dbInfo)})).catch((function(t){throw(v(e,t)||s.resolve()).catch((function(){})),t}))}))}else r=s.reject("Invalid arguments");return a(r,t),r}},C="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",N=/^~~local_forage_type~([^~]+)~/,O="__lfsc__:".length,I=O+"arbf".length,R=Object.prototype.toString;function A(e){var t,n,r,i,o,s=.75*e.length,a=e.length,l=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var u=new ArrayBuffer(s),c=new Uint8Array(u);for(t=0;t<a;t+=4)n=C.indexOf(e[t]),r=C.indexOf(e[t+1]),i=C.indexOf(e[t+2]),o=C.indexOf(e[t+3]),c[l++]=n<<2|r>>4,c[l++]=(15&r)<<4|i>>2,c[l++]=(3&i)<<6|63&o;return u}function P(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=C[n[t]>>2],r+=C[(3&n[t])<<4|n[t+1]>>4],r+=C[(15&n[t+1])<<2|n[t+2]>>6],r+=C[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var z={serialize:function(e,t){var n="";if(e&&(n=R.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===R.call(e.buffer))){var r,i="__lfsc__:";e instanceof ArrayBuffer?(r=e,i+="arbf"):(r=e.buffer,"[object Int8Array]"===n?i+="si08":"[object Uint8Array]"===n?i+="ui08":"[object Uint8ClampedArray]"===n?i+="uic8":"[object Int16Array]"===n?i+="si16":"[object Uint16Array]"===n?i+="ur16":"[object Int32Array]"===n?i+="si32":"[object Uint32Array]"===n?i+="ui32":"[object Float32Array]"===n?i+="fl32":"[object Float64Array]"===n?i+="fl64":t(new Error("Failed to get type for BinaryArray"))),t(i+P(r))}else if("[object Blob]"===n){var o=new FileReader;o.onload=function(){var n="~~local_forage_type~"+e.type+"~"+P(this.result);t("__lfsc__:blob"+n)},o.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if("__lfsc__:"!==e.substring(0,O))return JSON.parse(e);var t,n=e.substring(I),r=e.substring(O,I);if("blob"===r&&N.test(n)){var i=n.match(N);t=i[1],n=n.substring(i[0].length)}var s=A(n);switch(r){case"arbf":return s;case"blob":return o([s],{type:t});case"si08":return new Int8Array(s);case"ui08":return new Uint8Array(s);case"uic8":return new Uint8ClampedArray(s);case"si16":return new Int16Array(s);case"ur16":return new Uint16Array(s);case"si32":return new Int32Array(s);case"ui32":return new Uint32Array(s);case"fl32":return new Float32Array(s);case"fl64":return new Float64Array(s);default:throw new Error("Unkown type: "+r)}},stringToBuffer:A,bufferToString:P};function L(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function D(e,t,n,r,i,o){e.executeSql(n,r,i,(function(e,s){s.code===s.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,a){a.rows.length?o(e,s):L(e,t,(function(){e.executeSql(n,r,i,o)}),o)}),o):o(e,s)}),o)}function j(e,t,n,r){var i=this;e=u(e);var o=new s((function(o,s){i.ready().then((function(){void 0===t&&(t=null);var a=t,l=i._dbInfo;l.serializer.serialize(t,(function(t,u){u?s(u):l.db.transaction((function(n){D(n,l,"INSERT OR REPLACE INTO "+l.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){o(a)}),(function(e,t){s(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void o(j.apply(i,[e,a,n,r-1]));s(t)}}))}))})).catch(s)}));return a(o,n),o}function B(e){return new s((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var i=[],o=0;o<r.rows.length;o++)i.push(r.rows.item(o).name);t({db:e,storeNames:i})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}var M={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var i=new s((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(i){L(i,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=z,i},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){D(n,i,"SELECT * FROM "+i.storeName,[],(function(n,r){for(var o=r.rows,s=o.length,a=0;a<s;a++){var l=o.item(a),u=l.value;if(u&&(u=i.serializer.deserialize(u)),void 0!==(u=e(u,l.key,a+1)))return void t(u)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){D(n,i,"SELECT * FROM "+i.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=i.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},setItem:function(e,t,n){return j.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){D(n,i,"DELETE FROM "+i.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){D(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){D(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){D(n,i,"SELECT key FROM "+i.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){D(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],i=0;i<n.rows.length;i++)r.push(n.rows.item(i).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,i=this;return a(r=e.name?new s((function(t){var r;r=e.name===n.name?i._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(B(r))})).then((function(e){return new s((function(t,n){e.db.transaction((function(r){function i(e){return new s((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var o=[],a=0,l=e.storeNames.length;a<l;a++)o.push(i(e.storeNames[a]));s.all(o).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):s.reject("Invalid arguments"),t),r}};function F(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function U(){return!function(){try{return localStorage.setItem("_localforage_support_test",!0),localStorage.removeItem("_localforage_support_test"),!1}catch(e){return!0}}()||localStorage.length>0}var W={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=F(e,this._defaultConfig),U()?(this._dbInfo=t,t.serializer=z,s.resolve()):s.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,i=r.length,o=localStorage.length,s=1,a=0;a<o;a++){var l=localStorage.key(a);if(0===l.indexOf(r)){var u=localStorage.getItem(l);if(u&&(u=t.serializer.deserialize(u)),void 0!==(u=e(u,l.substring(i),s++)))return u}}}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return a(r,t),r},setItem:function(e,t,n){var r=this;e=u(e);var i=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new s((function(i,o){var s=r._dbInfo;s.serializer.serialize(t,(function(t,r){if(r)o(r);else try{localStorage.setItem(s.keyPrefix+e,t),i(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||o(e),o(e)}}))}))}));return a(i,n),i},removeItem:function(e,t){var n=this;e=u(e);var r=n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return a(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return a(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return a(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return a(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],i=0;i<n;i++){var o=localStorage.key(i);0===o.indexOf(e.keyPrefix)&&r.push(o.substring(e.keyPrefix.length))}return r}));return a(n,e),n},dropInstance:function(e,t){if(t=c.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,i=this;return a(r=e.name?new s((function(t){e.storeName?t(F(e,i._defaultConfig)):t(e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):s.reject("Invalid arguments"),t),r}},q=function(e,t){for(var n,r,i=e.length,o=0;o<i;){if((n=e[o])===(r=t)||"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))return!0;o++}return!1},H=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},V={},Y={},X={INDEXEDDB:T,WEBSQL:M,LOCALSTORAGE:W},Z=[X.INDEXEDDB._driver,X.WEBSQL._driver,X.LOCALSTORAGE._driver],$=["dropInstance"],G=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat($),K={description:"",driver:Z.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function Q(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function J(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(H(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var ee=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),X)if(X.hasOwnProperty(n)){var r=X[n],i=r._driver;this[n]=i,V[i]||this.defineDriver(r)}this._defaultConfig=J({},K),this._config=J({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new s((function(t,n){try{var r=e._driver,i=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(i);for(var o=G.concat("_initStorage"),l=0,u=o.length;l<u;l++){var c=o[l];if((!q($,c)||e[c])&&"function"!=typeof e[c])return void n(i)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=s.reject(t);return a(n,arguments[arguments.length-1]),n}},n=0,r=$.length;n<r;n++){var i=$[n];e[i]||(e[i]=t(i))}}();var h=function(n){V[r]&&console.info("Redefining LocalForage driver: "+r),V[r]=e,Y[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(h,n):h(!!e._support):h(!0)}catch(e){n(e)}}));return l(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=V[e]?s.resolve(V[e]):s.reject(new Error("Driver not found."));return l(r,t,n),r},e.prototype.getSerializer=function(e){var t=s.resolve(z);return l(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return l(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;H(e)||(e=[e]);var i=this._getSupportedDrivers(e);function o(){r._config.driver=r.driver()}function a(e){return r._extend(e),o(),r._ready=r._initStorage(r._config),r._ready}var u=null!==this._driverSet?this._driverSet.catch((function(){return s.resolve()})):s.resolve();return this._driverSet=u.then((function(){var e=i[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,o(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var i=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(i).then(a).catch(n)}o();var l=new Error("No available storage method found.");return r._driverSet=s.reject(l),r._driverSet}()}}(i)}))})).catch((function(){o();var e=new Error("No available storage method found.");return r._driverSet=s.reject(e),r._driverSet})),l(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!Y[e]},e.prototype._extend=function(e){J(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n];this.supports(i)&&t.push(i)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=G.length;e<t;e++)Q(this,G[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=ee},{3:3}]},{},[4])(4)}).call(this,n(12))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function s(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=s(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))i.call(n,c)&&(l[c]=n[c]);if(r){a=r(n);for(var h=0;h<a.length;h++)o.call(n,a[h])&&(l[a[h]]=n[a[h]])}}return l}},function(e,t,n){var r=n(48);function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var a=o?Object.getOwnPropertyDescriptor(e,s):null;a&&(a.get||a.set)?Object.defineProperty(n,s,a):n[s]=e[s]}return n.default=e,t&&t.set(e,n),n}},function(e,t,n){var r=n(52),i=n(53),o=n(54),s=n(56);e.exports=function(e,t){return r(e)||i(e,t)||o(e,t)||s()}},function(e,t,n){"use strict";e.exports=function(e){return null!=e}},function(e,t){function n(e,t){for(var n in e)t[n]=e[n]}function r(e,t){var r=e.prototype;if(!(r instanceof t)){function i(){}i.prototype=t.prototype,n(r,i=new i),e.prototype=r=i}r.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),r.constructor=e)}var i={},o=i.ELEMENT_NODE=1,s=i.ATTRIBUTE_NODE=2,a=i.TEXT_NODE=3,l=i.CDATA_SECTION_NODE=4,u=i.ENTITY_REFERENCE_NODE=5,c=i.ENTITY_NODE=6,h=i.PROCESSING_INSTRUCTION_NODE=7,d=i.COMMENT_NODE=8,f=i.DOCUMENT_NODE=9,p=i.DOCUMENT_TYPE_NODE=10,m=i.DOCUMENT_FRAGMENT_NODE=11,g=i.NOTATION_NODE=12,v={},y={},b=(v.INDEX_SIZE_ERR=(y[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(y[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(y[3]="Hierarchy request error",3)),w=(v.WRONG_DOCUMENT_ERR=(y[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(y[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(y[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(y[7]="No modification allowed",7),v.NOT_FOUND_ERR=(y[8]="Not found",8)),_=(v.NOT_SUPPORTED_ERR=(y[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(y[10]="Attribute in use",10));v.INVALID_STATE_ERR=(y[11]="Invalid state",11),v.SYNTAX_ERR=(y[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(y[13]="Invalid modification",13),v.NAMESPACE_ERR=(y[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(y[15]="Invalid access",15);function x(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,y[e]),this.message=y[e],Error.captureStackTrace&&Error.captureStackTrace(this,x);return n.code=e,t&&(this.message=this.message+": "+t),n}function E(){}function k(e,t){this._node=e,this._refresh=t,S(this)}function S(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var r=e._refresh(e._node);te(e,"length",r.length),n(r,e),e._inc=t}}function T(){}function C(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function N(e,t,n,r){if(r?t[C(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var i=e.ownerDocument;i&&(r&&L(i,e,r),function(e,t,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(i,e,n))}}function O(e,t,n){var r=C(t,n);if(!(r>=0))throw x(w,new Error(e.tagName+"@"+n));for(var i=t.length-1;r<i;)t[r]=t[++r];if(t.length=i,e){var o=e.ownerDocument;o&&(L(o,e,n),n.ownerElement=null)}}function I(e){if(this._features={},e)for(var t in e)this._features=e[t]}function R(){}function A(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function P(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(P(e,t))return!0}while(e=e.nextSibling)}function z(){}function L(e,t,n,r){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&delete t._nsMap[n.prefix?n.localName:""]}function D(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var i=t.firstChild,o=0;i;)r[o++]=i,i=i.nextSibling;r.length=o}}}function j(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,D(e.ownerDocument,e),t}function B(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===m){var i=t.firstChild;if(null==i)return t;var o=t.lastChild}else i=o=t;var s=n?n.previousSibling:e.lastChild;i.previousSibling=s,o.nextSibling=n,s?s.nextSibling=i:e.firstChild=i,null==n?e.lastChild=o:n.previousSibling=o;do{i.parentNode=e}while(i!==o&&(i=i.nextSibling));return D(e.ownerDocument||e,e),t.nodeType==m&&(t.firstChild=t.lastChild=null),t}function M(){this._nsMap={}}function F(){}function U(){}function W(){}function q(){}function H(){}function V(){}function Y(){}function X(){}function Z(){}function $(){}function G(){}function K(){}function Q(e,t){var n=[],r=9==this.nodeType&&this.documentElement||this,i=r.prefix,o=r.namespaceURI;if(o&&null==i&&null==(i=r.lookupPrefix(o)))var s=[{namespace:o,prefix:null}];return ee(this,n,e,t,s),n.join("")}function J(e,t,n){var r=e.prefix||"",i=e.namespaceURI;if(!r&&!i)return!1;if("xml"===r&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=n.length;o--;){var s=n[o];if(s.prefix==r)return s.namespace!=i}return!0}function ee(e,t,n,r,i){if(r){if(!(e=r(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case o:i||(i=[]);i.length;var c=e.attributes,g=c.length,v=e.firstChild,y=e.tagName;n="http://www.w3.org/1999/xhtml"===e.namespaceURI||n,t.push("<",y);for(var b=0;b<g;b++){"xmlns"==(w=c.item(b)).prefix?i.push({prefix:w.localName,namespace:w.value}):"xmlns"==w.nodeName&&i.push({prefix:"",namespace:w.value})}for(b=0;b<g;b++){var w;if(J(w=c.item(b),0,i)){var _=w.prefix||"",x=w.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',x,'"'),i.push({prefix:_,namespace:x})}ee(w,t,n,r,i)}if(J(e,0,i)){_=e.prefix||"",x=e.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',x,'"'),i.push({prefix:_,namespace:x})}if(v||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(y)){if(t.push(">"),n&&/^script$/i.test(y))for(;v;)v.data?t.push(v.data):ee(v,t,n,r,i),v=v.nextSibling;else for(;v;)ee(v,t,n,r,i),v=v.nextSibling;t.push("</",y,">")}else t.push("/>");return;case f:case m:for(v=e.firstChild;v;)ee(v,t,n,r,i),v=v.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,A),'"');case a:return t.push(e.data.replace(/[<&]/g,A));case l:return t.push("<![CDATA[",e.data,"]]>");case d:return t.push("\x3c!--",e.data,"--\x3e");case p:var k=e.publicId,S=e.systemId;if(t.push("<!DOCTYPE ",e.name),k)t.push(' PUBLIC "',k),S&&"."!=S&&t.push('" "',S),t.push('">');else if(S&&"."!=S)t.push(' SYSTEM "',S,'">');else{var T=e.internalSubset;T&&t.push(" [",T,"]"),t.push(">")}return;case h:return t.push("<?",e.target," ",e.data,"?>");case u:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function te(e,t,n){e[t]=n}x.prototype=Error.prototype,n(v,x),E.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)ee(this[r],n,e,t);return n.join("")}},k.prototype.item=function(e){return S(this),this[e]},r(k,E),T.prototype={length:0,item:E.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new x(_);var n=this.getNamedItem(e.nodeName);return N(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new x(_);return t=this.getNamedItemNS(e.namespaceURI,e.localName),N(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return O(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return O(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}},I.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!(!n||t&&!(t in n))},createDocument:function(e,t,n){var r=new z;if(r.implementation=this,r.childNodes=new E,r.doctype=n,n&&r.appendChild(n),t){var i=r.createElementNS(e,t);r.appendChild(i)}return r},createDocumentType:function(e,t,n){var r=new V;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}},R.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return B(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return j(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,n,r){var i=new n.constructor;for(var a in n){var l=n[a];"object"!=typeof l&&l!=i[a]&&(i[a]=l)}n.childNodes&&(i.childNodes=new E);switch(i.ownerDocument=t,i.nodeType){case o:var u=n.attributes,c=i.attributes=new T,h=u.length;c._ownerElement=i;for(var d=0;d<h;d++)i.setAttributeNode(e(t,u.item(d),!0));break;case s:r=!0}if(r)for(var f=n.firstChild;f;)i.appendChild(e(t,f,r)),f=f.nextSibling;return i}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==a&&e.nodeType==a?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var r in n)if(n[r]==e)return r;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},n(i,R),n(i,R.prototype),z.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==m){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return null==this.documentElement&&e.nodeType==o&&(this.documentElement=e),B(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),j(this,e)},importNode:function(e,t){return function e(t,n,r){var i;switch(n.nodeType){case o:(i=n.cloneNode(!1)).ownerDocument=t;case m:break;case s:r=!0}i||(i=n.cloneNode(!1));if(i.ownerDocument=t,i.parentNode=null,r)for(var a=n.firstChild;a;)i.appendChild(e(t,a,r)),a=a.nextSibling;return i}(this,e,t)},getElementById:function(e){var t=null;return P(this.documentElement,(function(n){if(n.nodeType==o&&n.getAttribute("id")==e)return t=n,!0})),t},getElementsByClassName:function(e){const t=new RegExp(`(^|\\s)${e}(\\s|$)`);return new k(this,e=>{var n=[];return P(e.documentElement,r=>{r!==e&&r.nodeType==o&&t.test(r.getAttribute("class"))&&n.push(r)}),n})},createElement:function(e){var t=new M;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new E,(t.attributes=new T)._ownerElement=t,t},createDocumentFragment:function(){var e=new $;return e.ownerDocument=this,e.childNodes=new E,e},createTextNode:function(e){var t=new W;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new q;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new H;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new G;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new F;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new Z;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new M,r=t.split(":"),i=n.attributes=new T;return n.childNodes=new E,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,i._ownerElement=n,n},createAttributeNS:function(e,t){var n=new F,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}},r(z,R),M.prototype={nodeType:o,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===m?this.insertBefore(e,null):function(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);r=e.lastChild}return r=e.lastChild,t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,D(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new k(this,(function(t){var n=[];return P(t,(function(r){r===t||r.nodeType!=o||"*"!==e&&r.tagName!=e||n.push(r)})),n}))},getElementsByTagNameNS:function(e,t){return new k(this,(function(n){var r=[];return P(n,(function(i){i===n||i.nodeType!==o||"*"!==e&&i.namespaceURI!==e||"*"!==t&&i.localName!=t||r.push(i)})),r}))}},z.prototype.getElementsByTagName=M.prototype.getElementsByTagName,z.prototype.getElementsByTagNameNS=M.prototype.getElementsByTagNameNS,r(M,R),F.prototype.nodeType=s,r(F,R),U.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(y[b])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},r(U,R),W.prototype={nodeName:"#text",nodeType:a,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},r(W,U),q.prototype={nodeName:"#comment",nodeType:d},r(q,U),H.prototype={nodeName:"#cdata-section",nodeType:l},r(H,U),V.prototype.nodeType=p,r(V,R),Y.prototype.nodeType=g,r(Y,R),X.prototype.nodeType=c,r(X,R),Z.prototype.nodeType=u,r(Z,R),$.prototype.nodeName="#document-fragment",$.prototype.nodeType=m,r($,R),G.prototype.nodeType=h,r(G,R),K.prototype.serializeToString=function(e,t,n){return Q.call(e,t,n)},R.prototype.toString=Q;try{if(Object.defineProperty){Object.defineProperty(k.prototype,"length",{get:function(){return S(this),this.$$length}}),Object.defineProperty(R.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case o:case m:var n=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case o:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),te=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.Node=R,t.DOMImplementation=I,t.XMLSerializer=K},function(e,t,n){var r=n(83),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();e.exports=o},function(e,t,n){var r=n(35).Symbol;e.exports=r},function(e,t,n){var r=n(27),i=n(25);e.exports=function(e,t,n){var o=!0,s=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return i(n)&&(o="leading"in n?!!n.leading:o,s="trailing"in n?!!n.trailing:s),r(e,t,{leading:o,maxWait:t,trailing:s})}},function(e,t,n){(function(t,n,r){e.exports=function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[s]={exports:{}};t[s][0].call(u.exports,(function(e){var n=t[s][1][e];return i(n||e)}),u,u.exports,e,t,n,r)}return n[s].exports}for(var o=!1,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,i,s,a,l,u,c=[],h=0,d=e.length,f=d,p="string"!==r.getTypeOf(e);h<e.length;)f=d-h,p?(t=e[h++],n=h<d?e[h++]:0,i=h<d?e[h++]:0):(t=e.charCodeAt(h++),n=h<d?e.charCodeAt(h++):0,i=h<d?e.charCodeAt(h++):0),s=t>>2,a=(3&t)<<4|n>>4,l=f>1?(15&n)<<2|i>>6:64,u=f>2?63&i:64,c.push(o.charAt(s)+o.charAt(a)+o.charAt(l)+o.charAt(u));return c.join("")},n.decode=function(e){var t,n,r,s,a,l,u=0,c=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var h,d=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&d--,e.charAt(e.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(h=i.uint8array?new Uint8Array(0|d):new Array(0|d);u<e.length;)t=o.indexOf(e.charAt(u++))<<2|(s=o.indexOf(e.charAt(u++)))>>4,n=(15&s)<<4|(a=o.indexOf(e.charAt(u++)))>>2,r=(3&a)<<6|(l=o.indexOf(e.charAt(u++))),h[c++]=t,64!==a&&(h[c++]=n),64!==l&&(h[c++]=r);return h}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var r=e("./external"),i=e("./stream/DataWorker"),o=e("./stream/DataLengthProbe"),s=e("./stream/Crc32Probe");function a(e,t,n,r,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=r,this.compressedContent=i}o=e("./stream/DataLengthProbe"),a.prototype={getContentWorker:function(){var e=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,n){return e.pipe(new s).pipe(new o("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var r=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(e){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var r=e("./utils"),i=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==r.getTypeOf(e)?function(e,t,n,r){var o=i,s=r+n;e^=-1;for(var a=r;a<s;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,n,r){var o=i,s=r+n;e^=-1;for(var a=r;a<s;a++)e=e>>>8^o[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";var r=null;r="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:r}},{lie:37}],7:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),o=e("./utils"),s=e("./stream/GenericWorker"),a=r?"uint8array":"array";function l(e,t){s.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",o.inherits(l,s),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(a,e.data),!1)},l.prototype.flush=function(){s.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},n.compressWorker=function(e){return new l("Deflate",e)},n.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../stream/GenericWorker"),o=e("../utf8"),s=e("../crc32"),a=e("../signature"),l=function(e,t){var n,r="";for(n=0;n<t;n++)r+=String.fromCharCode(255&e),e>>>=8;return r},u=function(e,t,n,i,u,c){var h,d,f=e.file,p=e.compression,m=c!==o.utf8encode,g=r.transformTo("string",c(f.name)),v=r.transformTo("string",o.utf8encode(f.name)),y=f.comment,b=r.transformTo("string",c(y)),w=r.transformTo("string",o.utf8encode(y)),_=v.length!==f.name.length,x=w.length!==y.length,E="",k="",S="",T=f.dir,C=f.date,N={crc32:0,compressedSize:0,uncompressedSize:0};t&&!n||(N.crc32=e.crc32,N.compressedSize=e.compressedSize,N.uncompressedSize=e.uncompressedSize);var O=0;t&&(O|=8),m||!_&&!x||(O|=2048);var I,R,A,P=0,z=0;T&&(P|=16),"UNIX"===u?(z=798,P|=(I=f.unixPermissions,R=T,A=I,I||(A=R?16893:33204),(65535&A)<<16)):(z=20,P|=63&(f.dosPermissions||0)),h=C.getUTCHours(),h<<=6,h|=C.getUTCMinutes(),h<<=5,h|=C.getUTCSeconds()/2,d=C.getUTCFullYear()-1980,d<<=4,d|=C.getUTCMonth()+1,d<<=5,d|=C.getUTCDate(),_&&(k=l(1,1)+l(s(g),4)+v,E+="up"+l(k.length,2)+k),x&&(S=l(1,1)+l(s(b),4)+w,E+="uc"+l(S.length,2)+S);var L="";return L+="\n\0",L+=l(O,2),L+=p.magic,L+=l(h,2),L+=l(d,2),L+=l(N.crc32,4),L+=l(N.compressedSize,4),L+=l(N.uncompressedSize,4),L+=l(g.length,2),L+=l(E.length,2),{fileRecord:a.LOCAL_FILE_HEADER+L+g+E,dirRecord:a.CENTRAL_FILE_HEADER+l(z,2)+L+l(b.length,2)+"\0\0\0\0"+l(P,4)+l(i,4)+g+E+b}},c=function(e){return a.DATA_DESCRIPTOR+l(e.crc32,4)+l(e.compressedSize,4)+l(e.uncompressedSize,4)};function h(e,t,n,r){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}r.inherits(h,i),h.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-r-1))/n:100}}))},h.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var n=u(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},h.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,n=u(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),t)this.push({data:c(e),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},h.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n=this.bytesWritten-e,i=function(e,t,n,i,o){var s=r.transformTo("string",o(i));return a.CENTRAL_DIRECTORY_END+"\0\0\0\0"+l(e,2)+l(e,2)+l(t,4)+l(n,4)+l(s.length,2)+s}(this.dirRecords.length,n,e,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},h.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},h.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},h.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},h.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},h.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=h},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var r=e("../compressions"),i=e("./ZipFileWorker");n.generateWorker=function(e,t,n){var o=new i(t.streamFiles,n,t.platform,t.encodeFileName),s=0;try{e.forEach((function(e,n){s++;var i=function(e,t){var n=e||t,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,t.compression),a=n.options.compressionOptions||t.compressionOptions||{},l=n.dir,u=n.date;n._compressWorker(i,a).withStreamInfo("file",{name:e,dir:l,date:u,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)})),o.entriesCount=s}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new r;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}r.prototype=e("./object"),r.prototype.loadAsync=e("./load"),r.support=e("./support"),r.defaults=e("./defaults"),r.version="3.5.0",r.loadAsync=function(e,t){return(new r).loadAsync(e,t)},r.external=e("./external"),t.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./external"),o=e("./utf8"),s=(r=e("./utils"),e("./zipEntries")),a=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function u(e){return new i.Promise((function(t,n){var r=e.decompressed.getContentWorker().pipe(new a);r.on("error",(function(e){n(e)})).on("end",(function(){r.streamInfo.crc32!==e.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var n=this;return t=r.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var n=new s(t);return n.load(e),n})).then((function(e){var n=[i.Promise.resolve(e)],r=e.files;if(t.checkCRC32)for(var o=0;o<r.length;o++)n.push(u(r[o]));return i.Promise.all(n)})).then((function(e){for(var r=e.shift(),i=r.files,o=0;o<i.length;o++){var s=i[o];n.file(s.fileNameStr,s.decompressed,{binary:!0,optimizedBinaryString:!0,date:s.date,dir:s.dir,comment:s.fileCommentStr.length?s.fileCommentStr:null,unixPermissions:s.unixPermissions,dosPermissions:s.dosPermissions,createFolders:t.createFolders})}return r.zipComment.length&&(n.comment=r.zipComment),n}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../stream/GenericWorker");function o(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}r.inherits(o,i),o.prototype._bindStream=function(e){var t=this;this._stream=e,e.pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var r=e("readable-stream").Readable;function i(e,t,n){r.call(this,t),this._helper=e;var i=this;e.on("data",(function(e,t){i.push(e)||i._helper.pause(),n&&n(t)})).on("error",(function(e){i.emit("error",e)})).on("end",(function(){i.push(null)}))}e("../utils").inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,n,r){"use strict";n.exports={isNode:void 0!==t,newBufferFrom:function(e,n){if(t.from&&t.from!==Uint8Array.from)return t.from(e,n);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new t(e,n)},allocBuffer:function(e){if(t.alloc)return t.alloc(e);var n=new t(e);return n.fill(0),n},isBuffer:function(e){return t.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";var r=e("./utf8"),i=e("./utils"),o=e("./stream/GenericWorker"),s=e("./stream/StreamHelper"),a=e("./defaults"),l=e("./compressedObject"),u=e("./zipObject"),c=e("./generate"),h=e("./nodejsUtils"),d=e("./nodejs/NodejsStreamInputAdapter"),f=function(e,t,n){var r,s=i.getTypeOf(t),c=i.extend(n||{},a);c.date=c.date||new Date,null!==c.compression&&(c.compression=c.compression.toUpperCase()),"string"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(e=m(e)),c.createFolders&&(r=p(e))&&g.call(this,r,!0);var f="string"===s&&!1===c.binary&&!1===c.base64;n&&void 0!==n.binary||(c.binary=!f),(t instanceof l&&0===t.uncompressedSize||c.dir||!t||0===t.length)&&(c.base64=!1,c.binary=!0,t="",c.compression="STORE",s="string");var v=null;v=t instanceof l||t instanceof o?t:h.isNode&&h.isStream(t)?new d(e,t):i.prepareContent(e,t,c.binary,c.optimizedBinaryString,c.base64);var y=new u(e,v,c);this.files[e]=y},p=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return t>0?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:a.createFolders,e=m(e),this.files[e]||f.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function v(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,r;for(t in this.files)this.files.hasOwnProperty(t)&&(r=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,r))},filter:function(e){var t=[];return this.forEach((function(n,r){e(n,r)&&t.push(r)})),t},file:function(e,t,n){if(1===arguments.length){if(v(e)){var r=e;return this.filter((function(e,t){return!t.dir&&r.test(e)}))}var i=this.files[this.root+e];return i&&!i.dir?i:null}return e=this.root+e,f.call(this,e,t,n),this},folder:function(e){if(!e)return this;if(v(e))return this.filter((function(t,n){return n.dir&&e.test(t)}));var t=this.root+e,n=g.call(this,t),r=this.clone();return r.root=n.name,r},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var n=this.filter((function(t,n){return n.name.slice(0,e.length)===e})),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,n={};try{if((n=i.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:r.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");i.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var a=n.comment||this.comment||"";t=c.generateWorker(this,n,a)}catch(e){(t=new o("error")).error(e)}return new s(t,n.type||"string",n.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.length-4;o>=0;--o)if(this.data[o]===t&&this.data[o+1]===n&&this.data[o+2]===r&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&n===o[1]&&r===o[2]&&i===o[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var r=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return r.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,n){"use strict";var r=e("./Uint8ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var r=e("./ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../support"),o=e("./ArrayReader"),s=e("./StringReader"),a=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=r.getTypeOf(e);return r.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new a(e):i.uint8array?new l(r.transformTo("uint8array",e)):new o(r.transformTo("array",e)):new s(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../utils");function o(e){r.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(o,r),o.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../crc32");function o(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,r),o.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}r.inherits(o,i),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=r.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}r.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function r(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;this.isPaused=!1;var e=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=r},{}],29:[function(e,n,r){"use strict";var i=e("../utils"),o=e("./ConvertWorker"),s=e("./GenericWorker"),a=e("../base64"),l=e("../support"),u=e("../external"),c=null;if(l.nodestream)try{c=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function h(e,n){return new u.Promise((function(r,o){var s=[],l=e._internalType,u=e._outputType,c=e._mimeType;e.on("data",(function(e,t){s.push(e),n&&n(t)})).on("error",(function(e){s=[],o(e)})).on("end",(function(){try{var e=function(e,t,n){switch(e){case"blob":return i.newBlob(i.transformTo("arraybuffer",t),n);case"base64":return a.encode(t);default:return i.transformTo(e,t)}}(u,function(e,n){var r,i=0,o=null,s=0;for(r=0;r<n.length;r++)s+=n[r].length;switch(e){case"string":return n.join("");case"array":return Array.prototype.concat.apply([],n);case"uint8array":for(o=new Uint8Array(s),r=0;r<n.length;r++)o.set(n[r],i),i+=n[r].length;return o;case"nodebuffer":return t.concat(n);default:throw new Error("concat : unsupported type '"+e+"'")}}(l,s),c);r(e)}catch(e){o(e)}s=[]})).resume()}))}function d(e,t,n){var r=t;switch(t){case"blob":case"arraybuffer":r="uint8array";break;case"base64":r="string"}try{this._internalType=r,this._outputType=t,this._mimeType=n,i.checkSupport(r),this._worker=e.pipe(new o(r)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}d.prototype={accumulate:function(e){return h(this,e)},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,(function(e){t.call(n,e.data,e.meta)})):this._worker.on(e,(function(){i.delay(t,arguments,n)})),this},resume:function(){return i.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(i.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},e)}},n.exports=d},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,n,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer=void 0!==t,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(i),r.blob=0===o.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,n){"use strict";for(var r=e("./utils"),i=e("./support"),o=e("./nodejsUtils"),s=e("./stream/GenericWorker"),a=new Array(256),l=0;l<256;l++)a[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;function u(){s.call(this,"utf-8 decode"),this.leftOver=null}function c(){s.call(this,"utf-8 encode")}a[254]=a[254]=1,n.utf8encode=function(e){return i.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,n,r,o,s,a=e.length,l=0;for(o=0;o<a;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=i.uint8array?new Uint8Array(l):new Array(l),s=0,o=0;s<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?t[s++]=n:n<2048?(t[s++]=192|n>>>6,t[s++]=128|63&n):n<65536?(t[s++]=224|n>>>12,t[s++]=128|n>>>6&63,t[s++]=128|63&n):(t[s++]=240|n>>>18,t[s++]=128|n>>>12&63,t[s++]=128|n>>>6&63,t[s++]=128|63&n);return t}(e)},n.utf8decode=function(e){return i.nodebuffer?r.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,n,i,o,s=e.length,l=new Array(2*s);for(n=0,t=0;t<s;)if((i=e[t++])<128)l[n++]=i;else if((o=a[i])>4)l[n++]=65533,t+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&t<s;)i=i<<6|63&e[t++],o--;o>1?l[n++]=65533:i<65536?l[n++]=i:(i-=65536,l[n++]=55296|i>>10&1023,l[n++]=56320|1023&i)}return l.length!==n&&(l.subarray?l=l.subarray(0,n):l.length=n),r.applyFromCharCode(l)}(e=r.transformTo(i.uint8array?"uint8array":"array",e))},r.inherits(u,s),u.prototype.processChunk=function(e){var t=r.transformTo(i.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var s=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}(t),l=t;s!==t.length&&(i.uint8array?(l=t.subarray(0,s),this.leftOver=t.subarray(s,t.length)):(l=t.slice(0,s),this.leftOver=t.slice(s,t.length))),this.push({data:n.utf8decode(l),meta:e.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=u,r.inherits(c,s),c.prototype.processChunk=function(e){this.push({data:n.utf8encode(e.data),meta:e.meta})},n.Utf8EncodeWorker=c},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,n){"use strict";var r=e("./support"),i=e("./base64"),o=e("./nodejsUtils"),s=e("set-immediate-shim"),a=e("./external");function l(e){return e}function u(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}n.newBlob=function(e,t){n.checkSupport("blob");try{return new Blob([e],{type:t})}catch(n){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(e),r.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,n){var r=[],i=0,o=e.length;if(o<=n)return String.fromCharCode.apply(null,e);for(;i<o;)"array"===t||"nodebuffer"===t?r.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+n,o)))):r.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+n,o)))),i+=n;return r.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(e){return!1}}()}};function h(e){var t=65536,r=n.getTypeOf(e),i=!0;if("uint8array"===r?i=c.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=c.applyCanBeUsed.nodebuffer),i)for(;t>1;)try{return c.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function d(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}n.applyFromCharCode=h;var f={};f.string={string:l,array:function(e){return u(e,new Array(e.length))},arraybuffer:function(e){return f.string.uint8array(e).buffer},uint8array:function(e){return u(e,new Uint8Array(e.length))},nodebuffer:function(e){return u(e,o.allocBuffer(e.length))}},f.array={string:h,array:l,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(e)}},f.arraybuffer={string:function(e){return h(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:l,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(new Uint8Array(e))}},f.uint8array={string:h,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:l,nodebuffer:function(e){return o.newBufferFrom(e)}},f.nodebuffer={string:h,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return f.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:l},n.transformTo=function(e,t){if(t||(t=""),!e)return t;n.checkSupport(e);var r=n.getTypeOf(t);return f[r][e](t)},n.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":r.nodebuffer&&o.isBuffer(e)?"nodebuffer":r.uint8array&&e instanceof Uint8Array?"uint8array":r.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},n.checkSupport=function(e){if(!r[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},n.MAX_VALUE_16BITS=65535,n.MAX_VALUE_32BITS=-1,n.pretty=function(e){var t,n,r="";for(n=0;n<(e||"").length;n++)r+="\\x"+((t=e.charCodeAt(n))<16?"0":"")+t.toString(16).toUpperCase();return r},n.delay=function(e,t,n){s((function(){e.apply(n||null,t||[])}))},n.inherits=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n},n.extend=function(){var e,t,n={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===n[t]&&(n[t]=arguments[e][t]);return n},n.prepareContent=function(e,t,o,s,l){return a.Promise.resolve(t).then((function(e){return r.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise((function(t,n){var r=new FileReader;r.onload=function(e){t(e.target.result)},r.onerror=function(e){n(e.target.error)},r.readAsArrayBuffer(e)})):e})).then((function(t){var c,h=n.getTypeOf(t);return h?("arraybuffer"===h?t=n.transformTo("uint8array",t):"string"===h&&(l?t=i.decode(t):o&&!0!==s&&(t=u(c=t,r.uint8array?new Uint8Array(c.length):new Array(c.length)))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./signature"),s=e("./zipEntry"),a=(e("./utf8"),e("./support"));function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var n=this.reader.index;this.reader.setIndex(e);var r=this.reader.readString(4)===t;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",n=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,r=this.zip64EndOfCentralSize-44;0<r;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new s({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=t-n;if(r>0)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(e){this.reader=r(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./compressedObject"),s=e("./crc32"),a=e("./utf8"),l=e("./compressions"),u=e("./support");function c(e,t){this.options=e,this.loadOptions=t}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,n;if(e.skip(22),this.fileNameLength=e.readInt(2),n=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(l.hasOwnProperty(t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0===e&&(this.dosPermissions=63&this.externalFileAttributes),3===e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,n,r,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),n=e.readInt(2),r=e.readData(n),this.extraFields[t]={id:t,length:n,value:r};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var n=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var o=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=r(e.value);return 1!==t.readInt(1)||s(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=r(e.value);return 1!==t.readInt(1)||s(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=c},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";var r=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),o=e("./utf8"),s=e("./compressedObject"),a=e("./stream/GenericWorker"),l=function(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}};l.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var i="string"===(n=e.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker();var s=!this._dataBinary;s&&!i&&(t=t.pipe(new o.Utf8EncodeWorker)),!s&&i&&(t=t.pipe(new o.Utf8DecodeWorker))}catch(e){(t=new a("error")).error(e)}return new r(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof s&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new o.Utf8EncodeWorker)),s.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof a?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<u.length;h++)l.prototype[u[h]]=c;t.exports=l},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){"use strict";var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,s=new i(c),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),n=function(){a.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var l=new e.MessageChannel;l.port1.onmessage=c,n=function(){l.port2.postMessage(0)}}var u=[];function c(){var e,t;r=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}r=!1}t.exports=function(e){1!==u.push(e)||r||n()}}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var r=e("immediate");function i(){}var o={},s=["REJECTED"],a=["FULFILLED"],l=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&f(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function h(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return o.reject(e,t)}r===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function f(e,t){var n=!1;function r(t){n||(n=!0,o.reject(e,t))}function i(t){n||(n=!0,o.resolve(e,t))}var s=p((function(){t(i,r)}));"error"===s.status&&r(s.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=u,u.prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))},u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var n=new this.constructor(i);return this.state!==l?h(n,this.state===a?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){o.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=p(d,t);if("error"===n.status)return o.reject(e,n.value);var r=n.value;if(r)f(e,r);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},o.reject=function(e,t){e.state=s,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:o.resolve(new this(i),e)},u.reject=function(e){var t=new this(i);return o.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,l=-1,u=new this(i);++l<n;)c(e[l],l);return u;function c(e,i){t.resolve(e).then((function(e){s[i]=e,++a!==n||r||(r=!0,o.resolve(u,s))}),(function(e){r||(r=!0,o.reject(u,e))}))}},u.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s,a=-1,l=new this(i);++a<n;)s=e[a],t.resolve(s).then((function(e){r||(r=!0,o.resolve(l,e))}),(function(e){r||(r=!0,o.reject(l,e))}));return l}},{immediate:36}],38:[function(e,t,n){"use strict";var r={};(0,e("./lib/utils/common").assign)(r,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var r=e("./zlib/deflate"),i=e("./utils/common"),o=e("./utils/strings"),s=e("./zlib/messages"),a=e("./zlib/zstream"),l=Object.prototype.toString;function u(e){if(!(this instanceof u))return new u(e);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(s[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var c;if(c="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=r.deflateSetDictionary(this.strm,c)))throw new Error(s[n]);this._dict_set=!0}}function c(e,t){var n=new u(t);if(n.push(e,!0),n.err)throw n.msg||s[n.err];return n.result}u.prototype.push=function(e,t){var n,s,a=this.strm,u=this.options.chunkSize;if(this.ended)return!1;s=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=o.string2buf(e):"[object ArrayBuffer]"===l.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new i.Buf8(u),a.next_out=0,a.avail_out=u),1!==(n=r.deflate(a,s))&&0!==n)return this.onEnd(n),this.ended=!0,!1;0!==a.avail_out&&(0!==a.avail_in||4!==s&&2!==s)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(a.output,a.next_out))):this.onData(i.shrinkBuf(a.output,a.next_out)))}while((a.avail_in>0||0===a.avail_out)&&1!==n);return 4===s?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==s||(this.onEnd(0),a.avail_out=0,!0)},u.prototype.onData=function(e){this.chunks.push(e)},u.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=u,n.deflate=c,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,c(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,c(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var r=e("./zlib/inflate"),i=e("./utils/common"),o=e("./utils/strings"),s=e("./zlib/constants"),a=e("./zlib/messages"),l=e("./zlib/zstream"),u=e("./zlib/gzheader"),c=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==s.Z_OK)throw new Error(a[n]);this.header=new u,r.inflateGetHeader(this.strm,this.header)}function d(e,t){var n=new h(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}h.prototype.push=function(e,t){var n,a,l,u,h,d,f=this.strm,p=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?s.Z_FINISH:s.Z_NO_FLUSH,"string"==typeof e?f.input=o.binstring2buf(e):"[object ArrayBuffer]"===c.call(e)?f.input=new Uint8Array(e):f.input=e,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new i.Buf8(p),f.next_out=0,f.avail_out=p),(n=r.inflate(f,s.Z_NO_FLUSH))===s.Z_NEED_DICT&&m&&(d="string"==typeof m?o.string2buf(m):"[object ArrayBuffer]"===c.call(m)?new Uint8Array(m):m,n=r.inflateSetDictionary(this.strm,d)),n===s.Z_BUF_ERROR&&!0===g&&(n=s.Z_OK,g=!1),n!==s.Z_STREAM_END&&n!==s.Z_OK)return this.onEnd(n),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&n!==s.Z_STREAM_END&&(0!==f.avail_in||a!==s.Z_FINISH&&a!==s.Z_SYNC_FLUSH)||("string"===this.options.to?(l=o.utf8border(f.output,f.next_out),u=f.next_out-l,h=o.buf2string(f.output,l),f.next_out=u,f.avail_out=p-u,u&&i.arraySet(f.output,f.output,l,u,0),this.onData(h)):this.onData(i.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(g=!0)}while((f.avail_in>0||0===f.avail_out)&&n!==s.Z_STREAM_END);return n===s.Z_STREAM_END&&(a=s.Z_FINISH),a===s.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===s.Z_OK):a!==s.Z_SYNC_FLUSH||(this.onEnd(s.Z_OK),f.avail_out=0,!0)},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===s.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=h,n.inflate=d,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,d(e,t)},n.ungzip=d},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,n,r,i){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),i);else for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){var t,n,r,i,o,s;for(r=0,t=0,n=e.length;t<n;t++)r+=e[t].length;for(s=new Uint8Array(r),i=0,t=0,n=e.length;t<n;t++)o=e[t],s.set(o,i),i+=o.length;return s}},o={arraySet:function(e,t,n,r,i){for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,i)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,o))},n.setTyped(r)},{}],42:[function(e,t,n){"use strict";var r=e("./common"),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var s=new r.Buf8(256),a=0;a<256;a++)s[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;function l(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n="",s=0;s<t;s++)n+=String.fromCharCode(e[s]);return n}s[254]=s[254]=1,n.string2buf=function(e){var t,n,i,o,s,a=e.length,l=0;for(o=0;o<a;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(l),s=0,o=0;s<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<a&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?t[s++]=n:n<2048?(t[s++]=192|n>>>6,t[s++]=128|63&n):n<65536?(t[s++]=224|n>>>12,t[s++]=128|n>>>6&63,t[s++]=128|63&n):(t[s++]=240|n>>>18,t[s++]=128|n>>>12&63,t[s++]=128|n>>>6&63,t[s++]=128|63&n);return t},n.buf2binstring=function(e){return l(e,e.length)},n.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,i=t.length;n<i;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){var n,r,i,o,a=t||e.length,u=new Array(2*a);for(r=0,n=0;n<a;)if((i=e[n++])<128)u[r++]=i;else if((o=s[i])>4)u[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&n<a;)i=i<<6|63&e[n++],o--;o>1?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return l(u,r)},n.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+s[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){for(var i=65535&e|0,o=e>>>16&65535|0,s=0;0!==n;){n-=s=n>2e3?2e3:n;do{o=o+(i=i+t[r++]|0)|0}while(--s);i%=65521,o%=65521}return i|o<<16|0}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t,n,i){var o=r,s=i+n;e^=-1;for(var a=i;a<s;a++)e=e>>>8^o[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,n){"use strict";var r,i=e("../utils/common"),o=e("./trees"),s=e("./adler32"),a=e("./crc32"),l=e("./messages");function u(e,t){return e.msg=l[t],t}function c(e){return(e<<1)-(e>4?9:0)}function h(e){for(var t=e.length;--t>=0;)e[t]=0}function d(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(i.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function f(e,t){o._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,d(e.strm)}function p(e,t){e.pending_buf[e.pending++]=t}function m(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function g(e,t){var n,r,i=e.max_chain_length,o=e.strstart,s=e.prev_length,a=e.nice_match,l=e.strstart>e.w_size-262?e.strstart-(e.w_size-262):0,u=e.window,c=e.w_mask,h=e.prev,d=e.strstart+258,f=u[o+s-1],p=u[o+s];e.prev_length>=e.good_match&&(i>>=2),a>e.lookahead&&(a=e.lookahead);do{if(u[(n=t)+s]===p&&u[n+s-1]===f&&u[n]===u[o]&&u[++n]===u[o+1]){o+=2,n++;do{}while(u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&o<d);if(r=258-(d-o),o=d-258,r>s){if(e.match_start=t,s=r,r>=a)break;f=u[o+s-1],p=u[o+s]}}}while((t=h[t&c])>l&&0!=--i);return s<=e.lookahead?s:e.lookahead}function v(e){var t,n,r,o,l,u,c,h,d,f,p=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=p+(p-262)){i.arraySet(e.window,e.window,p,p,0),e.match_start-=p,e.strstart-=p,e.block_start-=p,t=n=e.hash_size;do{r=e.head[--t],e.head[t]=r>=p?r-p:0}while(--n);t=n=p;do{r=e.prev[--t],e.prev[t]=r>=p?r-p:0}while(--n);o+=p}if(0===e.strm.avail_in)break;if(u=e.strm,c=e.window,h=e.strstart+e.lookahead,d=o,f=void 0,(f=u.avail_in)>d&&(f=d),n=0===f?0:(u.avail_in-=f,i.arraySet(c,u.input,u.next_in,f,h),1===u.state.wrap?u.adler=s(u.adler,c,f,h):2===u.state.wrap&&(u.adler=a(u.adler,c,f,h)),u.next_in+=f,u.total_in+=f,f),e.lookahead+=n,e.lookahead+e.insert>=3)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+3-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<262&&0!==e.strm.avail_in)}function y(e,t){for(var n,r;;){if(e.lookahead<262){if(v(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-262&&(e.match_length=g(e,n)),e.match_length>=3)if(r=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(f(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(f(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(f(e,!1),0===e.strm.avail_out)?1:2}function b(e,t){for(var n,r,i;;){if(e.lookahead<262){if(v(e),e.lookahead<262&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-262&&(e.match_length=g(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,r=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(f(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=o._tr_tally(e,0,e.window[e.strstart-1]))&&f(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(f(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(f(e,!1),0===e.strm.avail_out)?1:2}function w(e,t,n,r,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=i}function _(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),h(this.dyn_ltree),h(this.dyn_dtree),h(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),h(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),h(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function x(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:113,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):u(e,-2)}function E(e){var t,n=x(e);return 0===n&&((t=e.state).window_size=2*t.w_size,h(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),n}function k(e,t,n,r,o,s){if(!e)return-2;var a=1;if(-1===t&&(t=6),r<0?(a=0,r=-r):r>15&&(a=2,r-=16),o<1||o>9||8!==n||r<8||r>15||t<0||t>9||s<0||s>4)return u(e,-2);8===r&&(r=9);var l=new _;return e.state=l,l.strm=e,l.wrap=a,l.gzhead=null,l.w_bits=r,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=o+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new i.Buf8(2*l.w_size),l.head=new i.Buf16(l.hash_size),l.prev=new i.Buf16(l.w_size),l.lit_bufsize=1<<o+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new i.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=s,l.method=n,E(e)}r=[new w(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(v(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,f(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-262&&(f(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(f(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(f(e,!1),e.strm.avail_out),1)})),new w(4,4,8,4,y),new w(4,5,16,8,y),new w(4,6,32,32,y),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],n.deflateInit=function(e,t){return k(e,t,8,15,8,0)},n.deflateInit2=k,n.deflateReset=E,n.deflateResetKeep=x,n.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?-2:(e.state.gzhead=t,0):-2},n.deflate=function(e,t){var n,i,s,l;if(!e||!e.state||t>5||t<0)return e?u(e,-2):-2;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return u(e,0===e.avail_out?-5:-2);if(i.strm=e,n=i.last_flush,i.last_flush=t,42===i.status)if(2===i.wrap)e.adler=0,p(i,31),p(i,139),p(i,8),i.gzhead?(p(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),p(i,255&i.gzhead.time),p(i,i.gzhead.time>>8&255),p(i,i.gzhead.time>>16&255),p(i,i.gzhead.time>>24&255),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(p(i,255&i.gzhead.extra.length),p(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=a(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(p(i,0),p(i,0),p(i,0),p(i,0),p(i,0),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,3),i.status=113);else{var g=8+(i.w_bits-8<<4)<<8;g|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(g|=32),g+=31-g%31,i.status=113,m(i,g),0!==i.strstart&&(m(i,e.adler>>>16),m(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(s=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),d(e),s=i.pending,i.pending!==i.pending_buf_size));)p(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){s=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),d(e),s=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,p(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),0===l&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){s=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),d(e),s=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,p(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>s&&(e.adler=a(e.adler,i.pending_buf,i.pending-s,s)),0===l&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&d(e),i.pending+2<=i.pending_buf_size&&(p(i,255&e.adler),p(i,e.adler>>8&255),e.adler=0,i.status=113)):i.status=113),0!==i.pending){if(d(e),0===e.avail_out)return i.last_flush=-1,0}else if(0===e.avail_in&&c(t)<=c(n)&&4!==t)return u(e,-5);if(666===i.status&&0!==e.avail_in)return u(e,-5);if(0!==e.avail_in||0!==i.lookahead||0!==t&&666!==i.status){var y=2===i.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(v(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(f(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(f(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(f(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var n,r,i,s,a=e.window;;){if(e.lookahead<=258){if(v(e),e.lookahead<=258&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=a[i=e.strstart-1])===a[++i]&&r===a[++i]&&r===a[++i]){s=e.strstart+258;do{}while(r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&r===a[++i]&&i<s);e.match_length=258-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(f(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(f(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(f(e,!1),0===e.strm.avail_out)?1:2}(i,t):r[i.level].func(i,t);if(3!==y&&4!==y||(i.status=666),1===y||3===y)return 0===e.avail_out&&(i.last_flush=-1),0;if(2===y&&(1===t?o._tr_align(i):5!==t&&(o._tr_stored_block(i,0,0,!1),3===t&&(h(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),d(e),0===e.avail_out))return i.last_flush=-1,0}return 4!==t?0:i.wrap<=0?1:(2===i.wrap?(p(i,255&e.adler),p(i,e.adler>>8&255),p(i,e.adler>>16&255),p(i,e.adler>>24&255),p(i,255&e.total_in),p(i,e.total_in>>8&255),p(i,e.total_in>>16&255),p(i,e.total_in>>24&255)):(m(i,e.adler>>>16),m(i,65535&e.adler)),d(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)},n.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&113!==t&&666!==t?u(e,-2):(e.state=null,113===t?u(e,-3):0):-2},n.deflateSetDictionary=function(e,t){var n,r,o,a,l,u,c,d,f=t.length;if(!e||!e.state)return-2;if(2===(a=(n=e.state).wrap)||1===a&&42!==n.status||n.lookahead)return-2;for(1===a&&(e.adler=s(e.adler,t,f,0)),n.wrap=0,f>=n.w_size&&(0===a&&(h(n.head),n.strstart=0,n.block_start=0,n.insert=0),d=new i.Buf8(n.w_size),i.arraySet(d,t,f-n.w_size,n.w_size,0),t=d,f=n.w_size),l=e.avail_in,u=e.next_in,c=e.input,e.avail_in=f,e.next_in=0,e.input=t,v(n);n.lookahead>=3;){r=n.strstart,o=n.lookahead-2;do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--o);n.strstart=r,n.lookahead=2,v(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=u,e.input=c,e.avail_in=l,n.wrap=a,0},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,r,i,o,s,a,l,u,c,h,d,f,p,m,g,v,y,b,w,_,x,E,k,S,T;n=e.state,r=e.next_in,S=e.input,i=r+(e.avail_in-5),o=e.next_out,T=e.output,s=o-(t-e.avail_out),a=o+(e.avail_out-257),l=n.dmax,u=n.wsize,c=n.whave,h=n.wnext,d=n.window,f=n.hold,p=n.bits,m=n.lencode,g=n.distcode,v=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;e:do{p<15&&(f+=S[r++]<<p,p+=8,f+=S[r++]<<p,p+=8),b=m[f&v];t:for(;;){if(f>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))T[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=m[(65535&b)+(f&(1<<w)-1)];continue t}if(32&w){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}_=65535&b,(w&=15)&&(p<w&&(f+=S[r++]<<p,p+=8),_+=f&(1<<w)-1,f>>>=w,p-=w),p<15&&(f+=S[r++]<<p,p+=8,f+=S[r++]<<p,p+=8),b=g[f&y];n:for(;;){if(f>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=g[(65535&b)+(f&(1<<w)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(x=65535&b,p<(w&=15)&&(f+=S[r++]<<p,(p+=8)<w&&(f+=S[r++]<<p,p+=8)),(x+=f&(1<<w)-1)>l){e.msg="invalid distance too far back",n.mode=30;break e}if(f>>>=w,p-=w,x>(w=o-s)){if((w=x-w)>c&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(E=0,k=d,0===h){if(E+=u-w,w<_){_-=w;do{T[o++]=d[E++]}while(--w);E=o-x,k=T}}else if(h<w){if(E+=u+h-w,(w-=h)<_){_-=w;do{T[o++]=d[E++]}while(--w);if(E=0,h<_){_-=w=h;do{T[o++]=d[E++]}while(--w);E=o-x,k=T}}}else if(E+=h-w,w<_){_-=w;do{T[o++]=d[E++]}while(--w);E=o-x,k=T}for(;_>2;)T[o++]=k[E++],T[o++]=k[E++],T[o++]=k[E++],_-=3;_&&(T[o++]=k[E++],_>1&&(T[o++]=k[E++]))}else{E=o-x;do{T[o++]=T[E++],T[o++]=T[E++],T[o++]=T[E++],_-=3}while(_>2);_&&(T[o++]=T[E++],_>1&&(T[o++]=T[E++]))}break}}break}}while(r<i&&o<a);r-=_=p>>3,f&=(1<<(p-=_<<3))-1,e.next_in=r,e.next_out=o,e.avail_in=r<i?i-r+5:5-(r-i),e.avail_out=o<a?a-o+257:257-(o-a),n.hold=f,n.bits=p}},{}],49:[function(e,t,n){"use strict";var r=e("../utils/common"),i=e("./adler32"),o=e("./crc32"),s=e("./inffast"),a=e("./inftrees");function l(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function u(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function c(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):-2}function h(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,c(e)):-2}function d(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?-2:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,h(e))):-2}function f(e,t){var n,r;return e?(r=new u,e.state=r,r.window=null,0!==(n=d(e,t))&&(e.state=null),n):-2}var p,m,g=!0;function v(e){if(g){var t;for(p=new r.Buf32(512),m=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,p,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,m,0,e.work,{bits:5}),g=!1}e.lencode=p,e.lenbits=9,e.distcode=m,e.distbits=5}function y(e,t,n,i){var o,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new r.Buf8(s.wsize)),i>=s.wsize?(r.arraySet(s.window,t,n-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):((o=s.wsize-s.wnext)>i&&(o=i),r.arraySet(s.window,t,n-i,o,s.wnext),(i-=o)?(r.arraySet(s.window,t,n-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=o,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=o))),0}n.inflateReset=h,n.inflateReset2=d,n.inflateResetKeep=c,n.inflateInit=function(e){return f(e,15)},n.inflateInit2=f,n.inflate=function(e,t){var n,u,c,h,d,f,p,m,g,b,w,_,x,E,k,S,T,C,N,O,I,R,A,P,z=0,L=new r.Buf8(4),D=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return-2;12===(n=e.state).mode&&(n.mode=13),d=e.next_out,c=e.output,p=e.avail_out,h=e.next_in,u=e.input,f=e.avail_in,m=n.hold,g=n.bits,b=f,w=p,R=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;g<16;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(2&n.wrap&&35615===m){n.check=0,L[0]=255&m,L[1]=m>>>8&255,n.check=o(n.check,L,2,0),m=0,g=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&m)<<8)+(m>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&m)){e.msg="unknown compression method",n.mode=30;break}if(g-=4,I=8+(15&(m>>>=4)),0===n.wbits)n.wbits=I;else if(I>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<I,e.adler=n.check=1,n.mode=512&m?10:12,m=0,g=0;break;case 2:for(;g<16;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(n.flags=m,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=m>>8&1),512&n.flags&&(L[0]=255&m,L[1]=m>>>8&255,n.check=o(n.check,L,2,0)),m=0,g=0,n.mode=3;case 3:for(;g<32;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.head&&(n.head.time=m),512&n.flags&&(L[0]=255&m,L[1]=m>>>8&255,L[2]=m>>>16&255,L[3]=m>>>24&255,n.check=o(n.check,L,4,0)),m=0,g=0,n.mode=4;case 4:for(;g<16;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.head&&(n.head.xflags=255&m,n.head.os=m>>8),512&n.flags&&(L[0]=255&m,L[1]=m>>>8&255,n.check=o(n.check,L,2,0)),m=0,g=0,n.mode=5;case 5:if(1024&n.flags){for(;g<16;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.length=m,n.head&&(n.head.extra_len=m),512&n.flags&&(L[0]=255&m,L[1]=m>>>8&255,n.check=o(n.check,L,2,0)),m=0,g=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((_=n.length)>f&&(_=f),_&&(n.head&&(I=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,u,h,_,I)),512&n.flags&&(n.check=o(n.check,u,_,h)),f-=_,h+=_,n.length-=_),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===f)break e;_=0;do{I=u[h+_++],n.head&&I&&n.length<65536&&(n.head.name+=String.fromCharCode(I))}while(I&&_<f);if(512&n.flags&&(n.check=o(n.check,u,_,h)),f-=_,h+=_,I)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===f)break e;_=0;do{I=u[h+_++],n.head&&I&&n.length<65536&&(n.head.comment+=String.fromCharCode(I))}while(I&&_<f);if(512&n.flags&&(n.check=o(n.check,u,_,h)),f-=_,h+=_,I)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;g<16;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(m!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}m=0,g=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;g<32;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}e.adler=n.check=l(m),m=0,g=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=d,e.avail_out=p,e.next_in=h,e.avail_in=f,n.hold=m,n.bits=g,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){m>>>=7&g,g-=7&g,n.mode=27;break}for(;g<3;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}switch(n.last=1&m,g-=1,3&(m>>>=1)){case 0:n.mode=14;break;case 1:if(v(n),n.mode=20,6===t){m>>>=2,g-=2;break e}break;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}m>>>=2,g-=2;break;case 14:for(m>>>=7&g,g-=7&g;g<32;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if((65535&m)!=(m>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&m,m=0,g=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(_=n.length){if(_>f&&(_=f),_>p&&(_=p),0===_)break e;r.arraySet(c,u,h,_,d),f-=_,h+=_,p-=_,d+=_,n.length-=_;break}n.mode=12;break;case 17:for(;g<14;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(n.nlen=257+(31&m),m>>>=5,g-=5,n.ndist=1+(31&m),m>>>=5,g-=5,n.ncode=4+(15&m),m>>>=4,g-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;g<3;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.lens[D[n.have++]]=7&m,m>>>=3,g-=3}for(;n.have<19;)n.lens[D[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,A={bits:n.lenbits},R=a(0,n.lens,0,19,n.lencode,0,n.work,A),n.lenbits=A.bits,R){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;S=(z=n.lencode[m&(1<<n.lenbits)-1])>>>16&255,T=65535&z,!((k=z>>>24)<=g);){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(T<16)m>>>=k,g-=k,n.lens[n.have++]=T;else{if(16===T){for(P=k+2;g<P;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(m>>>=k,g-=k,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}I=n.lens[n.have-1],_=3+(3&m),m>>>=2,g-=2}else if(17===T){for(P=k+3;g<P;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}g-=k,I=0,_=3+(7&(m>>>=k)),m>>>=3,g-=3}else{for(P=k+7;g<P;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}g-=k,I=0,_=11+(127&(m>>>=k)),m>>>=7,g-=7}if(n.have+_>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;_--;)n.lens[n.have++]=I}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,A={bits:n.lenbits},R=a(1,n.lens,0,n.nlen,n.lencode,0,n.work,A),n.lenbits=A.bits,R){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,A={bits:n.distbits},R=a(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,A),n.distbits=A.bits,R){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(f>=6&&p>=258){e.next_out=d,e.avail_out=p,e.next_in=h,e.avail_in=f,n.hold=m,n.bits=g,s(e,w),d=e.next_out,c=e.output,p=e.avail_out,h=e.next_in,u=e.input,f=e.avail_in,m=n.hold,g=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;S=(z=n.lencode[m&(1<<n.lenbits)-1])>>>16&255,T=65535&z,!((k=z>>>24)<=g);){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(S&&0==(240&S)){for(C=k,N=S,O=T;S=(z=n.lencode[O+((m&(1<<C+N)-1)>>C)])>>>16&255,T=65535&z,!(C+(k=z>>>24)<=g);){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}m>>>=C,g-=C,n.back+=C}if(m>>>=k,g-=k,n.back+=k,n.length=T,0===S){n.mode=26;break}if(32&S){n.back=-1,n.mode=12;break}if(64&S){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&S,n.mode=22;case 22:if(n.extra){for(P=n.extra;g<P;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.length+=m&(1<<n.extra)-1,m>>>=n.extra,g-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;S=(z=n.distcode[m&(1<<n.distbits)-1])>>>16&255,T=65535&z,!((k=z>>>24)<=g);){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(0==(240&S)){for(C=k,N=S,O=T;S=(z=n.distcode[O+((m&(1<<C+N)-1)>>C)])>>>16&255,T=65535&z,!(C+(k=z>>>24)<=g);){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}m>>>=C,g-=C,n.back+=C}if(m>>>=k,g-=k,n.back+=k,64&S){e.msg="invalid distance code",n.mode=30;break}n.offset=T,n.extra=15&S,n.mode=24;case 24:if(n.extra){for(P=n.extra;g<P;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}n.offset+=m&(1<<n.extra)-1,m>>>=n.extra,g-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===p)break e;if(_=w-p,n.offset>_){if((_=n.offset-_)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}_>n.wnext?(_-=n.wnext,x=n.wsize-_):x=n.wnext-_,_>n.length&&(_=n.length),E=n.window}else E=c,x=d-n.offset,_=n.length;_>p&&(_=p),p-=_,n.length-=_;do{c[d++]=E[x++]}while(--_);0===n.length&&(n.mode=21);break;case 26:if(0===p)break e;c[d++]=n.length,p--,n.mode=21;break;case 27:if(n.wrap){for(;g<32;){if(0===f)break e;f--,m|=u[h++]<<g,g+=8}if(w-=p,e.total_out+=w,n.total+=w,w&&(e.adler=n.check=n.flags?o(n.check,c,w,d-w):i(n.check,c,w,d-w)),w=p,(n.flags?m:l(m))!==n.check){e.msg="incorrect data check",n.mode=30;break}m=0,g=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;g<32;){if(0===f)break e;f--,m+=u[h++]<<g,g+=8}if(m!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}m=0,g=0}n.mode=29;case 29:R=1;break e;case 30:R=-3;break e;case 31:return-4;case 32:default:return-2}return e.next_out=d,e.avail_out=p,e.next_in=h,e.avail_in=f,n.hold=m,n.bits=g,(n.wsize||w!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&y(e,e.output,e.next_out,w-e.avail_out)?(n.mode=31,-4):(b-=e.avail_in,w-=e.avail_out,e.total_in+=b,e.total_out+=w,n.total+=w,n.wrap&&w&&(e.adler=n.check=n.flags?o(n.check,c,w,e.next_out-w):i(n.check,c,w,e.next_out-w)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0===b&&0===w||4===t)&&0===R&&(R=-5),R)},n.inflateEnd=function(e){if(!e||!e.state)return-2;var t=e.state;return t.window&&(t.window=null),e.state=null,0},n.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?-2:(n.head=t,t.done=!1,0):-2},n.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?-2:11===n.mode&&i(1,t,r,0)!==n.check?-3:y(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):-2},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var r=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,l,u,c,h,d){var f,p,m,g,v,y,b,w,_,x=d.bits,E=0,k=0,S=0,T=0,C=0,N=0,O=0,I=0,R=0,A=0,P=null,z=0,L=new r.Buf16(16),D=new r.Buf16(16),j=null,B=0;for(E=0;E<=15;E++)L[E]=0;for(k=0;k<l;k++)L[t[n+k]]++;for(C=x,T=15;T>=1&&0===L[T];T--);if(C>T&&(C=T),0===T)return u[c++]=20971520,u[c++]=20971520,d.bits=1,0;for(S=1;S<T&&0===L[S];S++);for(C<S&&(C=S),I=1,E=1;E<=15;E++)if(I<<=1,(I-=L[E])<0)return-1;if(I>0&&(0===e||1!==T))return-1;for(D[1]=0,E=1;E<15;E++)D[E+1]=D[E]+L[E];for(k=0;k<l;k++)0!==t[n+k]&&(h[D[t[n+k]]++]=k);if(0===e?(P=j=h,y=19):1===e?(P=i,z-=257,j=o,B-=257,y=256):(P=s,j=a,y=-1),A=0,k=0,E=S,v=c,N=C,O=0,m=-1,g=(R=1<<C)-1,1===e&&R>852||2===e&&R>592)return 1;for(;;){b=E-O,h[k]<y?(w=0,_=h[k]):h[k]>y?(w=j[B+h[k]],_=P[z+h[k]]):(w=96,_=0),f=1<<E-O,S=p=1<<N;do{u[v+(A>>O)+(p-=f)]=b<<24|w<<16|_|0}while(0!==p);for(f=1<<E-1;A&f;)f>>=1;if(0!==f?(A&=f-1,A+=f):A=0,k++,0==--L[E]){if(E===T)break;E=t[n+h[k]]}if(E>C&&(A&g)!==m){for(0===O&&(O=C),v+=S,I=1<<(N=E-O);N+O<T&&!((I-=L[N+O])<=0);)N++,I<<=1;if(R+=1<<N,1===e&&R>852||2===e&&R>592)return 1;u[m=A&g]=C<<24|N<<16|v-c|0}}return 0!==A&&(u[v+A]=E-O<<24|64<<16|0),d.bits=C,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,n){"use strict";var r=e("../utils/common");function i(e){for(var t=e.length;--t>=0;)e[t]=0}var o=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],s=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],l=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],u=new Array(576);i(u);var c=new Array(60);i(c);var h=new Array(512);i(h);var d=new Array(256);i(d);var f=new Array(29);i(f);var p,m,g,v=new Array(30);function y(e,t,n,r,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=e&&e.length}function b(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function w(e){return e<256?h[e]:h[256+(e>>>7)]}function _(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function x(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,_(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function E(e,t,n){x(e,n[2*t],n[2*t+1])}function k(e,t){var n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}function S(e,t,n){var r,i,o=new Array(16),s=0;for(r=1;r<=15;r++)o[r]=s=s+n[r-1]<<1;for(i=0;i<=t;i++){var a=e[2*i+1];0!==a&&(e[2*i]=k(o[a]++,a))}}function T(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function C(e){e.bi_valid>8?_(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function N(e,t,n,r){var i=2*t,o=2*n;return e[i]<e[o]||e[i]===e[o]&&r[t]<=r[n]}function O(e,t,n){for(var r=e.heap[n],i=n<<1;i<=e.heap_len&&(i<e.heap_len&&N(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!N(t,r,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=r}function I(e,t,n){var r,i,a,l,u=0;if(0!==e.last_lit)do{r=e.pending_buf[e.d_buf+2*u]<<8|e.pending_buf[e.d_buf+2*u+1],i=e.pending_buf[e.l_buf+u],u++,0===r?E(e,i,t):(E(e,(a=d[i])+256+1,t),0!==(l=o[a])&&x(e,i-=f[a],l),E(e,a=w(--r),n),0!==(l=s[a])&&x(e,r-=v[a],l))}while(u<e.last_lit);E(e,256,t)}function R(e,t){var n,r,i,o=t.dyn_tree,s=t.stat_desc.static_tree,a=t.stat_desc.has_stree,l=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<l;n++)0!==o[2*n]?(e.heap[++e.heap_len]=u=n,e.depth[n]=0):o[2*n+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,a&&(e.static_len-=s[2*i+1]);for(t.max_code=u,n=e.heap_len>>1;n>=1;n--)O(e,o,n);i=l;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],O(e,o,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,o[2*i]=o[2*n]+o[2*r],e.depth[i]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,o[2*n+1]=o[2*r+1]=i,e.heap[1]=i++,O(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,i,o,s,a,l=t.dyn_tree,u=t.max_code,c=t.stat_desc.static_tree,h=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,f=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(l[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)(o=l[2*l[2*(r=e.heap[n])+1]+1]+1)>p&&(o=p,m++),l[2*r+1]=o,r>u||(e.bl_count[o]++,s=0,r>=f&&(s=d[r-f]),a=l[2*r],e.opt_len+=a*(o+s),h&&(e.static_len+=a*(c[2*r+1]+s)));if(0!==m){do{for(o=p-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[p]--,m-=2}while(m>0);for(o=p;0!==o;o--)for(r=e.bl_count[o];0!==r;)(i=e.heap[--n])>u||(l[2*i+1]!==o&&(e.opt_len+=(o-l[2*i+1])*l[2*i],l[2*i+1]=o),r--)}}(e,t),S(o,u,e.bl_count)}function A(e,t,n){var r,i,o=-1,s=t[1],a=0,l=7,u=4;for(0===s&&(l=138,u=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)i=s,s=t[2*(r+1)+1],++a<l&&i===s||(a<u?e.bl_tree[2*i]+=a:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,a=0,o=i,0===s?(l=138,u=3):i===s?(l=6,u=3):(l=7,u=4))}function P(e,t,n){var r,i,o=-1,s=t[1],a=0,l=7,u=4;for(0===s&&(l=138,u=3),r=0;r<=n;r++)if(i=s,s=t[2*(r+1)+1],!(++a<l&&i===s)){if(a<u)do{E(e,i,e.bl_tree)}while(0!=--a);else 0!==i?(i!==o&&(E(e,i,e.bl_tree),a--),E(e,16,e.bl_tree),x(e,a-3,2)):a<=10?(E(e,17,e.bl_tree),x(e,a-3,3)):(E(e,18,e.bl_tree),x(e,a-11,7));a=0,o=i,0===s?(l=138,u=3):i===s?(l=6,u=3):(l=7,u=4)}}i(v);var z=!1;function L(e,t,n,i){x(e,0+(i?1:0),3),function(e,t,n,i){C(e),i&&(_(e,n),_(e,~n)),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n,!0)}n._tr_init=function(e){z||(function(){var e,t,n,r,i,l=new Array(16);for(n=0,r=0;r<28;r++)for(f[r]=n,e=0;e<1<<o[r];e++)d[n++]=r;for(d[n-1]=r,i=0,r=0;r<16;r++)for(v[r]=i,e=0;e<1<<s[r];e++)h[i++]=r;for(i>>=7;r<30;r++)for(v[r]=i<<7,e=0;e<1<<s[r]-7;e++)h[256+i++]=r;for(t=0;t<=15;t++)l[t]=0;for(e=0;e<=143;)u[2*e+1]=8,e++,l[8]++;for(;e<=255;)u[2*e+1]=9,e++,l[9]++;for(;e<=279;)u[2*e+1]=7,e++,l[7]++;for(;e<=287;)u[2*e+1]=8,e++,l[8]++;for(S(u,287,l),e=0;e<30;e++)c[2*e+1]=5,c[2*e]=k(e,5);p=new y(u,o,257,286,15),m=new y(c,s,0,30,15),g=new y(new Array(0),a,0,19,7)}(),z=!0),e.l_desc=new b(e.dyn_ltree,p),e.d_desc=new b(e.dyn_dtree,m),e.bl_desc=new b(e.bl_tree,g),e.bi_buf=0,e.bi_valid=0,T(e)},n._tr_stored_block=L,n._tr_flush_block=function(e,t,n,r){var i,o,s=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),R(e,e.l_desc),R(e,e.d_desc),s=function(e){var t;for(A(e,e.dyn_ltree,e.l_desc.max_code),A(e,e.dyn_dtree,e.d_desc.max_code),R(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*l[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!==t?L(e,t,n,r):4===e.strategy||o===i?(x(e,2+(r?1:0),3),I(e,u,c)):(x(e,4+(r?1:0),3),function(e,t,n,r){var i;for(x(e,t-257,5),x(e,n-1,5),x(e,r-4,4),i=0;i<r;i++)x(e,e.bl_tree[2*l[i]+1],3);P(e,e.dyn_ltree,t-1),P(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),I(e,e.dyn_ltree,e.dyn_dtree)),T(e),r&&C(e)},n._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(d[n]+256+1)]++,e.dyn_dtree[2*w(t)]++),e.last_lit===e.lit_bufsize-1},n._tr_align=function(e){x(e,2,3),E(e,256,u),function(e){16===e.bi_valid?(_(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){"use strict";t.exports="function"==typeof r?r:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)}).call(this,n(90).Buffer,n(12),n(94).setImmediate)},function(e,t,n){"use strict";(function(e){var r=n(18),i=n(14),o=n(2),s=n(13),a=n(0),l=n(1);n(26),n(16),n(28);function u(e,t){return new r.a(e,t)}u.VERSION=l.b,void 0!==e&&(e.EPUBJS_VERSION=l.b),u.Book=r.a,u.Rendition=i.a,u.Contents=s.a,u.CFI=o.a,u.utils=a,t.a=u}).call(this,n(12))},function(e,t,n){"use strict";var r=n(11),i=r(n(8)),o=r(n(42)),s=r(n(46)),a=r(n(110)),l=document.getElementById("root"),u=function(e){var t=e.start.cfi;localStorage.setItem("cfi",t)},c=function(){var e=localStorage.getItem("cfi");return i.default.createElement(s.default,{url:a.default,onRelocated:u,cfi:e,showPercentage:!0})};o.default.render(i.default.createElement(c,null),l)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(30),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,s=i?Symbol.for("react.portal"):60106,a=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,h=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,f=i?Symbol.for("react.suspense"):60113,p=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function _(){}function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=w.prototype;var E=x.prototype=new _;E.constructor=x,r(E,w.prototype),E.isPureReactComponent=!0;var k={current:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,i={},s=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(s=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:s,ref:a,props:i,_owner:k.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g,I=[];function R(e,t,n,r){if(I.length){var i=I.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function P(e,t,n){return null==e?0:function e(t,n,r,i){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case s:l=!0}}if(l)return r(i,t,""===n?"."+z(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+z(a=t[u],u);l+=e(a,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=g&&t[g]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(a=t.next()).done;)l+=e(a=a.value,c=n+z(a,u++),r,i);else if("object"===a)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(O,"$&/")+"/"),P(e,D,t=R(t,o,r,i)),A(t)}var B={current:null};function M(){var e=B.current;if(null===e)throw Error(v(321));return e}var F={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;P(e,L,t=R(null,null,t,n)),A(t)},count:function(e){return P(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!N(e))throw Error(v(143));return e}},t.Component=w,t.Fragment=a,t.Profiler=u,t.PureComponent=x,t.StrictMode=l,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var i=r({},e.props),s=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=k.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)S.call(t,c)&&!T.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var h=0;h<c;h++)u[h]=arguments[h+2];i.children=u}return{$$typeof:o,type:e.type,key:s,ref:a,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=N,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return M().useCallback(e,t)},t.useContext=function(e,t){return M().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return M().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return M().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return M().useLayoutEffect(e,t)},t.useMemo=function(e,t){return M().useMemo(e,t)},t.useReducer=function(e,t,n){return M().useReducer(e,t,n)},t.useRef=function(e){return M().useRef(e)},t.useState=function(e){return M().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(43)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(8),i=n(30),o=n(44);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(s(227));function a(e,t,n,r,i,o,s,a,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var l=!1,u=null,c=!1,h=null,d={onError:function(e){l=!0,u=e}};function f(e,t,n,r,i,o,s,c,h){l=!1,u=null,a.apply(d,arguments)}var p=null,m=null,g=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,i,o,a,d,p){if(f.apply(this,arguments),l){if(!l)throw Error(s(198));var m=u;l=!1,u=null,c||(c=!0,h=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function w(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(s(96,e));if(!x[n]){if(!t.extractEvents)throw Error(s(97,e));for(var r in x[n]=t,n=t.eventTypes){var i=void 0,o=n[r],a=t,l=r;if(E.hasOwnProperty(l))throw Error(s(99,l));E[l]=o;var u=o.phasedRegistrationNames;if(u){for(i in u)u.hasOwnProperty(i)&&_(u[i],a,l);i=!0}else o.registrationName?(_(o.registrationName,a,l),i=!0):i=!1;if(!i)throw Error(s(98,r,e))}}}}function _(e,t,n){if(k[e])throw Error(s(100,e));k[e]=t,S[e]=t.eventTypes[n].dependencies}var x=[],E={},k={},S={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(s(102,t));b[t]=r,n=!0}}n&&w()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),N=null,O=null,I=null;function R(e){if(e=m(e)){if("function"!=typeof N)throw Error(s(280));var t=e.stateNode;t&&(t=p(t),N(e.stateNode,e.type,t))}}function A(e){O?I?I.push(e):I=[e]:O=e}function P(){if(O){var e=O,t=I;if(I=O=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function z(e,t){return e(t)}function L(e,t,n,r,i){return e(t,n,r,i)}function D(){}var j=z,B=!1,M=!1;function F(){null===O&&null===I||(D(),P())}function U(e,t,n){if(M)return e(t,n);M=!0;try{return j(e,t,n)}finally{M=!1,F()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,H={},V={};function Y(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var X={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){X[e]=new Y(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];X[t]=new Y(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){X[e]=new Y(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){X[e]=new Y(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){X[e]=new Y(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){X[e]=new Y(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){X[e]=new Y(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){X[e]=new Y(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){X[e]=new Y(e,5,!1,e.toLowerCase(),null,!1)}));var Z=/[\-:]([a-z])/g;function $(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Z,$);X[t]=new Y(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Z,$);X[t]=new Y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Z,$);X[t]=new Y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){X[e]=new Y(e,1,!1,e.toLowerCase(),null,!1)})),X.xlinkHref=new Y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){X[e]=new Y(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function K(e,t,n,r){var i=X.hasOwnProperty(t)?X[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!q.call(V,e)||!q.call(H,e)&&(W.test(e)?V[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var Q=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,oe=J?Symbol.for("react.provider"):60109,se=J?Symbol.for("react.context"):60110,ae=J?Symbol.for("react.concurrent_mode"):60111,le=J?Symbol.for("react.forward_ref"):60112,ue=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,he=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,fe=J?Symbol.for("react.block"):60121,pe="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=pe&&e[pe]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ue:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case se:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case he:return ge(e.type);case fe:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=ge(e.type);n=null,r&&(n=ge(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(Q,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function _e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&K(e,"checked",t,!1)}function Se(e,t){ke(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ce(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ce(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ce(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ne(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Oe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(s(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(s(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Ae(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Pe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var ze="http://www.w3.org/1999/xhtml",Le="http://www.w3.org/2000/svg";function De(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function je(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?De(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Be,Me=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Le||"innerHTML"in e)e.innerHTML=t;else{for((Be=Be||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Be.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},qe={},He={};function Ve(e){if(qe[e])return qe[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return qe[e]=n[t];return e}C&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var Ye=Ve("animationend"),Xe=Ve("animationiteration"),Ze=Ve("animationstart"),$e=Ve("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ke=new("function"==typeof WeakMap?WeakMap:Map);function Qe(e){var t=Ke.get(e);return void 0===t&&(t=new Map,Ke.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(s(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(s(188))}if(n.return!==r.return)n=i,r=o;else{for(var a=!1,l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(s(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function st(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function at(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,st),ot)throw Error(s(95));if(c)throw e=h,c=!1,h=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ut(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ht(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function ft(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Cn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,s=e.eventSystemFlags;0===n&&(s|=64);for(var a=null,l=0;l<x.length;l++){var u=x[l];u&&(u=u.extractEvents(r,t,o,i,s))&&(a=rt(a,u))}at(a)}}function pt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Zt(t,"scroll",!0);break;case"focus":case"blur":Zt(t,"focus",!0),Zt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ut(e)&&Zt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Xt(e,t)}n.set(e,null)}}var mt,gt,vt,yt=!1,bt=[],wt=null,_t=null,xt=null,Et=new Map,kt=new Map,St=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ct="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Nt(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Ot(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":xt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":kt.delete(t.pointerId)}}function It(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Nt(t,n,r,i,o),null!==t&&(null!==(t=Nn(t))&&gt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=Cn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;var t=Qt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Nn(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function Pt(e,t,n){At(e)&&n.delete(t)}function zt(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Nn(e.blockedOn))&&mt(e);break}var t=Qt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&At(wt)&&(wt=null),null!==_t&&At(_t)&&(_t=null),null!==xt&&At(xt)&&(xt=null),Et.forEach(Pt),kt.forEach(Pt)}function Lt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,zt)))}function Dt(e){function t(t){return Lt(t,e)}if(0<bt.length){Lt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Lt(wt,e),null!==_t&&Lt(_t,e),null!==xt&&Lt(xt,e),Et.forEach(t),kt.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Rt(n),null===n.blockedOn&&St.shift()}var jt={},Bt=new Map,Mt=new Map,Ft=["abort","abort",Ye,"animationEnd",Xe,"animationIteration",Ze,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$e,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Mt.set(r,t),Bt.set(r,o),jt[i]=o}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Ft,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),qt=0;qt<Wt.length;qt++)Mt.set(Wt[qt],0);var Ht=o.unstable_UserBlockingPriority,Vt=o.unstable_runWithPriority,Yt=!0;function Xt(e,t){Zt(t,e,!1)}function Zt(e,t,n){var r=Mt.get(t);switch(void 0===r?2:r){case 0:r=$t.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Kt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function $t(e,t,n,r){B||D();var i=Kt,o=B;B=!0;try{L(i,e,t,n,r)}finally{(B=o)||F()}}function Gt(e,t,n,r){Vt(Ht,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){if(Yt)if(0<bt.length&&-1<Tt.indexOf(e))e=Nt(null,e,t,n,r),bt.push(e);else{var i=Qt(e,t,n,r);if(null===i)Ot(e,r);else if(-1<Tt.indexOf(e))e=Nt(i,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return wt=It(wt,e,t,n,r,i),!0;case"dragenter":return _t=It(_t,e,t,n,r,i),!0;case"mouseover":return xt=It(xt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Et.set(o,It(Et.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,kt.set(o,It(kt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Ot(e,r),e=dt(e,r,null,t);try{U(ft,e)}finally{ht(e)}}}}function Qt(e,t,n,r){if(null!==(n=Cn(n=lt(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{U(ft,e)}finally{ht(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(s(62,""))}}function sn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var an=ze;function ln(e,t){var n=Qe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)pt(t[r],e,n)}function un(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function hn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=hn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=hn(r)}}function fn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,gn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function _n(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),kn="__reactInternalInstance$"+En,Sn="__reactEventHandlers$"+En,Tn="__reactContainere$"+En;function Cn(e){var t=e[kn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[kn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=xn(e);null!==e;){if(n=e[kn])return n;e=xn(e)}return t}n=(e=n).parentNode}return null}function Nn(e){return!(e=e[kn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function On(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function In(e){return e[Sn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function An(e,t){var n=e.stateNode;if(!n)return null;var r=p(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}function Pn(e,t,n){(t=An(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function zn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)Pn(n[t],"captured",e);for(t=0;t<n.length;t++)Pn(n[t],"bubbled",e)}}function Ln(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=An(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Dn(e){e&&e.dispatchConfig.registrationName&&Ln(e._targetInst,null,e)}function jn(e){it(e,zn)}var Bn=null,Mn=null,Fn=null;function Un(){if(Fn)return Fn;var e,t,n=Mn,r=n.length,i="value"in Bn?Bn.value:Bn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===i[o-t];t++);return Fn=i.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function qn(){return!1}function Hn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:qn,this.isPropagationStopped=qn,this}function Vn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Yn(e){if(!(e instanceof this))throw Error(s(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Xn(e){e.eventPool=[],e.getPooled=Vn,e.release=Yn}i(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:qn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=qn,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Xn(n),n},Xn(Hn);var Zn=Hn.extend({data:null}),$n=Hn.extend({data:null}),Gn=[9,13,27,32],Kn=C&&"CompositionEvent"in window,Qn=null;C&&"documentMode"in document&&(Qn=document.documentMode);var Jn=C&&"TextEvent"in window&&!Qn,er=C&&(!Kn||Qn&&8<Qn&&11>=Qn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var sr=!1;var ar={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Kn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else sr?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(sr||o!==nr.compositionStart?o===nr.compositionEnd&&sr&&(i=Un()):(Mn="value"in(Bn=r)?Bn.value:Bn.textContent,sr=!0)),o=Zn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),jn(o),i=o):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(sr)return"compositionend"===e||!Kn&&ir(e,t)?(e=Un(),Fn=Mn=Bn=null,sr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=$n.getPooled(nr.beforeInput,t,n,r)).data=e,jn(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ur(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function hr(e,t,n){return(e=Hn.getPooled(cr.change,e,t,n)).type="change",A(n),jn(e),e}var dr=null,fr=null;function pr(e){at(e)}function mr(e){if(_e(On(e)))return e}function gr(e,t){if("change"===e)return t}var vr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),fr=dr=null)}function br(e){if("value"===e.propertyName&&mr(fr))if(e=hr(fr,e,lt(e)),B)at(e);else{B=!0;try{z(pr,e)}finally{B=!1,F()}}}function wr(e,t,n){"focus"===e?(yr(),fr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function _r(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(fr)}function xr(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}C&&(vr=ut("input")&&(!document.documentMode||9<document.documentMode));var kr={eventTypes:cr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var i=t?On(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var s=gr;else if(ur(i))if(vr)s=Er;else{s=_r;var a=wr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(s=xr);if(s&&(s=s(e,t)))return hr(s,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Ce(i,"number",i.value)}},Sr=Hn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Nr(){return Cr}var Or=0,Ir=0,Rr=!1,Ar=!1,Pr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Nr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Or;return Or=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ir;return Ir=e.screenY,Ar?"mousemove"===e.type?e.screenY-t:0:(Ar=!0,0)}}),zr=Pr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Lr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Dr={eventTypes:Lr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,s="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!s&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,s)?(s=t,null!==(t=(t=n.relatedTarget||n.toElement)?Cn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):s=null;if(s===t)return null;if("mouseout"===e||"mouseover"===e)var a=Pr,l=Lr.mouseLeave,u=Lr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(a=zr,l=Lr.pointerLeave,u=Lr.pointerEnter,c="pointer");if(e=null==s?o:On(s),o=null==t?o:On(t),(l=a.getPooled(l,s,n,r)).type=c+"leave",l.target=e,l.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,c=t,(r=s)&&c)e:{for(u=c,s=0,e=a=r;e;e=Rn(e))s++;for(e=0,t=u;t;t=Rn(t))e++;for(;0<s-e;)a=Rn(a),s--;for(;0<e-s;)u=Rn(u),e--;for(;s--;){if(a===u||a===u.alternate)break e;a=Rn(a),u=Rn(u)}a=null}else a=null;for(u=a,a=[];r&&r!==u&&(null===(s=r.alternate)||s!==u);)a.push(r),r=Rn(r);for(r=[];c&&c!==u&&(null===(s=c.alternate)||s!==u);)r.push(c),c=Rn(c);for(c=0;c<a.length;c++)Ln(a[c],"bubbled",l);for(c=r.length;0<c--;)Ln(r[c],"captured",n);return 0==(64&i)?[l]:[l,n]}};var jr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Br=Object.prototype.hasOwnProperty;function Mr(e,t){if(jr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Br.call(t,n[r])||!jr(e[n[r]],t[n[r]]))return!1;return!0}var Fr=C&&"documentMode"in document&&11>=document.documentMode,Ur={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,qr=null,Hr=null,Vr=!1;function Yr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Wr||Wr!==cn(n)?null:("selectionStart"in(n=Wr)&&pn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Mr(Hr,n)?null:(Hr=n,(e=Hn.getPooled(Ur.select,qr,e,t)).type="select",e.target=Wr,jn(e),e))}var Xr={eventTypes:Ur,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Qe(i),o=S.onSelect;for(var s=0;s<o.length;s++)if(!i.has(o[s])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?On(t):window,e){case"focus":(ur(i)||"true"===i.contentEditable)&&(Wr=i,qr=t,Hr=null);break;case"blur":Hr=qr=Wr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,Yr(n,r);case"selectionchange":if(Fr)break;case"keydown":case"keyup":return Yr(n,r)}return null}},Zr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),$r=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=Sr.extend({relatedTarget:null});function Kr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Qr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Sr.extend({key:function(e){if(e.key){var t=Qr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Kr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Nr,charCode:function(e){return"keypress"===e.type?Kr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Kr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Pr.extend({dataTransfer:null}),ni=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Nr}),ri=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Pr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:jt,extractEvents:function(e,t,n,r){var i=Bt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Kr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case Ye:case Xe:case Ze:e=Zr;break;case $e:e=ri;break;case"scroll":e=Sr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=$r;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=zr;break;default:e=Hn}return jn(t=e.getPooled(i,t,n,r)),t}};if(y)throw Error(s(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),p=In,m=Nn,g=On,T({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Dr,ChangeEventPlugin:kr,SelectEventPlugin:Xr,BeforeInputEventPlugin:ar});var si=[],ai=-1;function li(e){0>ai||(e.current=si[ai],si[ai]=null,ai--)}function ui(e,t){ai++,si[ai]=e.current,e.current=t}var ci={},hi={current:ci},di={current:!1},fi=ci;function pi(e,t){var n=e.type.contextTypes;if(!n)return ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=(e=e.childContextTypes)}function gi(){li(di),li(hi)}function vi(e,t,n){if(hi.current!==ci)throw Error(s(168));ui(hi,t),ui(di,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(s(108,ge(t)||"Unknown",o));return i({},n,{},r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ci,fi=hi.current,ui(hi,e),ui(di,di.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(s(169));n?(e=yi(e,t,fi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(hi),ui(hi,e)):li(di),ui(di,n)}var _i=o.unstable_runWithPriority,xi=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,ki=o.unstable_requestPaint,Si=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Ci=o.unstable_ImmediatePriority,Ni=o.unstable_UserBlockingPriority,Oi=o.unstable_NormalPriority,Ii=o.unstable_LowPriority,Ri=o.unstable_IdlePriority,Ai={},Pi=o.unstable_shouldYield,zi=void 0!==ki?ki:function(){},Li=null,Di=null,ji=!1,Bi=Si(),Mi=1e4>Bi?Si:function(){return Si()-Bi};function Fi(){switch(Ti()){case Ci:return 99;case Ni:return 98;case Oi:return 97;case Ii:return 96;case Ri:return 95;default:throw Error(s(332))}}function Ui(e){switch(e){case 99:return Ci;case 98:return Ni;case 97:return Oi;case 96:return Ii;case 95:return Ri;default:throw Error(s(332))}}function Wi(e,t){return e=Ui(e),_i(e,t)}function qi(e,t,n){return e=Ui(e),xi(e,t,n)}function Hi(e){return null===Li?(Li=[e],Di=xi(Ci,Yi)):Li.push(e),Ai}function Vi(){if(null!==Di){var e=Di;Di=null,Ei(e)}Yi()}function Yi(){if(!ji&&null!==Li){ji=!0;var e=0;try{var t=Li;Wi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Li=null}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),xi(Ci,Vi),t}finally{ji=!1}}}function Xi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Zi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var $i={current:null},Gi=null,Ki=null,Qi=null;function Ji(){Qi=Ki=Gi=null}function eo(e){var t=$i.current;li($i),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Gi=e,Qi=Ki=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Is=!0),e.firstContext=null)}function ro(e,t){if(Qi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Qi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ki){if(null===Gi)throw Error(s(308));Ki=t,Gi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Ki=Ki.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function so(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ao(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function uo(e,t){var n=e.alternate;null!==n&&so(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,r){var o=e.updateQueue;io=!1;var s=o.baseQueue,a=o.shared.pending;if(null!==a){if(null!==s){var l=s.next;s.next=a.next,a.next=l}s=a,o.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=a))}if(null!==s){l=s.next;var u=o.baseState,c=0,h=null,d=null,f=null;if(null!==l)for(var p=l;;){if((a=p.expirationTime)<r){var m={expirationTime:p.expirationTime,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null};null===f?(d=f=m,h=u):f=f.next=m,a>c&&(c=a)}else{null!==f&&(f=f.next={expirationTime:1073741823,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null}),ol(a,p.suspenseConfig);e:{var g=e,v=p;switch(a=t,m=n,v.tag){case 1:if("function"==typeof(g=v.payload)){u=g.call(m,u,a);break e}u=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(a="function"==typeof(g=v.payload)?g.call(m,u,a):g))break e;u=i({},u,a);break e;case 2:io=!0}}null!==p.callback&&(e.effectTag|=32,null===(a=o.effects)?o.effects=[p]:a.push(p))}if(null===(p=p.next)||p===l){if(null===(a=o.shared.pending))break;p=s.next=a.next,a.next=l,o.baseQueue=s=a,o.shared.pending=null}}null===f?h=u:f.next=d,o.baseState=h,o.baseQueue=f,sl(c),e.expirationTime=c,e.memoizedState=u}}function ho(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(s(191,r));r.call(i)}}}var fo=G.ReactCurrentBatchConfig,po=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ya(),i=fo.suspense;(i=ao(r=Xa(r,e,i),i)).payload=t,null!=n&&(i.callback=n),lo(e,i),Za(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ya(),i=fo.suspense;(i=ao(r=Xa(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),lo(e,i),Za(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ya(),r=fo.suspense;(r=ao(n=Xa(n,e,r),r)).tag=2,null!=t&&(r.callback=t),lo(e,r),Za(e,n)}};function vo(e,t,n,r,i,o,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,s):!t.prototype||!t.prototype.isPureReactComponent||(!Mr(n,r)||!Mr(i,o))}function yo(e,t,n){var r=!1,i=ci,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=mi(t)?fi:hi.current,o=(r=null!=(r=t.contextTypes))?pi(e,i):ci),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=po,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=mi(t)?fi:hi.current,i.context=pi(e,o)),co(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&go.enqueueReplaceState(i,i.state,null),co(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var _o=Array.isArray;function xo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var r=n.stateNode}if(!r)throw Error(s(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===po&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ko(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ol(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=xo(e,t,n),r.return=e,r):((r=Cl(n.type,n.key,n.props,null,e.mode,r)).ref=xo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Il(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function h(e,t,n,r,o){return null===t||7!==t.tag?((t=Nl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ol(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Cl(t.type,t.key,t.props,null,e.mode,n)).ref=xo(e,null,t),n.return=e,n;case te:return(t=Il(t,e.mode,n)).return=e,t}if(_o(t)||me(t))return(t=Nl(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function f(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?h(e,t,n.props.children,r,i):u(e,t,n,r):null;case te:return n.key===i?c(e,t,n,r):null}if(_o(n)||me(n))return null!==i?null:h(e,t,n,r,null);Eo(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?h(t,e,r.props.children,i,r.key):u(t,e,r,i);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(_o(r)||me(r))return h(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function m(i,s,a,l){for(var u=null,c=null,h=s,m=s=0,g=null;null!==h&&m<a.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var v=f(i,h,a[m],l);if(null===v){null===h&&(h=g);break}e&&h&&null===v.alternate&&t(i,h),s=o(v,s,m),null===c?u=v:c.sibling=v,c=v,h=g}if(m===a.length)return n(i,h),u;if(null===h){for(;m<a.length;m++)null!==(h=d(i,a[m],l))&&(s=o(h,s,m),null===c?u=h:c.sibling=h,c=h);return u}for(h=r(i,h);m<a.length;m++)null!==(g=p(h,i,m,a[m],l))&&(e&&null!==g.alternate&&h.delete(null===g.key?m:g.key),s=o(g,s,m),null===c?u=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(i,e)})),u}function g(i,a,l,u){var c=me(l);if("function"!=typeof c)throw Error(s(150));if(null==(l=c.call(l)))throw Error(s(151));for(var h=c=null,m=a,g=a=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=f(i,m,y.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(i,m),a=o(b,a,g),null===h?c=b:h.sibling=b,h=b,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(i,y.value,u))&&(a=o(y,a,g),null===h?c=y:h.sibling=y,h=y);return c}for(m=r(i,m);!y.done;g++,y=l.next())null!==(y=p(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),a=o(y,a,g),null===h?c=y:h.sibling=y,h=y);return e&&m.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var u="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case ee:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(o.type===ne){n(e,u.sibling),(r=i(u,o.props.children)).return=e,e=r;break e}break;default:if(u.elementType===o.type){n(e,u.sibling),(r=i(u,o.props)).ref=xo(e,u,o),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}o.type===ne?((r=Nl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Cl(o.type,o.key,o.props,null,e.mode,l)).ref=xo(e,r,o),l.return=e,e=l)}return a(e);case te:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Il(o,e.mode,l)).return=e,e=r}return a(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Ol(o,e.mode,l)).return=e,e=r),a(e);if(_o(o))return m(e,r,o,l);if(me(o))return g(e,r,o,l);if(c&&Eo(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(s(152,e.displayName||e.name||"Component"))}return n(e,r)}}var So=ko(!0),To=ko(!1),Co={},No={current:Co},Oo={current:Co},Io={current:Co};function Ro(e){if(e===Co)throw Error(s(174));return e}function Ao(e,t){switch(ui(Io,t),ui(Oo,e),ui(No,Co),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:je(null,"");break;default:t=je(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(No),ui(No,t)}function Po(){li(No),li(Oo),li(Io)}function zo(e){Ro(Io.current);var t=Ro(No.current),n=je(t,e.type);t!==n&&(ui(Oo,e),ui(No,n))}function Lo(e){Oo.current===e&&(li(No),li(Oo))}var Do={current:0};function jo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Bo(e,t){return{responder:e,props:t}}var Mo=G.ReactCurrentDispatcher,Fo=G.ReactCurrentBatchConfig,Uo=0,Wo=null,qo=null,Ho=null,Vo=!1;function Yo(){throw Error(s(321))}function Xo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!jr(e[n],t[n]))return!1;return!0}function Zo(e,t,n,r,i,o){if(Uo=o,Wo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Mo.current=null===e||null===e.memoizedState?vs:ys,e=n(r,i),t.expirationTime===Uo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(s(301));o+=1,Ho=qo=null,t.updateQueue=null,Mo.current=bs,e=n(r,i)}while(t.expirationTime===Uo)}if(Mo.current=gs,t=null!==qo&&null!==qo.next,Uo=0,Ho=qo=Wo=null,Vo=!1,t)throw Error(s(300));return e}function $o(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ho?Wo.memoizedState=Ho=e:Ho=Ho.next=e,Ho}function Go(){if(null===qo){var e=Wo.alternate;e=null!==e?e.memoizedState:null}else e=qo.next;var t=null===Ho?Wo.memoizedState:Ho.next;if(null!==t)Ho=t,qo=e;else{if(null===e)throw Error(s(310));e={memoizedState:(qo=e).memoizedState,baseState:qo.baseState,baseQueue:qo.baseQueue,queue:qo.queue,next:null},null===Ho?Wo.memoizedState=Ho=e:Ho=Ho.next=e}return Ho}function Ko(e,t){return"function"==typeof t?t(e):t}function Qo(e){var t=Go(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=qo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var a=i.next;i.next=o.next,o.next=a}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=a=o=null,u=i;do{var c=u.expirationTime;if(c<Uo){var h={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(a=l=h,o=r):l=l.next=h,c>Wo.expirationTime&&(Wo.expirationTime=c,sl(c))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),ol(c,u.suspenseConfig),r=u.eagerReducer===e?u.eagerState:e(r,u.action);u=u.next}while(null!==u&&u!==i);null===l?o=r:l.next=a,jr(r,t.memoizedState)||(Is=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Jo(e){var t=Go(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var a=i=i.next;do{o=e(o,a.action),a=a.next}while(a!==i);jr(o,t.memoizedState)||(Is=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function es(e){var t=$o();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ko,lastRenderedState:e}).dispatch=ms.bind(null,Wo,e),[t.memoizedState,e]}function ts(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wo.updateQueue)?(t={lastEffect:null},Wo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ns(){return Go().memoizedState}function rs(e,t,n,r){var i=$o();Wo.effectTag|=e,i.memoizedState=ts(1|t,n,void 0,void 0===r?null:r)}function is(e,t,n,r){var i=Go();r=void 0===r?null:r;var o=void 0;if(null!==qo){var s=qo.memoizedState;if(o=s.destroy,null!==r&&Xo(r,s.deps))return void ts(t,n,o,r)}Wo.effectTag|=e,i.memoizedState=ts(1|t,n,o,r)}function os(e,t){return rs(516,4,e,t)}function ss(e,t){return is(516,4,e,t)}function as(e,t){return is(4,2,e,t)}function ls(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function us(e,t,n){return n=null!=n?n.concat([e]):null,is(4,2,ls.bind(null,t,e),n)}function cs(){}function hs(e,t){return $o().memoizedState=[e,void 0===t?null:t],e}function ds(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function fs(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ps(e,t,n){var r=Fi();Wi(98>r?98:r,(function(){e(!0)})),Wi(97<r?97:r,(function(){var r=Fo.suspense;Fo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Fo.suspense=r}}))}function ms(e,t,n){var r=Ya(),i=fo.suspense;i={expirationTime:r=Xa(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Wo||null!==o&&o===Wo)Vo=!0,i.expirationTime=Uo,Wo.expirationTime=Uo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,a=o(s,n);if(i.eagerReducer=o,i.eagerState=a,jr(a,s))return}catch(e){}Za(e,r)}}var gs={readContext:ro,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo,useResponder:Yo,useDeferredValue:Yo,useTransition:Yo},vs={readContext:ro,useCallback:hs,useContext:ro,useEffect:os,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,rs(4,2,ls.bind(null,t,e),n)},useLayoutEffect:function(e,t){return rs(4,2,e,t)},useMemo:function(e,t){var n=$o();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=$o();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ms.bind(null,Wo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},$o().memoizedState=e},useState:es,useDebugValue:cs,useResponder:Bo,useDeferredValue:function(e,t){var n=es(e),r=n[0],i=n[1];return os((function(){var n=Fo.suspense;Fo.suspense=void 0===t?null:t;try{i(e)}finally{Fo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=es(!1),n=t[0];return t=t[1],[hs(ps.bind(null,t,e),[t,e]),n]}},ys={readContext:ro,useCallback:ds,useContext:ro,useEffect:ss,useImperativeHandle:us,useLayoutEffect:as,useMemo:fs,useReducer:Qo,useRef:ns,useState:function(){return Qo(Ko)},useDebugValue:cs,useResponder:Bo,useDeferredValue:function(e,t){var n=Qo(Ko),r=n[0],i=n[1];return ss((function(){var n=Fo.suspense;Fo.suspense=void 0===t?null:t;try{i(e)}finally{Fo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qo(Ko),n=t[0];return t=t[1],[ds(ps.bind(null,t,e),[t,e]),n]}},bs={readContext:ro,useCallback:ds,useContext:ro,useEffect:ss,useImperativeHandle:us,useLayoutEffect:as,useMemo:fs,useReducer:Jo,useRef:ns,useState:function(){return Jo(Ko)},useDebugValue:cs,useResponder:Bo,useDeferredValue:function(e,t){var n=Jo(Ko),r=n[0],i=n[1];return ss((function(){var n=Fo.suspense;Fo.suspense=void 0===t?null:t;try{i(e)}finally{Fo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Ko),n=t[0];return t=t[1],[ds(ps.bind(null,t,e),[t,e]),n]}},ws=null,_s=null,xs=!1;function Es(e,t){var n=kl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ks(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ss(e){if(xs){var t=_s;if(t){var n=t;if(!ks(e,t)){if(!(t=_n(n.nextSibling))||!ks(e,t))return e.effectTag=-1025&e.effectTag|2,xs=!1,void(ws=e);Es(ws,n)}ws=e,_s=_n(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,xs=!1,ws=e}}function Ts(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ws=e}function Cs(e){if(e!==ws)return!1;if(!xs)return Ts(e),xs=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=_s;t;)Es(e,t),t=_n(t.nextSibling);if(Ts(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){_s=_n(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}_s=null}}else _s=ws?_n(e.stateNode.nextSibling):null;return!0}function Ns(){_s=ws=null,xs=!1}var Os=G.ReactCurrentOwner,Is=!1;function Rs(e,t,n,r){t.child=null===e?To(t,null,n,r):So(t,e.child,n,r)}function As(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Zo(e,t,n,r,o,i),null===e||Is?(t.effectTag|=1,Rs(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Zs(e,t,i))}function Ps(e,t,n,r,i,o){if(null===e){var s=n.type;return"function"!=typeof s||Sl(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Cl(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,zs(e,t,s,r,i,o))}return s=e.child,i<o&&(i=s.memoizedProps,(n=null!==(n=n.compare)?n:Mr)(i,r)&&e.ref===t.ref)?Zs(e,t,o):(t.effectTag|=1,(e=Tl(s,r)).ref=t.ref,e.return=t,t.child=e)}function zs(e,t,n,r,i,o){return null!==e&&Mr(e.memoizedProps,r)&&e.ref===t.ref&&(Is=!1,i<o)?(t.expirationTime=e.expirationTime,Zs(e,t,o)):Ds(e,t,n,r,o)}function Ls(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ds(e,t,n,r,i){var o=mi(n)?fi:hi.current;return o=pi(t,o),no(t,i),n=Zo(e,t,n,r,o,i),null===e||Is?(t.effectTag|=1,Rs(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Zs(e,t,i))}function js(e,t,n,r,i){if(mi(n)){var o=!0;bi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var s=t.stateNode,a=t.memoizedProps;s.props=a;var l=s.context,u=n.contextType;"object"==typeof u&&null!==u?u=ro(u):u=pi(t,u=mi(n)?fi:hi.current);var c=n.getDerivedStateFromProps,h="function"==typeof c||"function"==typeof s.getSnapshotBeforeUpdate;h||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==r||l!==u)&&bo(t,s,r,u),io=!1;var d=t.memoizedState;s.state=d,co(t,r,s,i),l=t.memoizedState,a!==r||d!==l||di.current||io?("function"==typeof c&&(mo(t,n,c,r),l=t.memoizedState),(a=io||vo(t,n,a,r,d,l,u))?(h||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.effectTag|=4)):("function"==typeof s.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),s.props=r,s.state=l,s.context=u,r=a):("function"==typeof s.componentDidMount&&(t.effectTag|=4),r=!1)}else s=t.stateNode,so(e,t),a=t.memoizedProps,s.props=t.type===t.elementType?a:Zi(t.type,a),l=s.context,"object"==typeof(u=n.contextType)&&null!==u?u=ro(u):u=pi(t,u=mi(n)?fi:hi.current),(h="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==r||l!==u)&&bo(t,s,r,u),io=!1,l=t.memoizedState,s.state=l,co(t,r,s,i),d=t.memoizedState,a!==r||l!==d||di.current||io?("function"==typeof c&&(mo(t,n,c,r),d=t.memoizedState),(c=io||vo(t,n,a,r,l,d,u))?(h||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,d,u),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),s.props=r,s.state=d,s.context=u,r=c):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Bs(e,t,n,r,o,i)}function Bs(e,t,n,r,i,o){Ls(e,t);var s=0!=(64&t.effectTag);if(!r&&!s)return i&&wi(t,n,!1),Zs(e,t,o);r=t.stateNode,Os.current=t;var a=s&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&s?(t.child=So(t,e.child,null,o),t.child=So(t,null,a,o)):Rs(e,t,a,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function Ms(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Ao(e,t.containerInfo)}var Fs,Us,Ws,qs={dehydrated:null,retryTime:0};function Hs(e,t,n){var r,i=t.mode,o=t.pendingProps,s=Do.current,a=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&s)&&(null===e||null!==e.memoizedState)),r?(a=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(s|=1),ui(Do,1&s),null===e){if(void 0!==o.fallback&&Ss(t),a){if(a=o.fallback,(o=Nl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(a,i,n,null)).return=t,o.sibling=n,t.memoizedState=qs,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=To(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,a){if(o=o.fallback,(n=Tl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(a=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=a;null!==a;)a.return=n,a=a.sibling;return(i=Tl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=qs,t.child=n,i}return n=So(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,a){if(a=o.fallback,(o=Nl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(a,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=qs,t.child=o,n}return t.memoizedState=null,t.child=So(t,e,o.children,n)}function Vs(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Ys(e,t,n,r,i,o){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailExpiration=0,s.tailMode=i,s.lastEffect=o)}function Xs(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Rs(e,t,r.children,n),0!=(2&(r=Do.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vs(e,n);else if(19===e.tag)Vs(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ui(Do,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===jo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ys(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===jo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ys(t,!0,n,null,o,t.lastEffect);break;case"together":Ys(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zs(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&sl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=Tl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $s(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gs(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mi(t.type)&&gi(),null;case 3:return Po(),li(di),li(hi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Cs(t)||(t.effectTag|=4),null;case 5:Lo(t),n=Ro(Io.current);var o=t.type;if(null!==e&&null!=t.stateNode)Us(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(s(166));return null}if(e=Ro(No.current),Cs(t)){r=t.stateNode,o=t.type;var a=t.memoizedProps;switch(r[kn]=t,r[Sn]=a,o){case"iframe":case"object":case"embed":Xt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Xt(Ge[e],r);break;case"source":Xt("error",r);break;case"img":case"image":case"link":Xt("error",r),Xt("load",r);break;case"form":Xt("reset",r),Xt("submit",r);break;case"details":Xt("toggle",r);break;case"input":Ee(r,a),Xt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Xt("invalid",r),ln(n,"onChange");break;case"textarea":Re(r,a),Xt("invalid",r),ln(n,"onChange")}for(var l in on(o,a),e=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?r.textContent!==u&&(e=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(e=["children",""+u]):k.hasOwnProperty(l)&&null!=u&&ln(n,l)}switch(o){case"input":we(r),Te(r,a,!0);break;case"textarea":we(r),Pe(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=un)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===an&&(e=De(o)),e===an?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[kn]=t,e[Sn]=r,Fs(e,t),t.stateNode=e,l=sn(o,r),o){case"iframe":case"object":case"embed":Xt("load",e),u=r;break;case"video":case"audio":for(u=0;u<Ge.length;u++)Xt(Ge[u],e);u=r;break;case"source":Xt("error",e),u=r;break;case"img":case"image":case"link":Xt("error",e),Xt("load",e),u=r;break;case"form":Xt("reset",e),Xt("submit",e),u=r;break;case"details":Xt("toggle",e),u=r;break;case"input":Ee(e,r),u=xe(e,r),Xt("invalid",e),ln(n,"onChange");break;case"option":u=Ne(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},u=i({},r,{value:void 0}),Xt("invalid",e),ln(n,"onChange");break;case"textarea":Re(e,r),u=Ie(e,r),Xt("invalid",e),ln(n,"onChange");break;default:u=r}on(o,u);var c=u;for(a in c)if(c.hasOwnProperty(a)){var h=c[a];"style"===a?nn(e,h):"dangerouslySetInnerHTML"===a?null!=(h=h?h.__html:void 0)&&Me(e,h):"children"===a?"string"==typeof h?("textarea"!==o||""!==h)&&Fe(e,h):"number"==typeof h&&Fe(e,""+h):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(k.hasOwnProperty(a)?null!=h&&ln(n,a):null!=h&&K(e,a,h,l))}switch(o){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Pe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Oe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=un)}vn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ws(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(s(166));n=Ro(Io.current),Ro(No.current),Cs(t)?(n=t.stateNode,r=t.memoizedProps,n[kn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[kn]=t,t.stateNode=n)}return null;case 13:return li(Do),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Cs(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(a=t.firstEffect)?(t.firstEffect=o,o.nextEffect=a):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Do.current)?Ca===wa&&(Ca=_a):(Ca!==wa&&Ca!==_a||(Ca=xa),0!==Aa&&null!==ka&&(Pl(ka,Ta),zl(ka,Aa)))),(n||r)&&(t.effectTag|=4),null);case 4:return Po(),null;case 10:return eo(t),null;case 17:return mi(t.type)&&gi(),null;case 19:if(li(Do),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(a=r.rendering)){if(o)$s(r,!1);else if(Ca!==wa||null!==e&&0!=(64&e.effectTag))for(a=t.child;null!==a;){if(null!==(e=jo(a))){for(t.effectTag|=64,$s(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)a=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=a,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,a=e.dependencies,o.dependencies=null===a?null:{expirationTime:a.expirationTime,firstContext:a.firstContext,responders:a.responders}),r=r.sibling;return ui(Do,1&Do.current|2),t.child}a=a.sibling}}else{if(!o)if(null!==(e=jo(a))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),$s(r,!0),null===r.tail&&"hidden"===r.tailMode&&!a.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Mi()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,$s(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(a.sibling=t.child,t.child=a):(null!==(n=r.last)?n.sibling=a:t.child=a,r.last=a)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Mi()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Mi(),n.sibling=null,t=Do.current,ui(Do,o?1&t|2:1&t),n):null}throw Error(s(156,t.tag))}function Ks(e){switch(e.tag){case 1:mi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Po(),li(di),li(hi),0!=(64&(t=e.effectTag)))throw Error(s(285));return e.effectTag=-4097&t|64,e;case 5:return Lo(e),null;case 13:return li(Do),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Do),null;case 4:return Po(),null;case 10:return eo(e),null;default:return null}}function Qs(e,t){return{value:e,source:t,stack:ve(t)}}Fs=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Us=function(e,t,n,r,o){var s=e.memoizedProps;if(s!==r){var a,l,u=t.stateNode;switch(Ro(No.current),e=null,n){case"input":s=xe(u,s),r=xe(u,r),e=[];break;case"option":s=Ne(u,s),r=Ne(u,r),e=[];break;case"select":s=i({},s,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":s=Ie(u,s),r=Ie(u,r),e=[];break;default:"function"!=typeof s.onClick&&"function"==typeof r.onClick&&(u.onclick=un)}for(a in on(n,r),n=null,s)if(!r.hasOwnProperty(a)&&s.hasOwnProperty(a)&&null!=s[a])if("style"===a)for(l in u=s[a])u.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(k.hasOwnProperty(a)?e||(e=[]):(e=e||[]).push(a,null));for(a in r){var c=r[a];if(u=null!=s?s[a]:void 0,r.hasOwnProperty(a)&&c!==u&&(null!=c||null!=u))if("style"===a)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(e||(e=[]),e.push(a,n)),n=c;else"dangerouslySetInnerHTML"===a?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(a,c)):"children"===a?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(a,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(k.hasOwnProperty(a)?(null!=c&&ln(o,a),e||u===c||(e=[])):(e=e||[]).push(a,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ws=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Js="function"==typeof WeakSet?WeakSet:Set;function ea(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ta(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yl(e,t)}else t.current=null}function na(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(s(163))}function ra(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ia(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function oa(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ia(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Zi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ho(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ho(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Dt(n)))));case 19:case 17:case 20:case 21:return}throw Error(s(163))}function sa(e,t,n){switch("function"==typeof xl&&xl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Wi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){yl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:ta(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yl(e,t)}}(t,n);break;case 5:ta(t);break;case 4:ca(e,t,n)}}function aa(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&aa(t)}function la(e){return 5===e.tag||3===e.tag||4===e.tag}function ua(e){e:{for(var t=e.return;null!==t;){if(la(t)){var n=t;break e}t=t.return}throw Error(s(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(s(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||la(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=un));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ca(e,t,n){for(var r,i,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(s(160));switch(r=a.stateNode,a.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=n,h=u;;)if(sa(l,h,c),null!==h.child&&4!==h.tag)h.child.return=h,h=h.child;else{if(h===u)break e;for(;null===h.sibling;){if(null===h.return||h.return===u)break e;h=h.return}h.sibling.return=h.return,h=h.sibling}i?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(sa(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function ha(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ra(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),sn(e,i),t=sn(e,r),i=0;i<o.length;i+=2){var a=o[i],l=o[i+1];"style"===a?nn(n,l):"dangerouslySetInnerHTML"===a?Me(n,l):"children"===a?Fe(n,l):K(n,a,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":Ae(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Oe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Oe(n,!!r.multiple,r.defaultValue,!0):Oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(s(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Dt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,za=Mi()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void da(t);case 19:return void da(t);case 17:return}throw Error(s(163))}function da(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Js),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var fa="function"==typeof WeakMap?WeakMap:Map;function pa(e,t,n){(n=ao(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Da||(Da=!0,ja=r),ea(e,t)},n}function ma(e,t,n){(n=ao(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return ea(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ba?Ba=new Set([this]):Ba.add(this),ea(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var ga,va=Math.ceil,ya=G.ReactCurrentDispatcher,ba=G.ReactCurrentOwner,wa=0,_a=3,xa=4,Ea=0,ka=null,Sa=null,Ta=0,Ca=wa,Na=null,Oa=1073741823,Ia=1073741823,Ra=null,Aa=0,Pa=!1,za=0,La=null,Da=!1,ja=null,Ba=null,Ma=!1,Fa=null,Ua=90,Wa=null,qa=0,Ha=null,Va=0;function Ya(){return 0!=(48&Ea)?1073741821-(Mi()/10|0):0!==Va?Va:Va=1073741821-(Mi()/10|0)}function Xa(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Fi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ea))return Ta;if(null!==n)e=Xi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Xi(e,150,100);break;case 97:case 96:e=Xi(e,5e3,250);break;case 95:e=2;break;default:throw Error(s(326))}return null!==ka&&e===Ta&&--e,e}function Za(e,t){if(50<qa)throw qa=0,Ha=null,Error(s(185));if(null!==(e=$a(e,t))){var n=Fi();1073741823===t?0!=(8&Ea)&&0==(48&Ea)?Ja(e):(Ka(e),0===Ea&&Vi()):Ka(e),0==(4&Ea)||98!==n&&99!==n||(null===Wa?Wa=new Map([[e,t]]):(void 0===(n=Wa.get(e))||n>t)&&Wa.set(e,t))}}function $a(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(ka===i&&(sl(t),Ca===xa&&Pl(i,Ta)),zl(i,t)),i}function Ga(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Al(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Ka(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Hi(Ja.bind(null,e));else{var t=Ga(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ya();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Ai&&Ei(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Hi(Ja.bind(null,e)):qi(r,Qa.bind(null,e),{timeout:10*(1073741821-t)-Mi()}),e.callbackNode=t}}}function Qa(e,t){if(Va=0,t)return Ll(e,t=Ya()),Ka(e),null;var n=Ga(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ea))throw Error(s(327));if(ml(),e===ka&&n===Ta||nl(e,n),null!==Sa){var r=Ea;Ea|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Ji(),Ea=r,ya.current=i,1===Ca)throw t=Na,nl(e,n),Pl(e,n),Ka(e),t;if(null===Sa)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ca,ka=null,r){case wa:case 1:throw Error(s(345));case 2:Ll(e,2<n?2:n);break;case _a:if(Pl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=hl(i)),1073741823===Oa&&10<(i=za+500-Mi())){if(Pa){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(o=Ga(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(dl.bind(null,e),i);break}dl(e);break;case xa:if(Pl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=hl(i)),Pa&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Ga(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ia?r=10*(1073741821-Ia)-Mi():1073741823===Oa?r=0:(r=10*(1073741821-Oa)-5e3,0>(r=(i=Mi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*va(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==Oa&&null!==Ra){o=Oa;var a=Ra;if(0>=(r=0|a.busyMinDurationMs)?r=0:(i=0|a.busyDelayMs,r=(o=Mi()-(10*(1073741821-o)-(0|a.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Pl(e,n),e.timeoutHandle=bn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(s(329))}if(Ka(e),e.callbackNode===t)return Qa.bind(null,e)}}return null}function Ja(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ea))throw Error(s(327));if(ml(),e===ka&&t===Ta||nl(e,t),null!==Sa){var n=Ea;Ea|=16;for(var r=il();;)try{al();break}catch(t){rl(e,t)}if(Ji(),Ea=n,ya.current=r,1===Ca)throw n=Na,nl(e,t),Pl(e,t),Ka(e),n;if(null!==Sa)throw Error(s(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ka=null,dl(e),Ka(e)}return null}function el(e,t){var n=Ea;Ea|=1;try{return e(t)}finally{0===(Ea=n)&&Vi()}}function tl(e,t){var n=Ea;Ea&=-2,Ea|=8;try{return e(t)}finally{0===(Ea=n)&&Vi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Sa)for(n=Sa.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&gi();break;case 3:Po(),li(di),li(hi);break;case 5:Lo(r);break;case 4:Po();break;case 13:case 19:li(Do);break;case 10:eo(r)}n=n.return}ka=e,Sa=Tl(e.current,null),Ta=t,Ca=wa,Na=null,Ia=Oa=1073741823,Ra=null,Aa=0,Pa=!1}function rl(e,t){for(;;){try{if(Ji(),Mo.current=gs,Vo)for(var n=Wo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Uo=0,Ho=qo=Wo=null,Vo=!1,null===Sa||null===Sa.return)return Ca=1,Na=t,Sa=null;e:{var i=e,o=Sa.return,s=Sa,a=t;if(t=Ta,s.effectTag|=2048,s.firstEffect=s.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var l=a;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.expirationTime=u.expirationTime):(s.updateQueue=null,s.memoizedState=null)}var c=0!=(1&Do.current),h=o;do{var d;if(d=13===h.tag){var f=h.memoizedState;if(null!==f)d=null!==f.dehydrated;else{var p=h.memoizedProps;d=void 0!==p.fallback&&(!0!==p.unstable_avoidThisFallback||!c)}}if(d){var m=h.updateQueue;if(null===m){var g=new Set;g.add(l),h.updateQueue=g}else m.add(l);if(0==(2&h.mode)){if(h.effectTag|=64,s.effectTag&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var v=ao(1073741823,null);v.tag=2,lo(s,v)}s.expirationTime=1073741823;break e}a=void 0,s=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new fa,a=new Set,y.set(l,a)):void 0===(a=y.get(l))&&(a=new Set,y.set(l,a)),!a.has(s)){a.add(s);var b=bl.bind(null,i,l,s);l.then(b,b)}h.effectTag|=4096,h.expirationTime=t;break e}h=h.return}while(null!==h);a=Error((ge(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(s))}5!==Ca&&(Ca=2),a=Qs(a,s),h=o;do{switch(h.tag){case 3:l=a,h.effectTag|=4096,h.expirationTime=t,uo(h,pa(h,l,t));break e;case 1:l=a;var w=h.type,_=h.stateNode;if(0==(64&h.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Ba||!Ba.has(_)))){h.effectTag|=4096,h.expirationTime=t,uo(h,ma(h,l,t));break e}}h=h.return}while(null!==h)}Sa=cl(Sa)}catch(e){t=e;continue}break}}function il(){var e=ya.current;return ya.current=gs,null===e?gs:e}function ol(e,t){e<Oa&&2<e&&(Oa=e),null!==t&&e<Ia&&2<e&&(Ia=e,Ra=t)}function sl(e){e>Aa&&(Aa=e)}function al(){for(;null!==Sa;)Sa=ul(Sa)}function ll(){for(;null!==Sa&&!Pi();)Sa=ul(Sa)}function ul(e){var t=ga(e.alternate,e,Ta);return e.memoizedProps=e.pendingProps,null===t&&(t=cl(e)),ba.current=null,t}function cl(e){Sa=e;do{var t=Sa.alternate;if(e=Sa.return,0==(2048&Sa.effectTag)){if(t=Gs(t,Sa,Ta),1===Ta||1!==Sa.childExpirationTime){for(var n=0,r=Sa.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Sa.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Sa.firstEffect),null!==Sa.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Sa.firstEffect),e.lastEffect=Sa.lastEffect),1<Sa.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Sa:e.firstEffect=Sa,e.lastEffect=Sa))}else{if(null!==(t=Ks(Sa)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Sa.sibling))return t;Sa=e}while(null!==Sa);return Ca===wa&&(Ca=5),null}function hl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Fi();return Wi(99,fl.bind(null,e,t)),null}function fl(e,t){do{ml()}while(null!==Fa);if(0!=(48&Ea))throw Error(s(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(s(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=hl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ka&&(Sa=ka=null,Ta=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Ea;Ea|=32,ba.current=null,mn=Yt;var a=fn();if(pn(a)){if("selectionStart"in a)var l={start:a.selectionStart,end:a.selectionEnd};else e:{var u=(l=(l=a.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(u&&0!==u.rangeCount){l=u.anchorNode;var c=u.anchorOffset,h=u.focusNode;u=u.focusOffset;try{l.nodeType,h.nodeType}catch(e){l=null;break e}var d=0,f=-1,p=-1,m=0,g=0,v=a,y=null;t:for(;;){for(var b;v!==l||0!==c&&3!==v.nodeType||(f=d+c),v!==h||0!==u&&3!==v.nodeType||(p=d+u),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)y=v,v=b;for(;;){if(v===a)break t;if(y===l&&++m===c&&(f=d),y===h&&++g===u&&(p=d),null!==(b=v.nextSibling))break;y=(v=y).parentNode}v=b}l=-1===f||-1===p?null:{start:f,end:p}}else l=null}l=l||{start:0,end:0}}else l=null;gn={activeElementDetached:null,focusedElem:a,selectionRange:l},Yt=!1,La=i;do{try{pl()}catch(e){if(null===La)throw Error(s(330));yl(La,e),La=La.nextEffect}}while(null!==La);La=i;do{try{for(a=e,l=t;null!==La;){var w=La.effectTag;if(16&w&&Fe(La.stateNode,""),128&w){var _=La.alternate;if(null!==_){var x=_.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&w){case 2:ua(La),La.effectTag&=-3;break;case 6:ua(La),La.effectTag&=-3,ha(La.alternate,La);break;case 1024:La.effectTag&=-1025;break;case 1028:La.effectTag&=-1025,ha(La.alternate,La);break;case 4:ha(La.alternate,La);break;case 8:ca(a,c=La,l),aa(c)}La=La.nextEffect}}catch(e){if(null===La)throw Error(s(330));yl(La,e),La=La.nextEffect}}while(null!==La);if(x=gn,_=fn(),w=x.focusedElem,l=x.selectionRange,_!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&pn(w)&&(_=l.start,void 0===(x=l.end)&&(x=_),"selectionStart"in w?(w.selectionStart=_,w.selectionEnd=Math.min(x,w.value.length)):(x=(_=w.ownerDocument||document)&&_.defaultView||window).getSelection&&(x=x.getSelection(),c=w.textContent.length,a=Math.min(l.start,c),l=void 0===l.end?a:Math.min(l.end,c),!x.extend&&a>l&&(c=l,l=a,a=c),c=dn(w,a),h=dn(w,l),c&&h&&(1!==x.rangeCount||x.anchorNode!==c.node||x.anchorOffset!==c.offset||x.focusNode!==h.node||x.focusOffset!==h.offset)&&((_=_.createRange()).setStart(c.node,c.offset),x.removeAllRanges(),a>l?(x.addRange(_),x.extend(h.node,h.offset)):(_.setEnd(h.node,h.offset),x.addRange(_))))),_=[];for(x=w;x=x.parentNode;)1===x.nodeType&&_.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<_.length;w++)(x=_[w]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Yt=!!mn,gn=mn=null,e.current=n,La=i;do{try{for(w=e;null!==La;){var E=La.effectTag;if(36&E&&oa(w,La.alternate,La),128&E){_=void 0;var k=La.ref;if(null!==k){var S=La.stateNode;switch(La.tag){case 5:_=S;break;default:_=S}"function"==typeof k?k(_):k.current=_}}La=La.nextEffect}}catch(e){if(null===La)throw Error(s(330));yl(La,e),La=La.nextEffect}}while(null!==La);La=null,zi(),Ea=o}else e.current=n;if(Ma)Ma=!1,Fa=e,Ua=t;else for(La=i;null!==La;)t=La.nextEffect,La.nextEffect=null,La=t;if(0===(t=e.firstPendingTime)&&(Ba=null),1073741823===t?e===Ha?qa++:(qa=0,Ha=e):qa=0,"function"==typeof _l&&_l(n.stateNode,r),Ka(e),Da)throw Da=!1,e=ja,ja=null,e;return 0!=(8&Ea)||Vi(),null}function pl(){for(;null!==La;){var e=La.effectTag;0!=(256&e)&&na(La.alternate,La),0==(512&e)||Ma||(Ma=!0,qi(97,(function(){return ml(),null}))),La=La.nextEffect}}function ml(){if(90!==Ua){var e=97<Ua?97:Ua;return Ua=90,Wi(e,gl)}}function gl(){if(null===Fa)return!1;var e=Fa;if(Fa=null,0!=(48&Ea))throw Error(s(331));var t=Ea;for(Ea|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ra(5,n),ia(5,n)}}catch(t){if(null===e)throw Error(s(330));yl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ea=t,Vi(),!0}function vl(e,t,n){lo(e,t=pa(e,t=Qs(n,t),1073741823)),null!==(e=$a(e,1073741823))&&Ka(e)}function yl(e,t){if(3===e.tag)vl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ba||!Ba.has(r))){lo(n,e=ma(n,e=Qs(t,e),1073741823)),null!==(n=$a(n,1073741823))&&Ka(n);break}}n=n.return}}function bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ka===e&&Ta===n?Ca===xa||Ca===_a&&1073741823===Oa&&Mi()-za<500?nl(e,Ta):Pa=!0:Al(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Ka(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Xa(t=Ya(),e,null)),null!==(e=$a(e,t))&&Ka(e)}ga=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Is=!0;else{if(r<n){switch(Is=!1,t.tag){case 3:Ms(t),Ns();break;case 5:if(zo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:mi(t.type)&&bi(t);break;case 4:Ao(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,ui($i,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Hs(e,t,n):(ui(Do,1&Do.current),null!==(t=Zs(e,t,n))?t.sibling:null);ui(Do,1&Do.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Xs(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ui(Do,Do.current),!r)return null}return Zs(e,t,n)}Is=!1}}else Is=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=pi(t,hi.current),no(t,n),i=Zo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mi(r)){var o=!0;bi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var a=r.getDerivedStateFromProps;"function"==typeof a&&mo(t,r,a,e),i.updater=go,t.stateNode=i,i._reactInternalFiber=t,wo(t,r,e,n),t=Bs(null,t,r,!0,o,n)}else t.tag=0,Rs(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Sl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===he)return 14}return 2}(i),e=Zi(i,e),o){case 0:t=Ds(null,t,i,e,n);break e;case 1:t=js(null,t,i,e,n);break e;case 11:t=As(null,t,i,e,n);break e;case 14:t=Ps(null,t,i,Zi(i.type,e),r,n);break e}throw Error(s(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ds(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 1:return r=t.type,i=t.pendingProps,js(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 3:if(Ms(t),r=t.updateQueue,null===e||null===r)throw Error(s(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,so(e,t),co(t,r,null,n),(r=t.memoizedState.element)===i)Ns(),t=Zs(e,t,n);else{if((i=t.stateNode.hydrate)&&(_s=_n(t.stateNode.containerInfo.firstChild),ws=t,i=xs=!0),i)for(n=To(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Rs(e,t,r,n),Ns();t=t.child}return t;case 5:return zo(t),null===e&&Ss(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,a=i.children,yn(r,i)?a=null:null!==o&&yn(r,o)&&(t.effectTag|=16),Ls(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Rs(e,t,a,n),t=t.child),t;case 6:return null===e&&Ss(t),null;case 13:return Hs(e,t,n);case 4:return Ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):Rs(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,As(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 7:return Rs(e,t,t.pendingProps,n),t.child;case 8:case 12:return Rs(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,a=t.memoizedProps,o=i.value;var l=t.type._context;if(ui($i,l._currentValue),l._currentValue=o,null!==a)if(l=a.value,0===(o=jr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(a.children===i.children&&!di.current){t=Zs(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){a=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=ao(n,null)).tag=2,lo(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(l.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}Rs(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Rs(e,t,r,n),t.child;case 14:return o=Zi(i=t.type,t.pendingProps),Ps(e,t,i,o=Zi(i.type,o),r,n);case 15:return zs(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Zi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,mi(r)?(e=!0,bi(t)):e=!1,no(t,n),yo(t,r,i),wo(t,r,i,n),Bs(null,t,r,!0,e,n);case 19:return Xs(e,t,n)}throw Error(s(156,t.tag))};var _l=null,xl=null;function El(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function kl(e,t,n,r){return new El(e,t,n,r)}function Sl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tl(e,t){var n=e.alternate;return null===n?((n=kl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Cl(e,t,n,r,i,o){var a=2;if(r=e,"function"==typeof e)Sl(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case ne:return Nl(n.children,i,o,t);case ae:a=8,i|=7;break;case re:a=8,i|=1;break;case ie:return(e=kl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ue:return(e=kl(13,n,t,i)).type=ue,e.elementType=ue,e.expirationTime=o,e;case ce:return(e=kl(19,n,t,i)).elementType=ce,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:a=10;break e;case se:a=9;break e;case le:a=11;break e;case he:a=14;break e;case de:a=16,r=null;break e;case fe:a=22;break e}throw Error(s(130,null==e?e:typeof e,""))}return(t=kl(a,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Nl(e,t,n,r){return(e=kl(7,e,r,t)).expirationTime=n,e}function Ol(e,t,n){return(e=kl(6,e,null,t)).expirationTime=n,e}function Il(e,t,n){return(t=kl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Al(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Pl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function zl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Ll(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Dl(e,t,n,r){var i=t.current,o=Ya(),a=fo.suspense;o=Xa(o,i,a);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(s(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(s(171))}if(1===n.tag){var u=n.type;if(mi(u)){n=yi(n,u,l);break e}}n=l}else n=ci;return null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(i,t),Za(i,o),o}function jl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Bl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ml(e,t){Bl(e,t),(e=e.alternate)&&Bl(e,t)}function Fl(e,t,n){var r=new Rl(e,t,n=null!=n&&!0===n.hydrate),i=kl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Qe(t);Tt.forEach((function(e){pt(e,t,n)})),Ct.forEach((function(e){pt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Ul(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var s=o._internalRoot;if("function"==typeof i){var a=i;i=function(){var e=jl(s);a.call(e)}}Dl(t,s,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fl(e,0,t?{hydrate:!0}:void 0)}(n,r),s=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=jl(s);l.call(e)}}tl((function(){Dl(t,s,e,i)}))}return jl(s)}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ul(t))throw Error(s(200));return ql(e,t,null,n)}Fl.prototype.render=function(e){Dl(e,this._internalRoot,null,null)},Fl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Dl(null,e,null,(function(){t[Tn]=null}))},mt=function(e){if(13===e.tag){var t=Xi(Ya(),150,100);Za(e,t),Ml(e,t)}},gt=function(e){13===e.tag&&(Za(e,3),Ml(e,3))},vt=function(e){if(13===e.tag){var t=Ya();Za(e,t=Xa(t,e,null)),Ml(e,t)}},N=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=In(r);if(!i)throw Error(s(90));_e(r),Se(r,i)}}}break;case"textarea":Ae(e,n);break;case"select":null!=(t=n.value)&&Oe(e,!!n.multiple,t,!1)}},z=el,L=function(e,t,n,r,i){var o=Ea;Ea|=4;try{return Wi(98,e.bind(null,t,n,r,i))}finally{0===(Ea=o)&&Vi()}},D=function(){0==(49&Ea)&&(function(){if(null!==Wa){var e=Wa;Wa=null,e.forEach((function(e,t){Ll(t,e),Ka(t)})),Vi()}}(),ml())},j=function(e,t){var n=Ea;Ea|=2;try{return e(t)}finally{0===(Ea=n)&&Vi()}};var Vl,Yl,Xl={Events:[Nn,On,In,T,E,jn,function(e){it(e,Dn)},A,P,Kt,at,ml,{current:!1}]};Yl=(Vl={findFiberByHostInstance:Cn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);_l=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},xl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Vl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Yl?Yl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Xl,t.createPortal=Hl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(s(188));throw Error(s(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ea))throw Error(s(187));var n=Ea;Ea|=1;try{return Wi(99,e.bind(null,t))}finally{Ea=n,Vi()}},t.hydrate=function(e,t,n){if(!Ul(t))throw Error(s(200));return Wl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ul(t))throw Error(s(200));return Wl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ul(e))throw Error(s(40));return!!e._reactRootContainer&&(tl((function(){Wl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Hl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ul(n))throw Error(s(200));if(null==e||void 0===e._reactInternalFiber)throw Error(s(38));return Wl(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(45)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,s,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,u=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}},h=Date.now();t.unstable_now=function(){return Date.now()-h},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(c,0))},i=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},s=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,f=window.Date,p=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=f.now();t.unstable_now=function(){return f.now()-v}}var y=!1,b=null,w=-1,_=5,x=0;s=function(){return t.unstable_now()>=x},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,k=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();x=e+_;try{b(!0,e)?k.postMessage(null):(y=!1,b=null)}catch(e){throw k.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,k.postMessage(null))},i=function(e,n){w=p((function(){e(t.unstable_now())}),n)},o=function(){m(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<N(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,s=e[o],a=o+1,l=e[a];if(void 0!==s&&0>N(s,n))void 0!==l&&0>N(l,s)?(e[r]=l,e[a]=n,r=a):(e[r]=s,e[o]=n,r=o);else{if(!(void 0!==l&&0>N(l,n)))break e;e[r]=l,e[a]=n,r=a}}}return t}return null}function N(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],I=[],R=1,A=null,P=3,z=!1,L=!1,D=!1;function j(e){for(var t=T(I);null!==t;){if(null===t.callback)C(I);else{if(!(t.startTime<=e))break;C(I),t.sortIndex=t.expirationTime,S(O,t)}t=T(I)}}function B(e){if(D=!1,j(e),!L)if(null!==T(O))L=!0,r(M);else{var t=T(I);null!==t&&i(B,t.startTime-e)}}function M(e,n){L=!1,D&&(D=!1,o()),z=!0;var r=P;try{for(j(n),A=T(O);null!==A&&(!(A.expirationTime>n)||e&&!s());){var a=A.callback;if(null!==a){A.callback=null,P=A.priorityLevel;var l=a(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===T(O)&&C(O),j(n)}else C(O);A=T(O)}if(null!==A)var u=!0;else{var c=T(I);null!==c&&i(B,c.startTime-n),u=!1}return u}finally{A=null,P=r,z=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||z||(L=!0,r(M))},t.unstable_getCurrentPriorityLevel=function(){return P},t.unstable_getFirstCallbackNode=function(){return T(O)},t.unstable_next=function(e){switch(P){case 1:case 2:case 3:var t=3;break;default:t=P}var n=P;P=t;try{return e()}finally{P=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=P;P=e;try{return t()}finally{P=n}},t.unstable_scheduleCallback=function(e,n,s){var a=t.unstable_now();if("object"==typeof s&&null!==s){var l=s.delay;l="number"==typeof l&&0<l?a+l:a,s="number"==typeof s.timeout?s.timeout:F(e)}else s=F(e),l=a;return e={id:R++,callback:n,priorityLevel:e,startTime:l,expirationTime:s=l+s,sortIndex:-1},l>a?(e.sortIndex=l,S(I,e),null===T(O)&&e===T(I)&&(D?o():D=!0,i(B,l-a))):(e.sortIndex=s,S(O,e),L||z||(L=!0,r(M))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();j(e);var n=T(O);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||s()},t.unstable_wrapCallback=function(e){var t=P;return function(){var n=P;P=t;try{return e.apply(this,arguments)}finally{P=n}}}},function(e,t,n){"use strict";var r=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(47)).default;t.default=i},function(e,t,n){"use strict";var r=n(31),i=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Reader=void 0;var o=i(n(49)),s=i(n(51)),a=i(n(32));n(57);var l=r(n(8)),u=i(n(59)),c=i(n(97)),h=i(n(100)),d=i(n(104)),f=n(107),p=function(e){var t=e.url,n=e.fontSize,r=e.fontFamily,i=e.fontColor,p=e.onLoad,m=e.onNext,g=e.onPrev,v=e.onRelocated,y=e.showPercentage,b=void 0===y||y,w=e.percentString,_=e.className,x=void 0===_?"":_,E=e.cfi,k=e.renderChapters,S=(0,l.useRef)(null),T=(0,l.useState)(null),C=(0,a.default)(T,2),N=C[0],O=C[1],I=(0,l.useState)(!1),R=(0,a.default)(I,2),A=R[0],P=R[1],z=(0,l.useState)(),L=(0,a.default)(z,2),D=L[0],j=L[1],B=(0,l.useState)(0),M=(0,a.default)(B,2),F=M[0],U=M[1];(0,l.useEffect)((function(){var e=S.current;if(e){var n=(0,u.default)(t),r=n.renderTo(e,{flow:"paginated",width:"100%",height:"100%"});W(n,r)}}),[]);var W=function(e,t){t&&(O(t),E?t.display(E):t.display(),q(t),e.ready.then((0,s.default)(o.default.mark((function n(){var r,i;return o.default.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=e.package,i=(r=void 0===r?{}:r).metadata,j(void 0===i?{}:i),n.next=6,e.locations.generate(1600);case 6:p&&p(t),v&&t.on("relocated",H(e));case 8:case"end":return n.stop()}}),n)})))))},q=function(e){n&&e.themes.default({p:{"font-size":"".concat(n," !important")}}),i&&e.themes.default({p:{color:"".concat(i," !important")}}),r&&e.themes.default({p:{fontFamily:"".concat(r," !important")}})},H=function(e){return function(t){v(t);var n=e.locations.percentageFromCfi(t.start.cfi);U(n)}},V=function(){N&&(N.next(),m&&m(N))},Y=function(){N&&(N.prev(),g&&g(N))};return l.default.createElement(f.Swipeable,{onSwiped:function(e){var t=e.dir;"Left"===t&&V(),"Right"===t&&Y()},className:"react-epubjs"},!N&&l.default.createElement(d.default,null),l.default.createElement(c.default,{handleShowMore:function(){return P(!0)},visible:!0,handleNext:V,handlePrev:Y,percent:b?F:null,percentString:w}),l.default.createElement(h.default,{info:D,rendition:N,visible:A,handleHideMore:function(){return P(!1)},renderChapters:k}),l.default.createElement("div",{className:"reader ".concat(x," ").concat(b?"pb-25":""),ref:S}))};t.Reader=p;var m=p;t.default=m},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){e.exports=n(50)},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function a(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{a({},"")}catch(e){a=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var i=t&&t.prototype instanceof h?t:h,o=Object.create(i.prototype),s=new E(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return S()}for(n.method=i,n.arg=o;;){var s=n.delegate;if(s){var a=w(s,n);if(a){if(a===c)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===c)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(e,n,s),o}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var c={};function h(){}function d(){}function f(){}var p={};p[i]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(k([])));g&&g!==t&&n.call(g,i)&&(p=g);var v=f.prototype=h.prototype=Object.create(p);function y(e){["next","throw","return"].forEach((function(t){a(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){var r;this._invoke=function(i,o){function s(){return new t((function(r,s){!function r(i,o,s,a){var l=u(e[i],e,o);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==typeof h&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){r("next",e,s,a)}),(function(e){r("throw",e,s,a)})):t.resolve(h).then((function(e){c.value=e,s(c)}),(function(e){return r("throw",e,s,a)}))}a(l.arg)}(i,o,r,s)}))}return r=r?r.then(s,s):s()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function k(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return d.prototype=v.constructor=f,f.constructor=d,d.displayName=a(f,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,a(e,s,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},y(b.prototype),b.prototype[o]=function(){return this},e.AsyncIterator=b,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var s=new b(l(t,n,r,i),o);return e.isGeneratorFunction(n)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},y(v),a(v,s,"Generator"),v[i]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return s.type="throw",s.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var a=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(a&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=e,s.arg=t,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){function n(e,t,n,r,i,o,s){try{var a=e[o](s),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(r,i)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(i,o){var s=e.apply(t,r);function a(e){n(s,i,o,a,l,"next",e)}function l(e){n(s,i,o,a,l,"throw",e)}a(void 0)}))}}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}}},function(e,t,n){var r=n(55);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){var r=n(20),i=n(58);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(21)(!1)).push([e.i,".react-epubjs{position:relative;width:100%;height:100%}.react-epubjs,.react-epubjs *{box-sizing:border-box}.react-epubjs .reader{width:100%;height:100%;z-index:1}.react-epubjs .reader.pb-25{padding-bottom:25px}",""]),e.exports=t},function(e,t,n){"use strict";n.r(t);var r=n(18);n.d(t,"Book",(function(){return r.a}));var i=n(2);n.d(t,"EpubCFI",(function(){return i.a}));var o=n(14);n.d(t,"Rendition",(function(){return o.a}));var s=n(13);n.d(t,"Contents",(function(){return s.a}));var a=n(22);n.d(t,"Layout",(function(){return a.a}));var l=n(39);t.default=l.a},function(e,t,n){"use strict";var r=n(33),i=n(61),o=n(65),s=n(73),a=n(74);(e.exports=function(e,t){var n,i,l,u,c;return arguments.length<2||"string"!=typeof e?(u=t,t=e,e=null):u=arguments[2],r(e)?(n=a.call(e,"c"),i=a.call(e,"e"),l=a.call(e,"w")):(n=l=!0,i=!1),c={value:t,configurable:n,enumerable:i,writable:l},u?o(s(u),c):c}).gs=function(e,t,n){var l,u,c,h;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],r(t)?i(t)?r(n)?i(n)||(c=n,n=void 0):n=void 0:(c=t,t=n=void 0):t=void 0,r(e)?(l=a.call(e,"c"),u=a.call(e,"e")):(l=!0,u=!1),h={get:t,set:n,configurable:l,enumerable:u},c?o(s(c),h):h}},function(e,t,n){"use strict";var r=n(62),i=/^\s*class[\s{/}]/,o=Function.prototype.toString;e.exports=function(e){return!!r(e)&&!i.test(o.call(e))}},function(e,t,n){"use strict";var r=n(63);e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!r(e)}},function(e,t,n){"use strict";var r=n(64);e.exports=function(e){if(!r(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},function(e,t,n){"use strict";var r=n(33),i={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!r(e)&&hasOwnProperty.call(i,typeof e)}},function(e,t,n){"use strict";e.exports=n(66)()?Object.assign:n(67)},function(e,t,n){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},function(e,t,n){"use strict";var r=n(68),i=n(72),o=Math.max;e.exports=function(e,t){var n,s,a,l=o(arguments.length,2);for(e=Object(i(e)),a=function(r){try{e[r]=t[r]}catch(e){n||(n=e)}},s=1;s<l;++s)r(t=arguments[s]).forEach(a);if(void 0!==n)throw n;return e}},function(e,t,n){"use strict";e.exports=n(69)()?Object.keys:n(70)},function(e,t,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},function(e,t,n){"use strict";var r=n(24),i=Object.keys;e.exports=function(e){return i(r(e)?Object(e):e)}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=n(24);e.exports=function(e){if(!r(e))throw new TypeError("Cannot use null or undefined");return e}},function(e,t,n){"use strict";var r=n(24),i=Array.prototype.forEach,o=Object.create,s=function(e,t){var n;for(n in e)t[n]=e[n]};e.exports=function(e){var t=o(null);return i.call(arguments,(function(e){r(e)&&s(Object(e),t)})),t}},function(e,t,n){"use strict";e.exports=n(75)()?String.prototype.contains:n(76)},function(e,t,n){"use strict";var r="razdwatrzy";e.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},function(e,t,n){"use strict";var r=String.prototype.indexOf;e.exports=function(e){return r.call(this,e,arguments[1])>-1}},function(e,t,n){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},function(e,t){t.entityMap={lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",auml:"ä",Aring:"Å",aring:"å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",ouml:"ö",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",times:"×",divide:"÷",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",euro:"€",trade:"™",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦"}},function(e,t){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,r=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),i=new RegExp("^"+n.source+r.source+"*(?::"+n.source+r.source+"*)?$");function o(){}function s(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function a(e,t,n,r,i,o){for(var s,a=++t,l=0;;){var u=e.charAt(a);switch(u){case"=":if(1===l)s=e.slice(t,a),l=3;else{if(2!==l)throw new Error("attribute equal must after attrName");l=3}break;case"'":case'"':if(3===l||1===l){if(1===l&&(o.warning('attribute value must after "="'),s=e.slice(t,a)),t=a+1,!((a=e.indexOf(u,t))>0))throw new Error("attribute value no end '"+u+"' match");c=e.slice(t,a).replace(/&#?\w+;/g,i),n.add(s,c,t-1),l=5}else{if(4!=l)throw new Error('attribute value must after "="');c=e.slice(t,a).replace(/&#?\w+;/g,i),n.add(s,c,t),o.warning('attribute "'+s+'" missed start quot('+u+")!!"),t=a+1,l=5}break;case"/":switch(l){case 0:n.setTagName(e.slice(t,a));case 5:case 6:case 7:l=7,n.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),0==l&&n.setTagName(e.slice(t,a)),a;case">":switch(l){case 0:n.setTagName(e.slice(t,a));case 5:case 6:case 7:break;case 4:case 1:"/"===(c=e.slice(t,a)).slice(-1)&&(n.closed=!0,c=c.slice(0,-1));case 2:2===l&&(c=s),4==l?(o.warning('attribute "'+c+'" missed quot(")!!'),n.add(s,c.replace(/&#?\w+;/g,i),t)):("http://www.w3.org/1999/xhtml"===r[""]&&c.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+c+'" missed value!! "'+c+'" instead!!'),n.add(c,c,t));break;case 3:throw new Error("attribute value missed!!")}return a;case"":u=" ";default:if(u<=" ")switch(l){case 0:n.setTagName(e.slice(t,a)),l=6;break;case 1:s=e.slice(t,a),l=2;break;case 4:var c=e.slice(t,a).replace(/&#?\w+;/g,i);o.warning('attribute "'+c+'" missed quot(")!!'),n.add(s,c,t);case 5:l=6}else switch(l){case 2:n.tagName;"http://www.w3.org/1999/xhtml"===r[""]&&s.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),n.add(s,s,t),t=a,l=1;break;case 5:o.warning('attribute space is required"'+s+'"!!');case 6:l=1,t=a;break;case 3:l=4,t=a;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}a++}}function l(e,t,n){for(var r=e.tagName,i=null,o=e.length;o--;){var s=e[o],a=s.qName,l=s.value;if((f=a.indexOf(":"))>0)var u=s.prefix=a.slice(0,f),c=a.slice(f+1),d="xmlns"===u&&c;else c=a,u=null,d="xmlns"===a&&"";s.localName=c,!1!==d&&(null==i&&(i={},h(n,n={})),n[d]=i[d]=l,s.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(d,l))}for(o=e.length;o--;){(u=(s=e[o]).prefix)&&("xml"===u&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==u&&(s.uri=n[u||""]))}var f;(f=r.indexOf(":"))>0?(u=e.prefix=r.slice(0,f),c=e.localName=r.slice(f+1)):(u=null,c=e.localName=r);var p=e.uri=n[u||""];if(t.startElement(p,c,r,e),!e.closed)return e.currentNSMap=n,e.localNSMap=i,!0;if(t.endElement(p,c,r),i)for(u in i)t.endPrefixMapping(u)}function u(e,t,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var o=e.indexOf("</"+n+">",t),s=e.substring(t+1,o);if(/[&<]/.test(s))return/^script$/i.test(n)?(i.characters(s,0,s.length),o):(s=s.replace(/&#?\w+;/g,r),i.characters(s,0,s.length),o)}return t+1}function c(e,t,n,r){var i=r[n];return null==i&&((i=e.lastIndexOf("</"+n+">"))<t&&(i=e.lastIndexOf("</"+n)),r[n]=i),i<t}function h(e,t){for(var n in e)t[n]=e[n]}function d(e,t,n,r){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(i=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,i-t-4),i+3):(r.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var i=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,i-t-9),n.endCDATA(),i+3}var o=function(e,t){var n,r=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;i.lastIndex=t,i.exec(e);for(;n=i.exec(e);)if(r.push(n),n[1])return r}(e,t),s=o.length;if(s>1&&/!doctype/i.test(o[0][0])){var a=o[1][0],l=s>3&&/^public$/i.test(o[2][0])&&o[3][0],u=s>4&&o[4][0],c=o[s-1];return n.startDTD(a,l&&l.replace(/^(['"])(.*?)\1$/,"$2"),u&&u.replace(/^(['"])(.*?)\1$/,"$2")),n.endDTD(),c.index+c[0].length}}return-1}function f(e,t,n){var r=e.indexOf("?>",t);if(r){var i=e.substring(t,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(i){i[0].length;return n.processingInstruction(i[1],i[2]),r+2}return-1}return-1}function p(e){}o.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),h(t,t={}),function(e,t,n,r,i){function o(e){var t=e.slice(1,-1);return t in n?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(i.error("entity not found:"+e),e)}function h(t){if(t>x){var n=e.substring(x,t).replace(/&#?\w+;/g,o);b&&m(x),r.characters(n,0,t-x),x=t}}function m(t,n){for(;t>=v&&(n=y.exec(e));)g=n.index,v=g+n[0].length,b.lineNumber++;b.columnNumber=t-g+1}var g=0,v=0,y=/.*(?:\r\n?|\n)|.*$/g,b=r.locator,w=[{currentNSMap:t}],_={},x=0;for(;;){try{var E=e.indexOf("<",x);if(E<0){if(!e.substr(x).match(/^\s*$/)){var k=r.doc,S=k.createTextNode(e.substr(x));k.appendChild(S),r.currentElement=S}return}switch(E>x&&h(E),e.charAt(E+1)){case"/":var T=e.indexOf(">",E+3),C=e.substring(E+2,T),N=w.pop();T<0?(C=e.substring(E+2).replace(/[\s<].*/,""),i.error("end tag name: "+C+" is not complete:"+N.tagName),T=E+1+C.length):C.match(/\s</)&&(C=C.replace(/[\s<].*/,""),i.error("end tag name: "+C+" maybe not complete"),T=E+1+C.length);var O=N.localNSMap,I=N.tagName==C;if(I||N.tagName&&N.tagName.toLowerCase()==C.toLowerCase()){if(r.endElement(N.uri,N.localName,C),O)for(var R in O)r.endPrefixMapping(R);I||i.fatalError("end tag name: "+C+" is not match the current start tagName:"+N.tagName)}else w.push(N);T++;break;case"?":b&&m(E),T=f(e,E,r);break;case"!":b&&m(E),T=d(e,E,r,i);break;default:b&&m(E);var A=new p,P=w[w.length-1].currentNSMap,z=(T=a(e,E,A,P,o,i),A.length);if(!A.closed&&c(e,T,A.tagName,_)&&(A.closed=!0,n.nbsp||i.warning("unclosed xml attribute")),b&&z){for(var L=s(b,{}),D=0;D<z;D++){var j=A[D];m(j.offset),j.locator=s(b,{})}r.locator=L,l(A,r,P)&&w.push(A),r.locator=b}else l(A,r,P)&&w.push(A);"http://www.w3.org/1999/xhtml"!==A.uri||A.closed?T++:T=u(e,T,A.tagName,o,r)}}catch(e){i.error("element parse error: "+e),T=-1}T>x?x=T:h(Math.max(E,x)+1)}}(e,t,n,r,this.errorHandler),r.endDocument()}},p.prototype={setTagName:function(e){if(!i.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,n){if(!i.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},t.XMLReader=o},function(e,t,n){"use strict";function r(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}Object.defineProperty(t,"__esModule",{value:!0}),t.createElement=r,t.default={createElement:r}},function(e,t,n){"use strict";function r(e,t){function n(n){for(var r=t.length-1;r>=0;r--){var s=t[r],a=n.clientX,l=n.clientY;if(n.touches&&n.touches.length&&(a=n.touches[0].clientX,l=n.touches[0].clientY),o(s,e,a,l)){s.dispatchEvent(i(n));break}}}if("iframe"===e.nodeName||"IFRAME"===e.nodeName)try{this.target=e.contentDocument}catch(t){this.target=e}else this.target=e;for(var r=["mouseup","mousedown","click","touchstart"],s=0;s<r.length;s++){var a=r[s];this.target.addEventListener(a,(function(e){return n(e)}),!1)}}function i(e){var t=Object.assign({},e,{bubbles:!1});try{return new MouseEvent(e.type,t)}catch(r){var n=document.createEvent("MouseEvents");return n.initMouseEvent(e.type,!1,t.cancelable,t.view,t.detail,t.screenX,t.screenY,t.clientX,t.clientY,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget),n}}function o(e,t,n,r){var i=t.getBoundingClientRect();function o(e,t,n){var r=e.top-i.top,o=e.left-i.left,s=r+e.height,a=o+e.width;return r<=n&&o<=t&&s>n&&a>t}if(!o(e.getBoundingClientRect(),n,r))return!1;for(var s=e.getClientRects(),a=0,l=s.length;a<l;a++)if(o(s[a],n,r))return!0;return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.proxyMouse=r,t.clone=i,t.default={proxyMouse:r}},function(e,t,n){var r=n(35);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(12))},function(e,t,n){var r=n(25),i=n(85),o=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,l=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(i(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=a.test(e);return n||l.test(e)?u(e.slice(2),n?2:8):s.test(e)?NaN:+e}},function(e,t,n){var r=n(86),i=n(89);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==r(e)}},function(e,t,n){var r=n(36),i=n(87),o=n(88),s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":s&&s in Object(e)?i(e):o(e)}},function(e,t,n){var r=n(36),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,a),n=e[a];try{e[a]=void 0;var r=!0}catch(e){}var i=s.call(e);return r&&(t?e[a]=n:delete e[a]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(91),i=n(92),o=n(93);function s(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|f(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(c(t),e=a(e,t<0?0:0|f(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|f(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return T(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return N(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,l/=2,n/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(u(e,o)===u(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===l)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(n+l>a&&(n=a-l),o=n;o>=0;o--){for(var h=!0,d=0;d<l;d++)if(u(e,o+d)!==u(t,d)){h=!1;break}if(h)return o}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return W(F(t,e.length-n),e,n,r)}function _(e,t,n,r){return W(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function x(e,t,n,r){return _(e,t,n,r)}function E(e,t,n,r){return W(U(t),e,n,r)}function k(e,t,n,r){return W(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function T(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,l,u=e[i],c=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=n)switch(h){case 1:u<128&&(c=u);break;case 2:128==(192&(o=e[i+1]))&&(l=(31&u)<<6|63&o)>127&&(c=l);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(l=(15&u)<<12|(63&o)<<6|63&s)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(l=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&l<1114112&&(c=l)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return u(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return h(null,e)},l.allocUnsafeSlow=function(e){return h(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=l.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var s=e[n];if(!l.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},l.byteLength=p,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?T(this,0,e):m.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,r,i){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(r,i),c=e.slice(t,n),h=0;h<a;++h)if(u[h]!==c[h]){o=u[h],s=c[h];break}return o<s?-1:s<o?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return _(this,e,t,n);case"latin1":case"binary":return x(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function C(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function N(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=M(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function R(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function A(e,t,n,r,i,o){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function P(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function z(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function L(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,o){return o||L(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function j(e,t,n,r,o){return o||L(e,0,n,8),i.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var i=t-e;n=new l(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},l.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},l.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||A(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||A(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):z(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):z(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);A(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);A(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):z(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):z(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return j(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return j(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!l.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=l.isBuffer(e)?e:F(new l(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function M(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function U(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(12))},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=u(e),s=r[0],a=r[1],l=new o(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),c=0,h=a>0?s-4:s;for(n=0;n<h;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],l[c++]=t>>16&255,l[c++]=t>>8&255,l[c++]=255&t;2===a&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,l[c++]=255&t);1===a&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,l[c++]=t>>8&255,l[c++]=255&t);return l},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(c(e,s,s+16383>a?a:s+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=s.length;a<l;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,l=(1<<a)-1,u=l>>1,c=-7,h=n?i-1:0,d=n?-1:1,f=e[t+h];for(h+=d,o=f&(1<<-c)-1,f>>=-c,c+=a;c>0;o=256*o+e[t+h],h+=d,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;c>0;s=256*s+e[t+h],h+=d,c-=8);if(0===o)o=1-u;else{if(o===l)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,r),o-=u}return(f?-1:1)*s*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var s,a,l,u=8*o-i-1,c=(1<<u)-1,h=c>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,p=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-s))<1&&(s--,l*=2),(t+=s+h>=1?d/l:d*Math.pow(2,1-h))*l>=2&&(s++,l/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(t*l-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[n+f]=255&a,f+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+f]=255&s,f+=p,s/=256,u-=8);e[n+f-p]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(95),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(12))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,s,a,l=1,u={},c=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},r=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(p,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&p(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(s+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return u[l]=i,r(l),l++},d.clearImmediate=f}function f(e){delete u[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=u[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(12),n(96))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,u=[],c=!1,h=-1;function d(){c&&l&&(c=!1,l.length?u=l.concat(u):h=-1,u.length&&f())}function f(){if(!c){var e=a(d);c=!0;for(var t=u.length;t;){for(l=u,u=[];++h<t;)l&&l[h].run();h=-1,t=u.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||c||a(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Navigator=void 0,n(98);var i=r(n(8)),o=function(e){var t=e.handleShowMore,n=e.visible,r=e.handleNext,o=e.handlePrev,s=e.percent,a=e.percentString,l=void 0===a?"$percent of this book":a;if(!n)return null;s=Math.round(100*s.toFixed(2));var u=l.replace("$percent",s+"%");return i.default.createElement("div",{className:"navigator"},i.default.createElement("div",{className:"more-info-area",onClick:t}),i.default.createElement("div",{className:"prev-area",onClick:o}),i.default.createElement("div",{className:"next-area",onClick:r}),s?i.default.createElement("div",{className:"page-number"},u):null)};t.Navigator=o;var s=o;t.default=s},function(e,t,n){var r=n(20),i=n(99);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(21)(!1)).push([e.i,".react-epubjs .navigator{z-index:2;width:100%;height:100%;position:absolute}.react-epubjs .navigator .more-info-area{width:100%;height:30%;opacity:.3}.react-epubjs .navigator .next-area{width:50%;height:70%;opacity:.3;float:right}.react-epubjs .navigator .prev-area{width:50%;height:70%;opacity:.3;float:left}.react-epubjs .navigator .page-number{position:absolute;width:100%;background:#c0c0c02e;padding:5px 15px;color:#888;text-align:center;bottom:0}",""]),e.exports=t},function(e,t,n){"use strict";var r=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.More=void 0,n(101);var i=r(n(8)),o=r(n(103)),s=function(e){var t=e.info,n=e.rendition,r=e.visible,s=e.handleHideMore,a=e.renderChapters;if(!r)return null;var l=t.title;return i.default.createElement("div",{className:"more",onClick:s},i.default.createElement("div",{className:"info"},i.default.createElement("div",{className:"title"},l)),i.default.createElement(o.default,{rendition:n,renderChapters:a}))};t.More=s;var a=s;t.default=a},function(e,t,n){var r=n(20),i=n(102);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(21)(!1)).push([e.i,".react-epubjs .more{height:100%;width:100%;position:absolute;z-index:2}.react-epubjs .more .setting{width:100%;height:60%;background:#8a8a8ac7}.react-epubjs .more .cancel{width:100%;height:40%}.react-epubjs .more .info{height:3rem;background:#f2f2f2;line-height:3rem}.react-epubjs .more .info .title{color:#000;text-align:center;font-weight:bold}.react-epubjs .more .chapters{background-color:#fff;z-index:3;padding:2rem;height:calc(100% - 3rem);overflow:auto}.react-epubjs .more .chapters .chapter{padding:.6rem;text-decoration:underline;display:table}",""]),e.exports=t},function(e,t,n){"use strict";var r=n(31),i=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.rendition,n=e.renderChapters,r=(0,s.useState)([]),i=(0,o.default)(r,2),a=i[0],l=i[1];(0,s.useEffect)((function(){if(t){var e=t.book;e.ready.then((function(){var t=e.navigation.toc;l(t)}))}}),[t]);var u=function(e){return function(){t.display(e.href)}};return s.default.createElement("div",{className:"chapters"},n?n(a,t):a.map((function(e,t){var n=e.label;return s.default.createElement("p",{className:"chapter",key:t,onClick:u(e)},t,": ",n)})))};var o=i(n(32)),s=r(n(8))},function(e,t,n){"use strict";var r=n(11);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Loader=void 0,n(105);var i=r(n(8)),o=function(){return i.default.createElement("div",{className:"lds-ripple"},i.default.createElement("div",null),i.default.createElement("div",null))};t.Loader=o;var s=o;t.default=s},function(e,t,n){var r=n(20),i=n(106);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(21)(!1)).push([e.i,".react-epubjs .lds-ripple{display:inline-block;width:80px;height:80px;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.react-epubjs .lds-ripple div{position:absolute;border:4px solid #ddd;opacity:1;border-radius:50%;animation:lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite}.react-epubjs .lds-ripple div:nth-child(2){animation-delay:-0.5s}@keyframes lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0px;left:0px;width:72px;height:72px;opacity:0}}",""]),e.exports=t},function(e,t,n){"use strict";n.r(t),n.d(t,"DOWN",(function(){return f})),n.d(t,"LEFT",(function(){return c})),n.d(t,"RIGHT",(function(){return h})),n.d(t,"Swipeable",(function(){return y})),n.d(t,"UP",(function(){return d})),n.d(t,"useSwipeable",(function(){return v}));var r=n(8),i=n.n(r),o=n(7),s=n.n(o);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l={preventDefaultTouchmoveEvent:!1,delta:10,rotationAngle:0,trackMouse:!1,trackTouch:!0},u={xy:[0,0],swiping:!1,eventData:void 0,start:void 0},c="Left",h="Right",d="Up",f="Down";function p(e,t){if(0===t)return e;var n=Math.PI/180*t;return[e[0]*Math.cos(n)+e[1]*Math.sin(n),e[1]*Math.cos(n)-e[0]*Math.sin(n)]}function m(e,t){var n=function(t){t.touches&&t.touches.length>1||e((function(e,n){n.trackMouse&&(document.addEventListener("mousemove",r),document.addEventListener("mouseup",s));var i=t.touches?t.touches[0]:t,o=p([i.clientX,i.clientY],n.rotationAngle);return a({},e,u,{eventData:{initial:[].concat(o),first:!0},xy:o,start:t.timeStamp||0})}))},r=function(t){e((function(e,n){if(!e.xy[0]||!e.xy[1]||t.touches&&t.touches.length>1)return e;var r=t.touches?t.touches[0]:t,i=p([r.clientX,r.clientY],n.rotationAngle),o=i[0],s=i[1],l=e.xy[0]-o,u=e.xy[1]-s,m=Math.abs(l),g=Math.abs(u),v=(t.timeStamp||0)-e.start,y=Math.sqrt(m*m+g*g)/(v||1);if(m<n.delta&&g<n.delta&&!e.swiping)return e;var b=function(e,t,n,r){return e>t?n>0?c:h:r>0?d:f}(m,g,l,u),w=a({},e.eventData,{event:t,absX:m,absY:g,deltaX:l,deltaY:u,velocity:y,dir:b});n.onSwiping&&n.onSwiping(w);var _=!1;return(n.onSwiping||n.onSwiped||n["onSwiped"+b])&&(_=!0),_&&n.preventDefaultTouchmoveEvent&&n.trackTouch&&t.cancelable&&t.preventDefault(),a({},e,{eventData:a({},w,{first:!1}),swiping:!0})}))},i=function(t){e((function(e,n){var r;return e.swiping&&(r=a({},e.eventData,{event:t}),n.onSwiped&&n.onSwiped(r),n["onSwiped"+r.dir]&&n["onSwiped"+r.dir](r)),a({},e,u,{eventData:r})}))},o=function(){document.removeEventListener("mousemove",r),document.removeEventListener("mouseup",s)},s=function(e){o(),i(e)},l=function(e){if(e&&e.addEventListener){var t=[["touchstart",n],["touchmove",r],["touchend",i]];return t.forEach((function(t){var n=t[0],r=t[1];return e.addEventListener(n,r)})),function(){return t.forEach((function(t){var n=t[0],r=t[1];return e.removeEventListener(n,r)}))}}},m={ref:function(t){null!==t&&e((function(e,n){if(e.el===t)return e;var r={};return e.el&&e.el!==t&&e.cleanUpTouch&&(e.cleanUpTouch(),r.cleanUpTouch=null),n.trackTouch&&t&&(r.cleanUpTouch=l(t)),a({},e,{el:t},r)}))}};return t.trackMouse&&(m.onMouseDown=n),[m,l]}function g(e,t,n){var r={};return!t.trackTouch&&e.cleanUpTouch?(e.cleanUpTouch(),r.cleanUpTouch=null):t.trackTouch&&!e.cleanUpTouch&&e.el&&(r.cleanUpTouch=n(e.el)),a({},e,r)}function v(e){var t=e.trackMouse,n=i.a.useRef(a({},u,{type:"hook"})),r=i.a.useRef();r.current=a({},l,e);var o=i.a.useMemo((function(){return m((function(e){return n.current=e(n.current,r.current)}),{trackMouse:t})}),[t]),s=o[0],c=o[1];return n.current=g(n.current,r.current,c),s}var y=function(e){var t,n;function r(t){var n;return(n=e.call(this,t)||this)._set=function(e){n.transientState=e(n.transientState,n.props)},n.transientState=a({},u,{type:"class"}),n}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.prototype.render=function(){var e=this.props,t=e.className,n=e.style,r=e.nodeName,o=void 0===r?"div":r,s=e.innerRef,l=e.children,u=e.trackMouse,c=m(this._set,{trackMouse:u}),h=c[0],d=c[1];this.transientState=g(this.transientState,this.props,d);var f=s?function(e){return s(e),h.ref(e)}:h.ref;return i.a.createElement(o,a({},h,{className:t,style:n,ref:f}),l)},r}(i.a.PureComponent);y.propTypes={onSwiped:s.a.func,onSwiping:s.a.func,onSwipedUp:s.a.func,onSwipedRight:s.a.func,onSwipedDown:s.a.func,onSwipedLeft:s.a.func,delta:s.a.number,preventDefaultTouchmoveEvent:s.a.bool,nodeName:s.a.string,trackMouse:s.a.bool,trackTouch:s.a.bool,innerRef:s.a.func,rotationAngle:s.a.number},y.defaultProps=l},function(e,t,n){"use strict";var r=n(109);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,s){if(s!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"src/assets/book.epub"}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,